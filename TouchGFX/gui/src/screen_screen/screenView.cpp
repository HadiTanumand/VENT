#include <gui/screen_screen/screenView.hpp>
#include <touchgfx/Color.hpp>

using namespace std;

extern SPI_HandleTypeDef hspi2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern QSPI_HandleTypeDef hqspi;
extern int16_t key1;
extern int16_t encoderCounter;
extern uint8_t flagvent;
extern uint8_t pressKey;
extern uint8_t alarmType_intval; // hight=3, medium=2, low=1, 0 off
extern int freq_sound;
extern int audio_sound;
extern RTC_HandleTypeDef hrtc;
extern RTC_TimeTypeDef RTC_Time;
extern RTC_DateTypeDef RTC_Date;


extern uint8_t isAlerting;
extern uint32_t flag;
extern uint32_t record;
extern float flag_startVent;
extern float lockScreen_intval; // 0:off, 1:on
extern float CPR_intval;// 0:off, 1:on
extern int isLockChanged;
extern int isCPRChanged;
extern float manualBreath_intval;
extern float silent_intval;

extern float RR_real;
extern float Ti_real;
extern float Te_real;
extern float VT_real;
extern float VTi_real;
extern float VTe_real;
extern float flow_real;
extern float TiInspPause_real;
extern float FiO2_real;
extern float LeakExp_real;
extern float pressure_real;
extern float pip_real; 
extern float peep_real;
extern float PIF_real;
extern float IPP_real;
extern float CMPL_real;
extern float AVP_real;
extern float Patm_real;
extern float leak_real;
extern float MVe_real;
extern float MVi_real;
extern float Res_real;
extern float alarm_real[6];
extern float bat_real;
extern float PEF_real;
extern float RSBI_real;
extern float SPO2_real;
extern float SpontTrig_real;
extern float SpontCycle_real;
extern float circuitDis_real;
extern float pulseRate_real;
extern float obstruction_real;
extern float check_data;
extern float measureBattTime_real;
extern float externalDC_real;

extern float old_check_data;
extern float fault_recieve; // 0 no fault // 1 fault in recieve

extern float tightness_result;
extern float flowSensor_forward_result;
extern float flowSensor_backward_result;
extern float calib_process; // test process state (0->not completed, 1->processing, 2-> completed)


//extern uint8_t rx_buffer[700];

extern uint8_t tx_data[700];
uint8_t tx_config[700] = "conf";

uint16_t vent_lastHours[1];	  // store ventilation last time in QSPI32 
uint16_t vent_hours[1] = {0};  // store ventilation time in QSPI 
uint8_t vent_minutes[1] = {0}; // store ventilation time in QSPI 
uint8_t trend_alarm[30] = {0}; // store Alarms in QSPI 
uint32_t startAlarmPointer[1]; // store Alarms Pointer in QSPI 
uint8_t trend_data[2006] = {0}; // store Data in QSPI 
uint32_t startDataPointer[1]; // store Data Pointer in QSPI 
uint8_t trend_listAlarms[10][30];
uint8_t calibration_result[24];


uint16_t tmp;
int graphPIndex = 0;
int maskType_intval=-1; // 1:vented, 2:non-vented
int circuitType_intval=0; // 1:valve, 2:leak
int patientType_intval=1; // 1:adult, 2:pediatric
float interfaceType_intval = 0; // 1:mask, 2:invasive
float RR_alarm_maxVal = 30;
float RR_alarm_minVal = 10;
float pressure_alarm_maxVal = 60;
float MVi_alarm_maxVal = 20;
float MVi_alarm_minVal = 4;
float MVe_alarm_maxVal = 20;
float MVe_alarm_minVal = 4;
float FiO2_alarm_maxIntVal = 60;
float FiO2_alarm_minIntVal = 21;
float Leak_alarm_maxIntVal = 4;
float SPO2_alarm_maxIntVal = 145;
float SPO2_alarm_minIntVal = 60;
float backupMode_intval = 0;
bool isLowPEEP_alarm = false; // 0 ,1
bool isVentStoped_alarm = false; // 0 ,1
bool isFiO2Fake_alarm = false; // 0 ,1
bool isExtraBackup = false;
float pressure_alarm_minVal = 10;
float vti_alarm_maxVal = 1000;
float vti_alarm_minVal = 100;
float vte_alarm_maxVal = 800;
float vte_alarm_minVal = 200;
float apnea_alarmIntval = 30;
float apnea_backupIntval = 50;
float apneaDetection_intval = 1;
float PEEP_intval;
float EPAP_intval;
float IPAP_intval;
float IPAPMax_intval;
float backup_PEEP_intval;
float PEEP_tmp_intval;
float PControl_intval;
float PControlMax_intval;
float backup_PControl_intval;
float PControl_tmp_intval;
float RR_intval; 
float backup_RR_intval; 
float RR_tmp_intval;
float VT_intval; 
float backup_VT_intval; 
float VT_tmp_intval;
float IE_intval; 
float SafetyVT_tmp_intval;
float Ti_intval;
float Ti_max_intval;
float Ti_min_intval;
float backup_Ti_intval;
float Ti_tmp_intval;
float CPAP_intval;
float CPAP_tmp_intval;
float TiInspPause_intval;
float TiInspPause_tmp_intval;
float flowShape_intval; 
float backup_flowShape_intval; 
float flowShape_tmp_intval;
float riseTime_intval;
float backup_riseTime_intval;
float riseTime_tmp_intval;
float trigger_intval; // 0-> flow _ 1-> pressure
float trigger_tmp_intval;
float Psupp_intval;
float PSMax_intval;
float Psupp_tmp_intval;
float sens_intval;
float sens_tmp_intval;
float cyclingOff_intval;
float cyclingOff_tmp_intval;
float weight_intval;
float weight_tmp_intval;
float spo2_maxVal = 95;
float spo2_minVal = 88;
float pulseRate_maxIntVal = 120;
float pulseRate_minIntVal = 70;
float circuitDis_intval = 75;
float obstruction_intval = -1;
float safetyVT_intval = 150;
float PIF_maxVal = 105;
float PIF_minVal = 70;
float FiO2_intval;
float FiO2_tmp_intval;
float calibration_sdp_state;
float blockingStart;
float backward_start;
float forward_start;

uint8_t previousAlarms[6] = {0};
uint8_t newAlarms[6] = {0};
	
// static uint8_t turn=0;
bool isStartTrending = false;
bool isArabic = false;
bool isLoading = false;
bool modeFlag = false;
bool isAlarmTrend = true;
bool isAlarmChanged = false;
bool isCircuitSetting = false;
bool isAutoScale = true;
bool isConfigTransferd = false;
//item positions ----
int graphVPosx;
int graphVPosy;
int graphLineVPosx;
int graphLineVPosy;
int graphPPosx;
int graphPPosy;
int graphLinePPosx;
int graphLinePPosy;
int graphFPosx;
int graphFPosy;
int graphLineFPosx;
int graphLineFPosy;
int mainPosx1=549;
int mainPosx2=672;
int mainPosy1=194;
int mainPosy2=280;
int mainPosy3=366;
int settingPosx1=25; // 180 between them
int settingPosx2=205;
int settingPosx3=385; 
int settingPosx4=565;
int settingPosy1=190; // 120 between them
int settingPosy2=310;
int settingPosy3=430;
// ---- end positions
TextAreaWithOneWildcard* dataModeVector[4];
TextAreaWithOneWildcard* alarmsContentVector[10];
Unicode::UnicodeChar dataMode_buffers[4][10];
Unicode::UnicodeChar alarmsContent_buffers[10][25];
TextAreaWithOneWildcard* alarmsIndexesVector[10];
Unicode::UnicodeChar alarmsIndex_buffers[10][6];
TextAreaWithTwoWildcards* dataTimeVector[4];
TextAreaWithTwoWildcards* alarmsTimeVector[10];
Unicode::UnicodeChar dataTime_buffers1[4][12];
Unicode::UnicodeChar dataTime_buffers2[4][8];
Unicode::UnicodeChar alarmsTime_buffers1[10][12];
Unicode::UnicodeChar alarmsTime_buffers2[10][8];
uint8_t alarmMute_counter = 0;
int start_counter = 0;
uint16_t alarmCount=0;
uint16_t dataCount=0;
uint32_t qspiAddr32 = 32 * 1024 * 1024;
uint32_t qspiAddr30 = 30 * 1024 * 1024;
uint32_t qspiAddr20 = 20 * 1024 * 1024;
uint32_t qspiAddr25 = 25 * 1024 * 1024;
int8_t trndFileClickedNumber; // 10 file maximum -> 0 - 10
uint32_t trendShowSteps = 0;
uint32_t trendShowSteps_tmp = -1;
int trendDataCounter = 0; // 0-2006
bool isMemoryFree = true;
uint8_t trendAlarmValues[10000][30]; // total alarms 10000 and each 30 Bytes
uint8_t trendDataValues[4][2006]; // just load the 4 new values to show(all the qspi data trends is too much) 2006= 2k data + 10 time + 1 config
uint32_t pointerVentHours = qspiAddr32 - 3 * 4096; // start point for ventHours
uint32_t pointerAlarmTrends = qspiAddr32 - 80 * 4096;
uint32_t pointerDataTrends = qspiAddr20;
uint32_t pointerStartAlarmPointer = qspiAddr32 - 81 * 4096;
uint32_t pointerStartDataPointer = qspiAddr30;

screenView::screenView()
{
	
}
void screenView::updateConfigsWildCards()
{
	Unicode::snprintf(VT_valBuffer, VT_VAL_SIZE, "%d", (int)VT_intval);
	VT_val.setWildcard1(VT_valBuffer);
	VT_val.invalidate();
	Unicode::snprintf(VT_val_ventSettingBuffer, VT_VAL_VENTSETTING_SIZE, "%d", (int)VT_intval);
	VT_val_ventSetting.setWildcard1(VT_val_ventSettingBuffer);
	VT_val_ventSetting.invalidate();
	Unicode::snprintf(VT_val_backupScreenBuffer, VT_VAL_BACKUPSCREEN_SIZE, "%d", (int)VT_intval);
	VT_val_backupScreen.setWildcard1(VT_val_backupScreenBuffer);
	VT_val_backupScreen.invalidate();
	Unicode::snprintf(RR_valBuffer, RR_VAL_SIZE, "%d", (int)RR_intval);
	RR_val.setWildcard1(RR_valBuffer);
	RR_val.invalidate();
	Unicode::snprintf(RR_val_ventSettingBuffer, RR_VAL_VENTSETTING_SIZE, "%d", (int)RR_intval);
	RR_val_ventSetting.setWildcard1(RR_val_ventSettingBuffer);
	RR_val_ventSetting.invalidate();
	Unicode::snprintf(RR_val_backupScreenBuffer, RR_VAL_BACKUPSCREEN_SIZE, "%d", (int)RR_intval);
	RR_val_backupScreen.setWildcard1(RR_val_backupScreenBuffer);
	RR_val_backupScreen.invalidate();
	Unicode::snprintf(PEEP_valBuffer, PEEP_VAL_SIZE, "%d", (int)PEEP_intval);
	PEEP_val.setWildcard1(PEEP_valBuffer);
	PEEP_val.invalidate();
	Unicode::snprintf(PEEP_val_ventSettingBuffer, PEEP_VAL_VENTSETTING_SIZE, "%d", (int)PEEP_intval);
	PEEP_val_ventSetting.setWildcard1(PEEP_val_ventSettingBuffer);
	PEEP_val_ventSetting.invalidate();
	Unicode::snprintf(PEEP_val_backupScreenBuffer, PEEP_VAL_BACKUPSCREEN_SIZE, "%d", (int)PEEP_intval);
	PEEP_val_backupScreen.setWildcard1(PEEP_val_backupScreenBuffer);
	PEEP_val_backupScreen.invalidate();
	Unicode::snprintf(PControl_valBuffer, PCONTROL_VAL_SIZE, "%d", (int)PControl_intval);
	PControl_val.setWildcard1(PControl_valBuffer);
	PControl_val.invalidate();
	Unicode::snprintf(PControl_val_ventSettingBuffer, PCONTROL_VAL_VENTSETTING_SIZE, "%d", (int)PControl_intval);
	PControl_val_ventSetting.setWildcard1(PControl_val_ventSettingBuffer);
	PControl_val_ventSetting.invalidate();
	Unicode::snprintf(FiO2_valBuffer, FIO2_VAL_SIZE, "%d", (int)FiO2_intval);
	FiO2_val.setWildcard1(FiO2_valBuffer);
	FiO2_val.invalidate();
	Unicode::snprintf(FiO2_val_ventSettingBuffer, FIO2_VAL_VENTSETTING_SIZE, "%d", (int)FiO2_intval);
	FiO2_val_ventSetting.setWildcard1(FiO2_val_ventSettingBuffer);
	FiO2_val_ventSetting.invalidate();
	Unicode::snprintf(riseTime_valBuffer, RISETIME_VAL_SIZE, "%d", (int)riseTime_intval);
	riseTime_val.setWildcard1(riseTime_valBuffer);
	riseTime_val.invalidate();
	Unicode::snprintf(riseTime_val_ventSettingBuffer, RISETIME_VAL_VENTSETTING_SIZE, "%d", (int)riseTime_intval);
	riseTime_val_ventSetting.setWildcard1(riseTime_val_ventSettingBuffer);
	riseTime_val_ventSetting.invalidate();
	Unicode::snprintf(riseTime_val_backupScreenBuffer, RISETIME_VAL_BACKUPSCREEN_SIZE, "%d", (int)riseTime_intval);
	riseTime_val_backupScreen.setWildcard1(riseTime_val_backupScreenBuffer);
	riseTime_val_backupScreen.invalidate();
	Unicode::snprintf(FlowShape_val_ventSettingBuffer, FLOWSHAPE_VAL_VENTSETTING_SIZE, "%d", (int)flowShape_intval);
	FlowShape_val_ventSetting.setWildcard1(FlowShape_val_ventSettingBuffer);
	FlowShape_val_ventSetting.invalidate();
	Unicode::snprintf(FlowShape_val_backupScreenBuffer, FLOWSHAPE_VAL_BACKUPSCREEN_SIZE, "%d", (int)flowShape_intval);
	FlowShape_val_backupScreen.setWildcard1(FlowShape_val_backupScreenBuffer);
	FlowShape_val_backupScreen.invalidate();
	Unicode::snprintf(PS_valBuffer, PS_VAL_SIZE, "%d", (int)Psupp_intval);
	PS_val.setWildcard1(PS_valBuffer);
	PS_val.invalidate();
	Unicode::snprintf(PS_val_ventSettingBuffer, PS_VAL_VENTSETTING_SIZE, "%d", (int)Psupp_intval);
	PS_val_ventSetting.setWildcard1(PS_val_ventSettingBuffer);
	PS_val_ventSetting.invalidate();
	Unicode::snprintf(PSMax_val_ventSettingBuffer, PSMAX_VAL_VENTSETTING_SIZE, "%d", (int)PSMax_intval);
	PSMax_val_ventSetting.setWildcard1(PSMax_val_ventSettingBuffer);
	PSMax_val_ventSetting.invalidate();
	Unicode::snprintfFloat(sensivity_valBuffer, SENSIVITY_VAL_SIZE, "%.1f", sens_intval);
	sensivity_val.setWildcard1(sensivity_valBuffer);
	sensivity_val.invalidate();
	Unicode::snprintfFloat(sensivity_val_ventSettingBuffer, SENSIVITY_VAL_VENTSETTING_SIZE, "%.1f", sens_intval);
	sensivity_val_ventSetting.setWildcard1(sensivity_val_ventSettingBuffer);
	sensivity_val_ventSetting.invalidate();
	Unicode::snprintfFloat(Ti_valBuffer, TI_VAL_SIZE, "%.1f", Ti_intval);
	Ti_val.setWildcard1(Ti_valBuffer);
	Ti_val.invalidate();
	Unicode::snprintfFloat(Ti_val_ventSettingBuffer, TI_VAL_VENTSETTING_SIZE, "%.1f", Ti_intval);
	Ti_val_ventSetting.setWildcard1(Ti_val_ventSettingBuffer);
	Ti_val_ventSetting.invalidate();
	Unicode::snprintf(Ti_val_backupScreenBuffer, TI_VAL_BACKUPSCREEN_SIZE, "%d", (int)Ti_intval);
	Ti_val_backupScreen.setWildcard1(Ti_val_backupScreenBuffer);
	Ti_val_backupScreen.invalidate();
	Unicode::snprintfFloat(TiMax_val_ventSettingBuffer, TIMAX_VAL_VENTSETTING_SIZE, "%.1f", Ti_max_intval);
	TiMax_val_ventSetting.setWildcard1(TiMax_val_ventSettingBuffer);
	TiMax_val_ventSetting.invalidate();
	Unicode::snprintfFloat(TiMin_val_ventSettingBuffer, TIMIN_VAL_VENTSETTING_SIZE, "%.1f", Ti_min_intval);
	TiMin_val_ventSetting.setWildcard1(TiMin_val_ventSettingBuffer);
	TiMin_val_ventSetting.invalidate();
	Unicode::snprintfFloat(TiInspPause_val_ventSettingBuffer, TIINSPPAUSE_VAL_BIG_VENTSETTING_SIZE, "%0.1f", TiInspPause_intval);
	TiInspPause_val_ventSetting.setWildcard1(TiInspPause_val_ventSettingBuffer);
	TiInspPause_val_ventSetting.invalidate();
	Unicode::snprintf(cyclingOff_valBuffer, CYCLINGOFF_VAL_SIZE, "%d", (int)cyclingOff_intval);
	cyclingOff_val.setWildcard1(cyclingOff_valBuffer);
	cyclingOff_val.invalidate();
	Unicode::snprintf(cyclingOff_val_ventSettingBuffer, CYCLINGOFF_VAL_VENTSETTING_SIZE, "%d", (int)cyclingOff_intval);
	cyclingOff_val_ventSetting.setWildcard1(cyclingOff_val_ventSettingBuffer);
	cyclingOff_val_ventSetting.invalidate();
	Unicode::snprintf(IPAPMax_val_ventSettingBuffer, IPAPMAX_VAL_VENTSETTING_SIZE, "%d", (int)IPAPMax_intval);
	IPAPMax_val_ventSetting.setWildcard1(IPAPMax_val_ventSettingBuffer);
	IPAPMax_val_ventSetting.invalidate();
	Unicode::snprintf(IPAP_val_ventSettingBuffer, IPAP_VAL_VENTSETTING_SIZE, "%d", (int)IPAP_intval);
	IPAP_val_ventSetting.setWildcard1(IPAP_val_ventSettingBuffer);
	IPAP_val_ventSetting.invalidate();
	Unicode::snprintf(EPAP_val_ventSettingBuffer, EPAP_VAL_VENTSETTING_SIZE, "%d", (int)EPAP_intval);
	EPAP_val_ventSetting.setWildcard1(EPAP_val_ventSettingBuffer);
	EPAP_val_ventSetting.invalidate();
	Unicode::snprintf(PControl_val_backupScreenBuffer, PCONTROL_VAL_BACKUPSCREEN_SIZE, "%d", (int)PControl_intval);
	PControl_val_backupScreen.setWildcard1(PControl_val_backupScreenBuffer);
	PControl_val_backupScreen.invalidate();
	Unicode::snprintf(PControlMax_val_ventSettingBuffer, PCONTROLMAX_VAL_VENTSETTING_SIZE, "%d", (int)PControlMax_intval);
	PControlMax_val_ventSetting.setWildcard1(PControlMax_val_ventSettingBuffer);
	PControlMax_val_ventSetting.invalidate();	
	Unicode::snprintf(SafetyVT_val_ventSettingBuffer, SAFETYVT_VAL_VENTSETTING_SIZE, "%d", (int)safetyVT_intval);
	SafetyVT_val_ventSetting.setWildcard1(SafetyVT_val_ventSettingBuffer);
	SafetyVT_val_ventSetting.invalidate();
	
	// change related things like: MV, Te, IE (in hint box)
	Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
	MV_hint_val.setWildcard1(MV_hint_valBuffer);
	MV_hint_val.invalidate();
	float i = 0;
	float e = 0;
	if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
	{
		i = 1;
		e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
	}
	else
	{
		i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
		e = 1;
	}
	Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
	Te_hint_val.setWildcard1(Te_hint_valBuffer);
	Te_hint_val.invalidate();
	Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
	IE_hint_val.setWildcard1(IE_hint_valBuffer1);
	IE_hint_val.invalidate();
	Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
	IE_hint_val.setWildcard2(IE_hint_valBuffer2);
	IE_hint_val.invalidate();
	// test for trigger unit
	trigger_intval = 1;
	if (trigger_intval == 0)
	{
		trigger_val_flow.setVisible(true);
		trigger_val_flow.invalidate();
		trigger_val_pressure.setVisible(false);
		trigger_val_pressure.invalidate();
		lpmtxt_sens.setVisible(true);
		lpmtxt_sens.invalidate();
		lpmtxt_sensVentS.setVisible(true);
		lpmtxt_sensVentS.invalidate();
		cmh2otxt_sens.setVisible(false);
		cmh2otxt_sens.invalidate();
		cmh2otxt_sensVentS.setVisible(false);
		cmh2otxt_sensVentS.invalidate();
	}
	else if (trigger_intval == 1)
	{
		trigger_val_flow.setVisible(false);
		trigger_val_flow.invalidate();
		trigger_val_pressure.setVisible(true);
		trigger_val_pressure.invalidate();

		lpmtxt_sens.setVisible(false);
		lpmtxt_sens.invalidate();
		lpmtxt_sensVentS.setVisible(false);
		lpmtxt_sensVentS.invalidate();
		cmh2otxt_sens.setVisible(true);
		cmh2otxt_sens.invalidate();
		cmh2otxt_sensVentS.setVisible(true);
		cmh2otxt_sensVentS.invalidate();
	}
}
void screenView::updateDate()
{
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);

	h = RTC_Time.Hours;
	m = RTC_Time.Minutes;
	digitalClock_setting.setTime24Hour(h, m, 2);
	digitalClock_setting.invalidate();

	date[0] = (char)(RTC_Date.Date / 10) + 48;
	date[1] = (RTC_Date.Date % 10) + 48;
	date[2] = ' ';

	uint8_t month = (RTC_Date.Month / 10 * 10) + (RTC_Date.Month % 10);

	switch (month)
	{
	case 1:
	{
		date[3] = 'J';
		date[4] = 'a';
		date[5] = 'n';
		break;
	}
	case 2:
	{
		date[3] = 'F';
		date[4] = 'e';
		date[5] = 'b';
		break;
	}
	case 3:
	{
		date[3] = 'M';
		date[4] = 'a';
		date[5] = 'r';
		break;
	}
	case 4:
	{
		date[3] = 'A';
		date[4] = 'p';
		date[5] = 'r';
		break;
	}
	case 5:
	{
		date[3] = 'M';
		date[4] = 'a';
		date[5] = 'y';
		break;
	}
	case 6:
	{
		date[3] = 'J';
		date[4] = 'u';
		date[5] = 'n';
		break;
	}
	case 7:
	{
		date[3] = 'J';
		date[4] = 'u';
		date[5] = 'l';
		break;
	}
	case 8:
	{
		date[3] = 'A';
		date[4] = 'u';
		date[5] = 'g';
		break;
	}
	case 9:
	{
		date[3] = 'S';
		date[4] = 'e';
		date[5] = 'p';
		break;
	}
	case 10:
	{
		date[3] = 'O';
		date[4] = 'c';
		date[5] = 't';
		break;
	}
	case 11:
	{
		date[3] = 'N';
		date[4] = 'o';
		date[5] = 'v';
		break;
	}
	case 12:
	{
		date[3] = 'D';
		date[4] = 'e';
		date[5] = 'c';
		break;
	}
	}

	date[6] = ' ';
	date[7] = '2';
	date[8] = '0';
	date[9] = (char)(RTC_Date.Year / 10) + 48;
	date[10] = (char)(RTC_Date.Year % 10) + 48;

	Unicode::strncpy(DateTxtBuffer, date, DATETXT_SIZE);
	DateTxt.resizeToCurrentText();
	DateTxt.invalidate();

	// for date setting
	char d[2] = {0};
	d[0] = date[0];
	d[1] = date[1];
	Unicode::strncpy(day_settingBuffer, d, 2);
	DateTxt.resizeToCurrentText();
	day_setting.invalidate();
	char m[4] = {0};
	m[0] = date[3];
	m[1] = date[4];
	m[2] = date[5];
	m[3] = ' ';
	Unicode::strncpy(month_settingBuffer, m, 4);
	DateTxt.resizeToCurrentText();
	month_setting.invalidate();
	char y[4] = {0};
	y[0] = date[7];
	y[1] = date[8];
	y[2] = date[9];
	y[3] = date[10];
	Unicode::strncpy(year_settingBuffer, y, 4);
	DateTxt.resizeToCurrentText();
	year_setting.invalidate();

	//	char w[3];
	//	switch (RTC_Date.WeekDay)
	//	{
	//		case RTC_WEEKDAY_MONDAY:
	//		{
	//			w[0] = 'M';
	//			w[1] = 'o';
	//			w[2] = 'n';
	//			break;
	//		}
	//		case RTC_WEEKDAY_TUESDAY: // tuesday
	//		{
	//			w[0] = 'T';
	//			w[1] = 'u';
	//			w[2] = 'e';
	//			break;
	//		}
	//		case RTC_WEEKDAY_WEDNESDAY:
	//		{
	//			w[0] = 'W';
	//			w[1] = 'e';
	//			w[2] = 'd';
	//			break;
	//		}
	//		case RTC_WEEKDAY_THURSDAY:
	//		{
	//			w[0] = 'T';
	//			w[1] = 'h';
	//			w[2] = 'u';
	//			break;
	//		}
	//		case RTC_WEEKDAY_FRIDAY:
	//		{
	//			w[0] = 'F';
	//			w[1] = 'r';
	//			w[2] = 'i';
	//			break;
	//		}
	//		case RTC_WEEKDAY_SATURDAY:
	//		{
	//			w[0] = 'S';
	//			w[1] = 'a';
	//			w[2] = 't';
	//			break;
	//		}
	//		case RTC_WEEKDAY_SUNDAY:
	//		{
	//			w[0] = 'S';
	//			w[1] = 'u';
	//			w[2] = 'n';
	//			break;
	//		}
	//	}
	//	Unicode::strncpy(week_settingBuffer, w, 3);
	//	//		month_setting.resizeToCurrentText();
	//	week_setting.invalidate();
}
void screenView::load_data()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);

	//W25Q256FV_QSPI_EraseSector(&hqspi, qspiAddr32-85*4*1024, qspiAddr32-1);
	
	//------------------- vent hours -------------------
	uint32_t start = qspiAddr32 - 3 * 4096;
	pointerVentHours = findNextEmptyQSPI(start, pointerVentHours, start+(136*60));
	if (pointerVentHours - (qspiAddr32 - 3 * 4096) > 1 && (pointerVentHours - (qspiAddr32 - 3 * 4096)) % 60 == 0) // it is the hours place to read from qspi(every 60 minutes)
	{
		vent_minutes[0] = 0;
		W25Q256FV_QSPI_Read(&hqspi, (uint8_t *)vent_hours, pointerVentHours - 1, sizeof(vent_hours)); // 2*uint8
	}
	else
		vent_minutes[0] = (pointerVentHours - start) % 60;

	W25Q256FV_QSPI_Read(&hqspi, (uint8_t *)vent_lastHours, qspiAddr32 - 4096 - 2, sizeof(vent_lastHours));
	if (vent_lastHours[0] == 0xFFFF)
		vent_lastHours[0] = 0;
	vent_hours[0] += vent_lastHours[0];
	vent_hours[0] += (uint16_t)(pointerVentHours - (qspiAddr32 - 3 * 4096)) / 60;

	if (vent_minutes[0] == 255)
	{
		vent_minutes[0] = 0;
	}
	
	//-------- Enable Memory
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}

void screenView::load_startAlarmPointer()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);

	uint32_t start = qspiAddr32 - 81*4096;
	pointerStartAlarmPointer = findNextEmptyQSPI(start, pointerStartAlarmPointer, start + 4080);
	W25Q256FV_QSPI_Read(&hqspi, (uint8_t *)startAlarmPointer, pointerStartAlarmPointer-4, sizeof(startAlarmPointer));
	if(startAlarmPointer[0]==0 || startAlarmPointer[0]==0xFFFFFFFF)
	{
			startAlarmPointer[0]=qspiAddr32-80*4096;
	}
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::save_startAlarmPointer()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	uint32_t start = qspiAddr32 - 81*4096;
	pointerStartAlarmPointer = findNextEmptyQSPI(start, pointerStartAlarmPointer, start + 4080);
	if(pointerStartAlarmPointer > start + 4080)
	{
		pointerStartAlarmPointer = start;
		W25Q256FV_QSPI_EraseSector(&hqspi, start+1, start+2);
	}
	else
		W25Q256FV_QSPI_Write(&hqspi, (uint8_t *)startAlarmPointer, pointerStartAlarmPointer, sizeof(startAlarmPointer));
	
	pointerStartAlarmPointer+=4; // uint32_t
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::load_trendAlarms()
{
	if(!isMemoryFree) return;
	
	load_startAlarmPointer();
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	//------------------- alarms -------------------
	uint32_t start = qspiAddr32 - 80*4096;
	pointerAlarmTrends = findNextEmptyQSPI(start, startAlarmPointer[0], start + 75*4096);
	if(startAlarmPointer[0] <= pointerAlarmTrends) // calculate the counter
		alarmCount = (pointerAlarmTrends - startAlarmPointer[0])/30;
	else
		alarmCount = ((75*4096) - startAlarmPointer[0] + pointerAlarmTrends)/30;
		
	uint32_t tmpPointer = startAlarmPointer[0];
	if (alarmCount > 0)
	{
    for (int i = 0; i < alarmCount; i++)
    {
        // Calculate the current address based on the circular range
        uint32_t currentAddress = (tmpPointer - start) % (75 * 4096) + start;

        // Adjust the buffer size if it goes beyond the end of the circular range
        uint32_t remainingBytes = start + 75 * 4096 - currentAddress;
        uint32_t bytesToRead = (remainingBytes < 30) ? remainingBytes : sizeof(trendAlarmValues[0]);

        W25Q256FV_QSPI_Read(&hqspi, trendAlarmValues[i], currentAddress, bytesToRead);
        tmpPointer += 30;
    }
	}
	//------------- Enable Memory
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}

void screenView::save_trendAlarm(uint8_t str[])
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
	uint8_t hour = RTC_Time.Hours; // 0-24 -> 1B
	uint8_t minute = RTC_Time.Minutes; // 0-60 -> 1B
	uint8_t year = RTC_Date.Year;
	uint8_t month = RTC_Date.Month;
	uint8_t date = RTC_Date.Date;
	
	memcpy(trend_alarm, str, 25);
	trend_alarm[25] = hour;
	trend_alarm[26] = minute;
	trend_alarm[27] = year;
	trend_alarm[28] = month;
	trend_alarm[29] = date;

	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	W25Q256FV_QSPI_Write(&hqspi, trend_alarm, pointerAlarmTrends, sizeof(trend_alarm));
	pointerAlarmTrends+=30;
	for(int i = 0; i < 30; i++)
		trendAlarmValues[alarmCount][i] = trend_alarm[i];
	alarmCount++;
	
	uint32_t start = qspiAddr32-80*4096;
	if(alarmCount>=10000) 
	{
		alarmCount -= (int)4096/30; // minuse a sector
		if(startAlarmPointer[0]+4096 < start+(10000*30)) 
		{
			W25Q256FV_QSPI_EraseSector(&hqspi, startAlarmPointer[0]+1, startAlarmPointer[0]+2);
			startAlarmPointer[0]+= 4096;
		}
		else 
		{
			W25Q256FV_QSPI_EraseSector(&hqspi, start+1, start+2);
			startAlarmPointer[0] = start+4096;
		}
		
		// erase 
		//write start alarm pointer
		save_startAlarmPointer();
	}
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::load_startDataPointer()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	// erase(test)
	//W25Q256FV_QSPI_EraseSector(&hqspi, qspiAddr20, qspiAddr30+(2*4096+1));
	
	uint32_t start = qspiAddr30;
	pointerStartDataPointer = findNextEmptyQSPI(start, pointerStartDataPointer, start + 2*4096);
	W25Q256FV_QSPI_Read(&hqspi, (uint8_t *)startDataPointer, pointerStartDataPointer-4, sizeof(startDataPointer));
	if(startDataPointer[0]==0 || startDataPointer[0]==0xFFFFFFFF)
	{
			startDataPointer[0] = qspiAddr20;
	}
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::save_startDataPointer()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	uint32_t start = qspiAddr30;
	pointerStartDataPointer = findNextEmptyQSPI(start, pointerStartDataPointer, start + 4096*2);
	if(pointerStartDataPointer > start + 4096*2)
	{
		pointerStartDataPointer = start;
		W25Q256FV_QSPI_EraseSector(&hqspi, start+1, start+4096+1);
	}
	else
		W25Q256FV_QSPI_Write(&hqspi, (uint8_t *)startDataPointer, pointerStartDataPointer, sizeof(startDataPointer));
	
	pointerStartDataPointer +=4; // uint32_t
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::load_trendData_last4n()
{
	if(!isMemoryFree) return;
	
	if(trendShowSteps == trendShowSteps_tmp)	return;
	else trendShowSteps_tmp = trendShowSteps;
	
	load_startDataPointer();
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	//------------------- data -------------------
	
	
	uint32_t start = qspiAddr20;
	pointerDataTrends = findNextEmptyQSPI(start, startDataPointer[0], qspiAddr30);
	if(startDataPointer[0] <= pointerDataTrends) // calculate the counter
		dataCount = (pointerDataTrends - startDataPointer[0])/2006;
	else
		dataCount = ((qspiAddr30 - qspiAddr20) - startDataPointer[0] + pointerDataTrends)/2006;
	
	if (dataCount > 4+trendShowSteps)
	{
		uint32_t tmpPointer = startDataPointer[0] + (dataCount-(4+trendShowSteps))*2006;
    for (int i = 0; i < 4; i++)
    {
        // Calculate the current address based on the circular range
        uint32_t currentAddress = (tmpPointer - start) % (qspiAddr30-qspiAddr20) + start;

        // Adjust the buffer size if it goes beyond the end of the circular range
        uint32_t remainingBytes = start + (qspiAddr30-qspiAddr20) - currentAddress;
        uint32_t bytesToRead = (remainingBytes < 2006) ? remainingBytes : sizeof(trendDataValues[0]);

        W25Q256FV_QSPI_Read(&hqspi, trendDataValues[i], currentAddress, bytesToRead);
        tmpPointer += 2006;
    }
	}
	else if (dataCount > 0)
	{
		uint32_t tmpPointer = startDataPointer[0];
    for (int i = 0; i < dataCount%4 ; i++)
    {
        // Calculate the current address based on the circular range
        uint32_t currentAddress = (tmpPointer - start) % (qspiAddr30-qspiAddr20) + start;

        // Adjust the buffer size if it goes beyond the end of the circular range
        uint32_t remainingBytes = start + (qspiAddr30-qspiAddr20) - currentAddress;
        uint32_t bytesToRead = (remainingBytes < 2006) ? remainingBytes : sizeof(trendDataValues[0]);

        W25Q256FV_QSPI_Read(&hqspi, trendDataValues[i], currentAddress, bytesToRead);
        tmpPointer += 2006;
    }
	}
	//------------- Enable Memory
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::save_trendData()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	W25Q256FV_QSPI_Write(&hqspi, trend_data, pointerDataTrends, sizeof(trend_data));
	pointerDataTrends += 2006;
	dataCount++;
	
	uint32_t start = qspiAddr20;
	if(dataCount >= 2880)
	{
		dataCount -= (int)10*4096/2006; // decrease 10 sectors
		if(startDataPointer[0] + 10*4096 < start + (2880*2006)) 
		{
			W25Q256FV_QSPI_EraseSector(&hqspi, startDataPointer[0]+1, startDataPointer[0]*9*4096+1);
			startDataPointer[0] += 10*4096;
		}
		else 
		{
			W25Q256FV_QSPI_EraseSector(&hqspi, start+1, start*9*4096+1);
			startDataPointer[0] = start + 10*4096;
		}
		
		//write start alarm pointer
		save_startDataPointer();
	}
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
	
}
void screenView::save_calibrationDate(uint8_t state)
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);
	
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
	uint8_t hour = RTC_Time.Hours; // 0-24 -> 1B
	uint8_t minute = RTC_Time.Minutes; // 0-60 -> 1B
	uint8_t year = RTC_Date.Year;
	uint8_t month = RTC_Date.Month;
	uint8_t date = RTC_Date.Date;
	
	calibration_result[1+((state-1)*6)] = year;	
	calibration_result[2+((state-1)*6)] = month;
	calibration_result[3+((state-1)*6)] = date;
	calibration_result[4+((state-1)*6)] = hour;
	calibration_result[5+((state-1)*6)] = minute;

	uint32_t start = qspiAddr20-2*4096;
	W25Q256FV_QSPI_EraseSector(&hqspi, start+1, start+28);
	W25Q256FV_QSPI_Write(&hqspi,calibration_result ,start, 24);
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::load_calibrationData()
{
	if(!isMemoryFree) return;
	
	isMemoryFree = false;
	W25Q256FV_QSPI_DeInit(&hqspi);
	W25Q256FV_QSPI_Init(&hqspi);

	uint32_t start = qspiAddr20 -2*4096;

	W25Q256FV_QSPI_Read(&hqspi, calibration_result, start, 24);
	
	if (W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi) != HAL_OK)
	{
		Error_Handler();
	}
	isMemoryFree = true;
}
void screenView::setCalibrationData()
{	
	if (calibration_result[0] == 0xFF)
	{
		tightness_CheckImage.setVisible(false);
		tightness_CheckImage.invalidate();
		tightness_CrossImage.setVisible(false);
		tightness_CrossImage.invalidate();
	}
	else{
		if (calibration_result[0] == 1)
		{
			tightness_CheckImage.setVisible(true);
			tightness_CheckImage.invalidate();
			tightness_CrossImage.setVisible(false);
			tightness_CrossImage.invalidate();
		}
		else
		{
			tightness_CheckImage.setVisible(false);
			tightness_CheckImage.invalidate();
			tightness_CrossImage.setVisible(true);
			tightness_CrossImage.invalidate();
		}
		Unicode::snprintf(tightnessDateBuffer1, 11, "20%d-%02d-%02d", calibration_result[1], calibration_result[2],calibration_result[3]);
		tightnessDate.setWildcard1(tightnessDateBuffer1);
		tightnessDate.resizeToCurrentText();
		tightnessDate.invalidate();
		Unicode::snprintf(tightnessDateBuffer2, 6, "%02d:%02d", calibration_result[4], calibration_result[5]);
		tightnessDate.setWildcard2(tightnessDateBuffer2);
		tightnessDate.resizeToCurrentText();
		tightnessDate.invalidate();
		
	}

	if(calibration_result[6] == 0xFF)
	{
		flowSensor_CheckImage.setVisible(false);
		flowSensor_CheckImage.invalidate();
		flowSensor_CrossImage.setVisible(false);
		flowSensor_CrossImage.invalidate();
	}
	else
	{
		if (calibration_result[6] == 1)
		{
			flowSensor_CheckImage.setVisible(true);
			flowSensor_CheckImage.invalidate();
			flowSensor_CrossImage.setVisible(false);
			flowSensor_CrossImage.invalidate();
		}
		else
		{
			flowSensor_CheckImage.setVisible(false);
			flowSensor_CheckImage.invalidate();
			flowSensor_CrossImage.setVisible(true);
			flowSensor_CrossImage.invalidate();
		}
		Unicode::snprintf(FlowSensorDateBuffer1, 11, "20%d-%02d-%02d", calibration_result[7], calibration_result[8],calibration_result[9]);
		FlowSensorDate.setWildcard1(FlowSensorDateBuffer1);
		FlowSensorDate.resizeToCurrentText();
		FlowSensorDate.invalidate();
		Unicode::snprintf(FlowSensorDateBuffer2, 6, "%02d:%02d", calibration_result[10], calibration_result[11]);
		FlowSensorDate.setWildcard2(FlowSensorDateBuffer2);
		FlowSensorDate.resizeToCurrentText();
		FlowSensorDate.invalidate();
		
	}

	if(calibration_result[12] == 0xFF)
	{
		O2Cell_CheckImage.setVisible(false);
		O2Cell_CheckImage.invalidate();
		O2Cell_CrossImage.setVisible(false);
		O2Cell_CrossImage.invalidate();
	}
	else
	{
		if (calibration_result[12] == 1)
		{
			O2Cell_CheckImage.setVisible(true);
			O2Cell_CheckImage.invalidate();
			O2Cell_CrossImage.setVisible(false);
			O2Cell_CrossImage.invalidate();
		}
		else
		{
			O2Cell_CheckImage.setVisible(false);
			O2Cell_CheckImage.invalidate();
			O2Cell_CrossImage.setVisible(true);
			O2Cell_CrossImage.invalidate();
		}
		Unicode::snprintf(O2CellDateBuffer1, 11, "20%d-%02d-%02d", calibration_result[13], calibration_result[14],calibration_result[15]);
		O2CellDate.setWildcard1(O2CellDateBuffer1);
		O2CellDate.resizeToCurrentText();
		O2CellDate.invalidate();
		Unicode::snprintf(O2CellDateBuffer2, 6, "%02d:%02d", calibration_result[16], calibration_result[17]);
		O2CellDate.setWildcard2(O2CellDateBuffer2);
		O2CellDate.resizeToCurrentText();
		O2CellDate.invalidate();
	}
	
	if(calibration_result[18] == 0xFF)
	{
		CO2Sensor_CheckImage.setVisible(false);
		CO2Sensor_CheckImage.invalidate();
		CO2Sensor_CrossImage.setVisible(false);
		CO2Sensor_CrossImage.invalidate();
	}
	else
	{
		if (calibration_result[18] == 1)
		{
			CO2Sensor_CheckImage.setVisible(true);
			CO2Sensor_CheckImage.invalidate();
			CO2Sensor_CrossImage.setVisible(false);
			CO2Sensor_CrossImage.invalidate();
		}
		else
		{
			CO2Sensor_CheckImage.setVisible(false);
			CO2Sensor_CheckImage.invalidate();
			CO2Sensor_CrossImage.setVisible(true);
			CO2Sensor_CrossImage.invalidate();
		}
		Unicode::snprintf(CO2SensorDateBuffer1, 11, "20%d-%02d-%02d", calibration_result[19], calibration_result[20],calibration_result[21]);
		CO2SensorDate.setWildcard1(CO2SensorDateBuffer1);
		CO2SensorDate.resizeToCurrentText();
		CO2SensorDate.invalidate();
		Unicode::snprintf(CO2SensorDateBuffer2, 6, "%02d:%02d", calibration_result[22], calibration_result[23]);
		CO2SensorDate.setWildcard2(CO2SensorDateBuffer2);
		CO2SensorDate.resizeToCurrentText();
		CO2SensorDate.invalidate();
	}
}
void screenView::setupScreen()
{
	load_calibrationData();
	setCalibrationData();
	
	screenViewBase::setupScreen();
	
	lastState = MAIN;
	
	updateDate();
	
	startAlarmPointer[0] = qspiAddr32 - 80*4096;
	startDataPointer[0] = qspiAddr20;
	
	
	load_data();

	load_trendAlarms();


	load_trendData_last4n();
	
	graphVPosx = graph_v.getX();	
	graphVPosy = graph_v.getY();
	graphLineVPosx = container_graphVLines.getX();
	graphLineVPosy = container_graphVLines.getY();
	graphPPosx = graph_p.getX();
	graphPPosy = graph_p.getY();
	graphLinePPosx = container_graphPLines.getX();
	graphLinePPosy = container_graphPLines.getY();
	graphFPosx = graph_flow.getX();
	graphFPosy = graph_flow.getY();
	graphLineFPosx = container_graphFLines.getX();
	graphLineFPosy = container_graphFLines.getY();
	
	
	// store 4 data trend texts
	dataTimeVector[0] = &dataList_time_1;
	dataTimeVector[1] = &dataList_time_2;
	dataTimeVector[2] = &dataList_time_3;
	dataTimeVector[3] = &dataList_time_4;
	memcpy(dataTime_buffers1[0], dataList_time_1Buffer1, sizeof(dataList_time_1Buffer1));
	memcpy(dataTime_buffers1[1], dataList_time_2Buffer1, sizeof(dataList_time_1Buffer1));
	memcpy(dataTime_buffers1[2], dataList_time_3Buffer1, sizeof(dataList_time_1Buffer1));
	memcpy(dataTime_buffers1[3], dataList_time_4Buffer1, sizeof(dataList_time_1Buffer1));
	memcpy(dataTime_buffers2[0], dataList_time_1Buffer2, sizeof(dataList_time_1Buffer2));
	memcpy(dataTime_buffers2[1], dataList_time_2Buffer2, sizeof(dataList_time_1Buffer2));
	memcpy(dataTime_buffers2[2], dataList_time_3Buffer2, sizeof(dataList_time_1Buffer2));
	memcpy(dataTime_buffers2[3], dataList_time_4Buffer2, sizeof(dataList_time_1Buffer2));
	
	dataModeVector[0] = &dataList_mode_1;
	dataModeVector[1] = &dataList_mode_2;
	dataModeVector[2] = &dataList_mode_3;
	dataModeVector[3] = &dataList_mode_4;
	memcpy(dataMode_buffers[0], dataList_mode_1Buffer, sizeof(dataList_mode_1Buffer));
	memcpy(dataMode_buffers[1], dataList_mode_2Buffer, sizeof(dataList_mode_1Buffer));
	memcpy(dataMode_buffers[2], dataList_mode_3Buffer, sizeof(dataList_mode_1Buffer));
	memcpy(dataMode_buffers[3], dataList_mode_4Buffer, sizeof(dataList_mode_1Buffer));
	
	// store 10 alarm trend texts
	alarmsIndexesVector[0] = &alarmList_index_1;
	alarmsIndexesVector[1] = &alarmList_index_2;
	alarmsIndexesVector[2] = &alarmList_index_3;
	alarmsIndexesVector[3] = &alarmList_index_4;
	alarmsIndexesVector[4] = &alarmList_index_5;
	alarmsIndexesVector[5] = &alarmList_index_6;
	alarmsIndexesVector[6] = &alarmList_index_7;
	alarmsIndexesVector[7] = &alarmList_index_8;
	alarmsIndexesVector[8] = &alarmList_index_9;
	alarmsIndexesVector[9] = &alarmList_index_10;
	
	alarmsTimeVector[0] = &alarmListTime_1;
	alarmsTimeVector[1] = &alarmListTime_2;
	alarmsTimeVector[2] = &alarmListTime_3;
	alarmsTimeVector[3] = &alarmListTime_4;
	alarmsTimeVector[4] = &alarmListTime_5;
	alarmsTimeVector[5] = &alarmListTime_6;
	alarmsTimeVector[6] = &alarmListTime_7;
	alarmsTimeVector[7] = &alarmListTime_8;
	alarmsTimeVector[8] = &alarmListTime_9;
	alarmsTimeVector[9] = &alarmListTime_10;
	
	memcpy(alarmsTime_buffers1[0], alarmListTime_1Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[1], alarmListTime_2Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[2], alarmListTime_3Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[3], alarmListTime_4Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[4], alarmListTime_5Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[5], alarmListTime_6Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[6], alarmListTime_7Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[7], alarmListTime_8Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[8], alarmListTime_9Buffer1, sizeof(alarmListTime_1Buffer1));
	memcpy(alarmsTime_buffers1[9], alarmListTime_10Buffer1, sizeof(alarmListTime_1Buffer1));
	
	memcpy(alarmsTime_buffers2[0], alarmListTime_1Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[1], alarmListTime_2Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[2], alarmListTime_3Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[3], alarmListTime_4Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[4], alarmListTime_5Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[5], alarmListTime_6Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[6], alarmListTime_7Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[7], alarmListTime_8Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[8], alarmListTime_9Buffer2, sizeof(alarmListTime_1Buffer2));
	memcpy(alarmsTime_buffers2[9], alarmListTime_10Buffer2, sizeof(alarmListTime_1Buffer2));
	
	alarmsContentVector[0] = &alarmListContent_1;
	alarmsContentVector[1] = &alarmListContent_2;
	alarmsContentVector[2] = &alarmListContent_3;
	alarmsContentVector[3] = &alarmListContent_4;
	alarmsContentVector[4] = &alarmListContent_5;
	alarmsContentVector[5] = &alarmListContent_6;
	alarmsContentVector[6] = &alarmListContent_7;
	alarmsContentVector[7] = &alarmListContent_8;
	alarmsContentVector[8] = &alarmListContent_9;
	alarmsContentVector[9] = &alarmListContent_10;
	
	memcpy(alarmsContent_buffers[0], alarmListContent_1Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[1], alarmListContent_2Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[2], alarmListContent_3Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[3], alarmListContent_4Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[4], alarmListContent_5Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[5], alarmListContent_6Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[6], alarmListContent_7Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[7], alarmListContent_8Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[8], alarmListContent_9Buffer, sizeof(alarmListContent_10Buffer));
	memcpy(alarmsContent_buffers[9], alarmListContent_10Buffer, sizeof(alarmListContent_10Buffer));
	
	//------------------

	sens_intval = sens_tmp_intval = 2;
	backup_Ti_intval = Ti_intval = Ti_tmp_intval = (60/12/3);
	backup_riseTime_intval = riseTime_intval = riseTime_tmp_intval = 200;
	cyclingOff_intval = cyclingOff_tmp_intval = 40;
	TiInspPause_intval = TiInspPause_tmp_intval = 0.2;
	backup_flowShape_intval = flowShape_tmp_intval = flowShape_intval = 100;
	Psupp_intval = Psupp_tmp_intval = 15;
	PSMax_intval = 20;
	weight_tmp_intval = weight_intval = 60;
	backup_PEEP_intval = EPAP_intval = CPAP_intval = PEEP_tmp_intval = PEEP_intval = 5;
	backup_PControl_intval = IPAP_intval = PControl_tmp_intval = PControl_intval = 20;
	IPAPMax_intval =PControlMax_intval = 25;
	backup_RR_intval = RR_tmp_intval = RR_intval = 12;
	backup_VT_intval = VT_tmp_intval = VT_intval = 400;
	IE_intval = 4;
	safetyVT_intval = SafetyVT_tmp_intval = 4;
	FiO2_tmp_intval = FiO2_intval = 21;
	Ti_max_intval = 3;
	Ti_min_intval = 1;

	Unicode::snprintf(weight_valBuffer, WEIGHT_VAL_SIZE, "%d", (int)weight_tmp_intval);
	weight_val.setWildcard1(weight_valBuffer);
	weight_val.invalidate();
	Unicode::snprintf(weight_bigValBuffer, WEIGHT_BIGVAL_SIZE, "%d", (int)weight_tmp_intval);
	weight_bigVal.setWildcard1(weight_bigValBuffer);
	weight_bigVal.invalidate();

	Unicode::snprintf(PEEP_valBuffer, PEEP_VAL_SIZE, "%d", (int)PEEP_intval);
	PEEP_val.setWildcard1(PEEP_valBuffer);
	PEEP_val.invalidate();
	Unicode::snprintf(PEEP_val_ventSettingBuffer, PEEP_VAL_VENTSETTING_SIZE, "%d", (int)PEEP_intval);
	PEEP_val_ventSetting.setWildcard1(PEEP_val_ventSettingBuffer);
	PEEP_val_ventSetting.invalidate();
	Unicode::snprintf(PEEP_val_backupScreenBuffer, PEEP_VAL_BACKUPSCREEN_SIZE, "%d", (int)PEEP_intval);
	PEEP_val_backupScreen.setWildcard1(PEEP_val_backupScreenBuffer);
	PEEP_val_backupScreen.invalidate();
	
	Unicode::snprintf(PControl_valBuffer, PCONTROL_VAL_SIZE, "%d", (int)PControl_intval);
	PControl_val.setWildcard1(PControl_valBuffer);
	PControl_val.invalidate();
	Unicode::snprintf(PControl_val_ventSettingBuffer, PCONTROL_VAL_VENTSETTING_SIZE, "%d", (int)PControl_intval);
	PControl_val_ventSetting.setWildcard1(PControl_val_ventSettingBuffer);
	PControl_val_ventSetting.invalidate();
	Unicode::snprintf(PControlMax_val_ventSettingBuffer, PCONTROLMAX_VAL_VENTSETTING_SIZE, "%d", (int)PControlMax_intval);
	PControlMax_val_ventSetting.setWildcard1(PControlMax_val_ventSettingBuffer);
	PControlMax_val_ventSetting.invalidate();
	Unicode::snprintf(CPAP_val_ventSettingBuffer, CPAP_VAL_VENTSETTING_SIZE, "%d", (int)CPAP_intval);
	CPAP_val_ventSetting.setWildcard1(CPAP_val_ventSettingBuffer);
	CPAP_val_ventSetting.invalidate();
	Unicode::snprintf(CPAP_valBuffer, CPAP_VAL_SIZE, "%d", (int)CPAP_intval);
	CPAP_val.setWildcard1(CPAP_valBuffer);
	CPAP_val.invalidate();
	Unicode::snprintf(IPAPMax_val_ventSettingBuffer, IPAPMAX_VAL_VENTSETTING_SIZE, "%d", (int)IPAPMax_intval);
	IPAPMax_val_ventSetting.setWildcard1(IPAPMax_val_ventSettingBuffer);
	IPAPMax_val_ventSetting.invalidate();
	Unicode::snprintf(IPAP_val_ventSettingBuffer, IPAP_VAL_VENTSETTING_SIZE, "%d", (int)IPAP_intval);
	IPAP_val_ventSetting.setWildcard1(IPAP_val_ventSettingBuffer);
	IPAP_val_ventSetting.invalidate();
	Unicode::snprintf(EPAP_val_ventSettingBuffer, EPAP_VAL_VENTSETTING_SIZE, "%d", (int)EPAP_intval);
	EPAP_val_ventSetting.setWildcard1(EPAP_val_ventSettingBuffer);
	EPAP_val_ventSetting.invalidate();
	Unicode::snprintf(PControl_val_backupScreenBuffer, PCONTROL_VAL_BACKUPSCREEN_SIZE, "%d", (int)PControl_intval);
	PControl_val_backupScreen.setWildcard1(PControl_val_backupScreenBuffer);
	PControl_val_backupScreen.invalidate();
	
	Unicode::snprintf(RR_valBuffer, RR_VAL_SIZE, "%d", (int)RR_intval);
	RR_val.setWildcard1(RR_valBuffer);
	RR_val.invalidate();
	Unicode::snprintf(RR_val_ventSettingBuffer, RR_VAL_VENTSETTING_SIZE, "%d", (int)RR_intval);
	RR_val_ventSetting.setWildcard1(RR_val_ventSettingBuffer);
	RR_val_ventSetting.invalidate();
	Unicode::snprintf(RR_val_backupScreenBuffer, RR_VAL_BACKUPSCREEN_SIZE, "%d", (int)RR_intval);
	RR_val_backupScreen.setWildcard1(RR_val_backupScreenBuffer);
	RR_val_backupScreen.invalidate();
	
	Unicode::snprintf(VT_valBuffer, VT_VAL_SIZE, "%d", (int)VT_intval);
	VT_val.setWildcard1(VT_valBuffer);
	VT_val.invalidate();
	Unicode::snprintf(VT_val_ventSettingBuffer, VT_VAL_VENTSETTING_SIZE, "%d", (int)VT_intval);
	VT_val_ventSetting.setWildcard1(VT_val_ventSettingBuffer);
	VT_val_ventSetting.invalidate();
	Unicode::snprintf(VT_val_backupScreenBuffer, VT_VAL_BACKUPSCREEN_SIZE, "%d", (int)VT_intval);
	VT_val_backupScreen.setWildcard1(VT_val_backupScreenBuffer);
	VT_val_backupScreen.invalidate();
	
	Unicode::snprintf(IE_valBuffer, IE_VAL_SIZE, "%d", (int)IE_intval);
	IE_val.setWildcard1(IE_valBuffer);
	IE_val.invalidate();
	
	Unicode::snprintf(FiO2_valBuffer, FIO2_VAL_SIZE, "%d", (int)FiO2_intval);
	FiO2_val.setWildcard1(FiO2_valBuffer);
	FiO2_val.setColor(Color::getColorFromRGB(82, 82, 82)); //grey
	FiO2_val.invalidate();
	Unicode::snprintf(FiO2_val_ventSettingBuffer, FIO2_VAL_VENTSETTING_SIZE, "%d", (int)FiO2_intval);
	FiO2_val_ventSetting.setWildcard1(FiO2_val_ventSettingBuffer);
	FiO2_val_ventSetting.setColor(Color::getColorFromRGB(82, 82, 82)); //grey
	FiO2_val_ventSetting.invalidate();

	Unicode::snprintf(PS_valBuffer, PS_VAL_SIZE, "%d", (int)Psupp_intval);
	PS_val.setWildcard1(PS_valBuffer);
	PS_val.invalidate();
	Unicode::snprintf(PS_val_ventSettingBuffer, PS_VAL_VENTSETTING_SIZE, "%d", (int)Psupp_intval);
	PS_val_ventSetting.setWildcard1(PS_val_ventSettingBuffer);
	PS_val_ventSetting.invalidate();
	Unicode::snprintf(PSMax_val_ventSettingBuffer, PSMAX_VAL_VENTSETTING_SIZE, "%d", (int)PSMax_intval);
	PSMax_val_ventSetting.setWildcard1(PSMax_val_ventSettingBuffer);
	PSMax_val_ventSetting.invalidate();
	
	Unicode::snprintf(FlowShape_val_ventSettingBuffer, FLOWSHAPE_VAL_VENTSETTING_SIZE, "%d", (int)flowShape_intval);
	FlowShape_val_ventSetting.setWildcard1(FlowShape_val_ventSettingBuffer);
	FlowShape_val_ventSetting.invalidate();
	Unicode::snprintf(FlowShape_val_backupScreenBuffer, FLOWSHAPE_VAL_BACKUPSCREEN_SIZE, "%d", (int)flowShape_intval);
	FlowShape_val_backupScreen.setWildcard1(FlowShape_val_backupScreenBuffer);
	FlowShape_val_backupScreen.invalidate();
	
	Unicode::snprintf(cyclingOff_valBuffer, CYCLINGOFF_VAL_SIZE, "%d", (int)cyclingOff_intval);
	cyclingOff_val.setWildcard1(cyclingOff_valBuffer);
	cyclingOff_val.invalidate();
	Unicode::snprintf(cyclingOff_val_ventSettingBuffer, CYCLINGOFF_VAL_VENTSETTING_SIZE, "%d", (int)cyclingOff_intval);
	cyclingOff_val_ventSetting.setWildcard1(cyclingOff_val_ventSettingBuffer);
	cyclingOff_val_ventSetting.invalidate();
	
	
	Unicode::snprintfFloat(TiMax_val_ventSettingBuffer, TIMAX_VAL_VENTSETTING_SIZE, "%.1f", Ti_max_intval);
	TiMax_val_ventSetting.setWildcard1(TiMax_val_ventSettingBuffer);
	TiMax_val_ventSetting.invalidate();
	Unicode::snprintfFloat(TiMin_val_ventSettingBuffer, TIMIN_VAL_VENTSETTING_SIZE, "%.1f", Ti_min_intval);
	TiMin_val_ventSetting.setWildcard1(TiMin_val_ventSettingBuffer);
	TiMin_val_ventSetting.invalidate();
	
	Unicode::snprintf(Ti_val_ventSettingBuffer, TI_VAL_VENTSETTING_SIZE, "%d", Ti_intval);
	Ti_val_ventSetting.setWildcard1(Ti_val_ventSettingBuffer);
	Ti_val_ventSetting.invalidate();
	Unicode::snprintf(Ti_val_backupScreenBuffer, TI_VAL_BACKUPSCREEN_SIZE, "%d", (int)Ti_intval);
	Ti_val_backupScreen.setWildcard1(Ti_val_backupScreenBuffer);
	Ti_val_backupScreen.invalidate();
	
	Unicode::snprintf(riseTime_valBuffer, RISETIME_VAL_SIZE, "%d", (int)riseTime_tmp_intval);
	riseTime_val.setWildcard1(riseTime_valBuffer);
	riseTime_val.invalidate();
	Unicode::snprintf(riseTime_val_ventSettingBuffer, RISETIME_VAL_VENTSETTING_SIZE, "%d", (int)riseTime_intval);
	riseTime_val_ventSetting.setWildcard1(riseTime_val_ventSettingBuffer);
	riseTime_val_ventSetting.invalidate();
	Unicode::snprintf(riseTime_val_backupScreenBuffer, RISETIME_VAL_BACKUPSCREEN_SIZE, "%d", (int)riseTime_intval);
	riseTime_val_backupScreen.setWildcard1(riseTime_val_backupScreenBuffer);
	riseTime_val_backupScreen.invalidate();
		
	Unicode::snprintf(SafetyVT_val_ventSettingBuffer, SAFETYVT_VAL_VENTSETTING_SIZE, "%d", (int)safetyVT_intval);
	SafetyVT_val_ventSetting.setWildcard1(SafetyVT_val_ventSettingBuffer);
	SafetyVT_val_ventSetting.invalidate();
	
	// ---------------- alarms ---------------- 
	Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
	RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
	RR_alarm_max.invalidate();
	Unicode::snprintf(RR_alarm_realBuffer, RR_ALARM_REAL_SIZE, "%d", (int)RR_real);
	RR_alarm_real.setWildcard1(RR_alarm_realBuffer);
	RR_alarm_real.invalidate();
	Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
	RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
	RR_alarm_min.invalidate();
	Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
	pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
	pressure_alarm_max.invalidate();
	Unicode::snprintf(pressure_alarm_realBuffer, PRESSURE_ALARM_REAL_SIZE, "%d", (int)pressure_real);
	pressure_alarm_real.setWildcard1(pressure_alarm_realBuffer);
	pressure_alarm_real.invalidate();
	Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
	pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
	pressure_alarm_min.invalidate();
	Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
	vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
	vti_alarm_max.invalidate();
	Unicode::snprintf(vti_alarm_realBuffer, VTI_ALARM_REAL_SIZE, "%d", (int)VTi_real);
	vti_alarm_real.setWildcard1(vti_alarm_realBuffer);
	vti_alarm_real.invalidate();
	Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
	vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
	vti_alarm_min.invalidate();
	Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
	vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
	vte_alarm_max.invalidate();
	Unicode::snprintf(vte_alarm_realBuffer, VTE_ALARM_REAL_SIZE, "%d", (int)VTe_real);
	vte_alarm_real.setWildcard1(vte_alarm_realBuffer);
	vte_alarm_real.invalidate();
	Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
	vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
	vte_alarm_min.invalidate();
	Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_BIG_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
	MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
	MVi_alarm_max.invalidate();
	Unicode::snprintf(MVi_alarm_realBuffer, MVI_ALARM_REAL_SIZE, "%d", (int)MVi_real);
	MVi_alarm_real.setWildcard1(MVi_alarm_realBuffer);
	MVi_alarm_real.invalidate();
	Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_BIG_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
	MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
	MVi_alarm_min.invalidate();
	Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_BIG_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
	MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
	MVe_alarm_max.invalidate();
	Unicode::snprintf(MVe_alarm_realBuffer, MVE_ALARM_REAL_SIZE, "%d", (int)MVe_real);
	MVe_alarm_real.setWildcard1(MVe_alarm_realBuffer);
	MVe_alarm_real.invalidate();
	Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_BIG_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
	MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
	MVe_alarm_min.invalidate();
	
	Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
	Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
	Leak_alarm_max.resizeToCurrentText();
	Leak_alarm_max.invalidate();
	Unicode::snprintf(Leak_alarm_big_maxBuffer, LEAK_ALARM_BIG_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
	Leak_alarm_big_max.setWildcard1(Leak_alarm_big_maxBuffer);
	Leak_alarm_big_max.resizeToCurrentText();
	Leak_alarm_big_max.invalidate();
	Unicode::snprintf(Leak_alarm_realBuffer, LEAK_ALARM_REAL_SIZE, "%d", (int)leak_real);
	Leak_alarm_real.setWildcard1(Leak_alarm_realBuffer);
	Leak_alarm_real.invalidate();
	Unicode::snprintf(pulseRate_alarm_maxBuffer, PULSERATE_ALARM_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
	pulseRate_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
	pulseRate_alarm_max.invalidate();
	Unicode::snprintf(pulseRate_alarm_minBuffer, PULSERATE_ALARM_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
	pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
	pulseRate_alarm_min.invalidate();
	Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
	FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
	FiO2_alarm_maxVal.resizeToCurrentText();
	FiO2_alarm_maxVal.invalidate();
	Unicode::snprintf(FiO2_alarm_realBuffer, FIO2_ALARM_REAL_SIZE, "%d", (int)FiO2_real);
	FiO2_alarm_real.setWildcard1(FiO2_alarm_realBuffer);
	FiO2_alarm_real.invalidate();
	Unicode::snprintf(FiO2_alarm_big_maxValBuffer, FIO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
	FiO2_alarm_big_maxVal.setWildcard1(FiO2_alarm_big_maxValBuffer);
	FiO2_alarm_big_maxVal.resizeToCurrentText();
	FiO2_alarm_big_maxVal.invalidate();
	Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
	SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
	SPO2_alarm_maxVal.resizeToCurrentText();
	SPO2_alarm_maxVal.invalidate();
	Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
	SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
	SPO2_alarm_minVal.resizeToCurrentText();
	SPO2_alarm_minVal.invalidate();
	Unicode::snprintf(SPO2_alarm_realBuffer, SPO2_ALARM_REAL_SIZE, "%d", (int)SPO2_real);
	SPO2_alarm_real.setWildcard1(SPO2_alarm_realBuffer);
	SPO2_alarm_real.invalidate();
	
	
	toggleButton_apnea.forceState(false);
	toggleButton_apnea.invalidate();
	
	Unicode::snprintf(CircuitDis_alarmBuffer, CIRCUITDIS_ALARM_SIZE, "%d", (int)circuitDis_intval);
	CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
	CircuitDis_alarm.invalidate();
		
	Unicode::snprintf(apneaTime_backupModeValBuffer, APNEATIME_BACKUPMODEVAL_SIZE, "%d", (int)apnea_backupIntval);
	apneaTime_backupModeVal.setWildcard1(apneaTime_backupModeValBuffer);
	apneaTime_backupModeVal.invalidate();
	Unicode::snprintf(apneaTime_backupModeBigValBuffer, APNEATIME_BACKUPMODEBIGVAL_SIZE, "%d", (int)apnea_backupIntval);
	apneaTime_backupModeBigVal.setWildcard1(apneaTime_backupModeBigValBuffer);
	apneaTime_backupModeBigVal.invalidate();
	
	
	
	mode_int = 1;

	updateConfigsWildCards();

	for (int i = 0; i < settingPosy2+4; i++)
	{
		graph_flow.addDataPoint(0);
		graph_p.addDataPoint(0);
		graph_v.addDataPoint(0);
	}
	graph_flow.setVisible(false);
	graph_flow.invalidate();
	graph_p.setVisible(false);
	graph_p.invalidate();
	graph_v.setVisible(false);
	graph_v.invalidate();
	container_graphFLines.setVisible(false);
	container_graphFLines.invalidate();
	container_graphPLines.setVisible(false);
	container_graphPLines.invalidate();
	container_graphVLines.setVisible(false);
	container_graphVLines.invalidate();
	
//	txt_mute.setVisible(false);
//	txt_mute.invalidate();
	
	pressureProgress.setValue(pressure_real);//peep_real);
	pressureProgress.invalidate();

	// check date
	if (RTC_Date.Year == 0)
	{
		RTC_Date.WeekDay = RTC_WEEKDAY_SUNDAY;
		RTC_Date.Month = RTC_MONTH_JANUARY;
		RTC_Date.Date = 1;
		RTC_Date.Year = 23;

		if (HAL_RTC_SetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN) != HAL_OK)
		{
			Error_Handler();
		}
	}
	
}

void screenView::tearDownScreen()
{
	screenViewBase::tearDownScreen();
}

void screenView::handleTickEvent()
{
	tickCounter++; // 60 times per second
	
	// handle fio2 TODO:remove
	if(isFiO2Fake_alarm && abs(FiO2_intval-FiO2_real) > 0.2 && tickCounter % 150 == 0)
	{
		float f = FiO2_intval;
		if(f>50.7) f = 50.7;
		if(f > FiO2_real+7.5)
			FiO2_real+=0.38;
		else if(f > FiO2_real+4)
			FiO2_real+=0.27;
		else if(f > FiO2_real+1.5)
			FiO2_real+=0.18;
		else if(f < FiO2_real-1.5)
			FiO2_real-=0.18;
		else if(f < FiO2_real-4)
			FiO2_real-=0.27;
		else if(f < FiO2_real-7.5)
			FiO2_real-=0.38;
	}
	// -----------
	
	// check manual breath
	if(manualBreath_intval > 0)
	{
		sendConfig();
	}
	
	// get transmit real data from Main Board
	if (tickCounter % 2 == 0 && !isConfigTransferd)
	{
		if((check_data == old_check_data) && (fault_recieve == 0))
		{
			 fault_recieve = 1;
		}
		else
		{
	     HAL_SPI_Transmit(&hspi2,tx_data,700,10);
		}
		old_check_data = check_data;
	}
		
	if (flag_startVent == 1) // start button clicked and disappear
	{
		// every 5 min save trend data
		if(tickCounter%18000==0 && trendDataCounter==0) 
		{
			isStartTrending = true;
			HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
			HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
			trend_data[0] = mode_int;
			trend_data[1] = RTC_Time.Hours; 
			trend_data[2] = RTC_Time.Minutes; 
			trend_data[3] = RTC_Date.Year;
			trend_data[4] = RTC_Date.Month;
			trend_data[5] = RTC_Date.Date;
			trendDataCounter=6;
		}
		if(isStartTrending && tickCounter%6 == 0) // 10Hz
		{
			int v = VT_real;
			if(v<0) v=0;
			else if(v>2000) v=2000;
			memcpy(trend_data + trendDataCounter, &v, sizeof(int));
			trendDataCounter += 2;
			float f = flow_real;
			if(f<-150) f = -150;
			else if(f>150) f = 150;
			memcpy(trend_data + trendDataCounter, &f, sizeof(float));
			trendDataCounter += 4;
			float p = pressure_real;
			if(p<0) p = 0;
			else if(p>80) p = 80;
			memcpy(trend_data + trendDataCounter, &p, sizeof(float));
			trendDataCounter += 4;
			if(trendDataCounter >= 2006)
			{
				isStartTrending = false;
				trendDataCounter = 0;
				//while(!isMemoryFree)
				//{;}
				
				save_trendData();
				
				load_trendData_last4n(); // load again to update the newest 10 data trends
			} 
				
		}
		// --------------
		
		if(start_counter < 3600) start_counter++;
		if(tickCounter%2==0 && state==MAIN)
		{
			if(graph_v.isVisible())
			{
				if(VT_real > 2000)
					graph_v.addDataPoint(2000);
				else if(VT_real < 0)
					graph_v.addDataPoint(0);
				else
					graph_v.addDataPoint(VT_real);//VT_real
			}
			if(graph_flow.isVisible())
			{
				if(flow_real> 150)
					graph_flow.addDataPoint(150);
				else if(flow_real < -150)
					graph_flow.addDataPoint(-150);
				else
					graph_flow.addDataPoint(flow_real);//flow
			}
			
			if(graph_p.isVisible())
			{
				if(pressure_real > 80)
					graph_p.addDataPoint(80);
				else if(pressure_real < 0)
					graph_p.addDataPoint(0);
				else
				{
					graphPIndex = graph_p.addDataPoint(pressure_real); //pressure
					if(SpontTrig_real==1)
					{
						SpontTrig_real=0;
						image_trigEvent.setVisible(false);
						image_trigEvent.invalidate();
						image_trigEvent.setX(graphPIndex+58);
						image_trigEvent.setVisible(true);
						image_trigEvent.invalidate();
					}
					
					if(graphPIndex == 0)
					{
						image_trigEvent.setVisible(false);
						image_trigEvent.invalidate();
					}
				}
			}
				
				
				//----- Auto Scale -----
				if(tickCounter%480==0 && isAutoScale)
				{
					//volume
					if(VTi_real+10<=250) graph_v.setGraphRangeY(0, 250);
					else if(VTi_real+10<=500) graph_v.setGraphRangeY(0, 500);
					else if(VTi_real+10<=750) graph_v.setGraphRangeY(0, 750);
					else if(VTi_real+10<=1000) graph_v.setGraphRangeY(0, 1000);
					else if(VTi_real+10<=1250) graph_v.setGraphRangeY(0, 1250);
					else if(VTi_real+10<=1500) graph_v.setGraphRangeY(0, 1500);
					else if(VTi_real+10<=1750) graph_v.setGraphRangeY(0, 1750);
					else graph_v.setGraphRangeY(0, 2000);
					//flow
					if(PIF_real+5<=25 && PEF_real+5 <= 25) graph_flow.setGraphRangeY(-25, 25);
					else if(PIF_real+5<=50 && PEF_real+5 <= 50) graph_flow.setGraphRangeY(-50, 50);
					else if(PIF_real+5<=75 && PEF_real+5 <= 75) graph_flow.setGraphRangeY(-75, 75);
					else if(PIF_real+5<=100 && PEF_real+5 <= 100) graph_flow.setGraphRangeY(-100, 100);
					else if(PIF_real+5<=125 && PEF_real+5 <= 125) graph_flow.setGraphRangeY(-125, 125);
					else graph_flow.setGraphRangeY(-150, 150);
					//pressure
					if(pip_real+5<=15) graph_p.setGraphRangeY(0, 15);
					else if(pip_real+5<=30) graph_p.setGraphRangeY(0, 30);
					else if(pip_real+5<=45) graph_p.setGraphRangeY(0, 45);
					else if(pip_real+5<=60) graph_p.setGraphRangeY(0, 60);
					else graph_p.setGraphRangeY(0, 75);
					
				}
				
				if (monitorState != 3)
				{
					pressureProgress.setValue(pressure_real);
					if(tickCounter%30==0)
					{
						if(tickCounter%120==0)
						{
							container_pressureMonitor.setVisible(true);
							container_pressureMonitor.invalidate();
						}
						PIP_line.setVisible(false);
						PIP_line.invalidate();
						PIP_line.setY(399.5 - (pip_real * 5.33));	// default is y=400 => 0 in P_progress
						PIP_line.invalidate();
						PIP_line.setVisible(true);
						PIP_line.invalidate();
						
						PEEP_line.setVisible(false);
						PEEP_line.invalidate();
						PEEP_line.setY(400 - (peep_real * 5.33)); // default is y=400 => 0 in P_progress
						PEEP_line.invalidate();
						PEEP_line.setVisible(true);
						PEEP_line.invalidate();
						
						PEEP_lineVal.setY(400 - (peep_real * 5.33)+5); 
						Unicode::snprintfFloat(PEEP_lineValBuffer, PEEP_LINEVAL_SIZE, "%.1f", peep_real);
						PEEP_lineVal.setWildcard1(PEEP_lineValBuffer);
						PEEP_lineVal.invalidate();
						PIP_lineVal.setY(339 - (pip_real * 5.33)-5);
						Unicode::snprintfFloat(PIP_lineValBuffer, PIP_LINEVAL_SIZE, "%.1f", pip_real);
						PIP_lineVal.setWildcard1(PIP_lineValBuffer);
						PIP_lineVal.invalidate();
					}
				}
		}
		
	}
	
	//counter every 1s
	if(tickCounter%60==0)
	{
		// check lock & CPR
		if(isLockChanged==1)
		{
			isLockChanged=0;
			if(image_unlock_bar.isVisible())
				lastButton = UNLOCK_BUTTON;
			else 
				lastButton = LOCK_BUTTON;
			showAlert();
		}
		else if(isCPRChanged==1)
		{
			isCPRChanged=0;
			lastButton = CPR_BUTTON;
			showAlert();
		}
		
		// set bar values
		Unicode::snprintf(RR_barBuffer, RR_BAR_SIZE, "%d", (int)RR_real);
		RR_bar.setWildcard1(RR_barBuffer);
		RR_bar.invalidate();
		Unicode::snprintfFloat(PEEP_barBuffer, PEEP_BAR_SIZE, "%.1f", peep_real);
		PEEP_bar.setWildcard1(PEEP_barBuffer);
		PEEP_bar.invalidate();
		Unicode::snprintfFloat(PIP_barBuffer, PIP_BAR_SIZE, "%.1f", pip_real);
		PIP_bar.setWildcard1(PIP_barBuffer);
		PIP_bar.invalidate();
		Unicode::snprintf(VTi_barBuffer, VTI_BAR_SIZE, "%d", (int)VTi_real);
		VTi_bar.setWildcard1(VTi_barBuffer);
		VTi_bar.resizeToCurrentTextWithAlignment();
		VTi_bar.invalidate();
		Unicode::snprintf(VTe_barBuffer, VTE_BAR_SIZE, "%d", (int)VTe_real);
		VTe_bar.setWildcard1(VTe_barBuffer);
		VTe_bar.resizeToCurrentTextWithAlignment();
		VTe_bar.invalidate();
		Unicode::snprintfFloat(Ti_barBuffer, TI_BAR_SIZE, "%.1f", Ti_real);
		Ti_bar.setWildcard1(Ti_barBuffer);
		Ti_bar.invalidate();
		Unicode::snprintf(FiO2_barBuffer, FIO2_BAR_SIZE, "%d", (int)FiO2_real);
		FiO2_bar.setWildcard1(FiO2_barBuffer);
		FiO2_bar.invalidate();
		Unicode::snprintf(Flow_barBuffer, FLOW_BAR_SIZE, "%d", (int)flow_real);
		Flow_bar.setWildcard1(Flow_barBuffer);
		Flow_bar.invalidate();
		//-----------------
		
		//minuse alarm mute 
		if(alarmMute_counter - 1 >= 0)
		{ 
			Unicode::snprintf(mute_valBuffer, MUTE_VAL_SIZE, "%d", alarmMute_counter);
			mute_val.setWildcard1(mute_valBuffer);
			mute_val.invalidate();
			
			alarmMute_counter--;
			if(alarmMute_counter==0)
			{
				silent_intval = 0;
			}
		}
	}
	
	//(show Loading Image)
	if (isLoading)
	{
		if(!loading_img.isVisible())
		{
			loading_img.setVisible(true);
			loading_img.invalidate();	
		}		
		if (loading_img.isVisible() && tickCounter % 60 == 0)
		{
			loading_img.setVisible(false);
			loading_img.invalidate();
			isLoading = false;
		}
	}

	
	
	// (show Alarm)
	handleAlarmShowing();
	
	//	handle Silent
	handleSilent();
	
	// (checking battery)
	if (tickCounter % 120 == 0) // 2s
	{
		batteryProgress.setValue(bat_real);
		
		
		if(bat_real<25 && externalDC_real==0)
		{
			batteryProgress.setColor(Color::getColorFromRGB(255, 0, 0)); // red
			batteryProgress.invalidate();
		}
		else 
		{
			batteryProgress.setColor(Color::getColorFromRGB(0, 255, 0)); // green
			batteryProgress.invalidate();
		}
		
		if(externalDC_real==1)
		{
			if(!charging_image.isVisible())
			{
				charging_image.setVisible(true);
				charging_image.invalidate();
			}
		}
		else if(externalDC_real==0)
		{
			if(charging_image.isVisible())
			{
				charging_image.setVisible(false);
				charging_image.invalidate();
			}
		}
	}

	
	// (update date) every 1 second
	if (tickCounter % 60 == 0 && state != HOURS && state != MINUTES && state != DAY && state != MONTH && state != YEAR)
		updateDate();

	if (tickCounter % 3600 == 0) // () every 1 minutes 3600ms
	{
		vent_minutes[0]++;

		if (vent_minutes[0] == 60)
		{
			vent_hours[0]++;
			Unicode::snprintf(ventHours_valBuffer, VENTHOURS_VAL_SIZE, "%d", (int)vent_hours[0]);
			ventHours_val.setWildcard1(ventHours_valBuffer);
			ventHours_val.invalidate();
			W25Q256FV_QSPI_DeInit(&hqspi);
			W25Q256FV_QSPI_Init(&hqspi);
			save_ventMinutes();
			vent_minutes[0] = 0;
			if (vent_hours[0] % 136 == 0) // end of the specefic Sectors
			{
				vent_lastHours[0] += vent_hours[0];
				W25Q256FV_QSPI_EraseSector(&hqspi, qspiAddr32 - 3 * 4096, qspiAddr32 - 4096);
				W25Q256FV_QSPI_Write(&hqspi, (uint8_t *)vent_lastHours, qspiAddr32 - 4096 - 2, sizeof(vent_lastHours));
				pointerVentHours = qspiAddr32 - 3 * 4 * 1024;
			}
			W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi);
		}
		else
		{
			W25Q256FV_QSPI_DeInit(&hqspi);
			W25Q256FV_QSPI_Init(&hqspi);
			save_ventMinutes();
			W25Q256FV_QSPI_EnableMemoryMappedMode(&hqspi);
		}
		
	}

	if (state == MAIN)
		handleMainScreen();
	else if (state == INIT_AGE)
		handleInitAgeScreen();
	else if (state == INIT_CIRCUIT)
		handleInitCircuitScreen();
	else if (state == TESTCALIBRATION)
		handleInitTestCalibrationScreen();
	else if (state == TIGHTNESS)
		handleTightnessScreen();
	else if (state == TIGHTNESS_TEST)
		handleTightnessTestScreen();
	else if (state == FLOWSENSOR)
		handleFlowSensorScreen();
	else if (state == FLOWSENSOR_BACKWARDTEST)
		handleFlowSensor_backwardTestScreen();
	else if (state == FLOWSENSOR_FORWARD)
		handleFlowSensor_forwardScreen();
	else if (state == FLOWSENSOR_FORWARDTEST)
		handleFlowSensor_forwardTestScreen();
	else if (state == MASK_OR_NOT)
		handleInterfaceScreen();
	else if (state == MASKS)
		handleMasksScreen();
	else if (state == SETTING)
		handleSettingScreen();
	else if (state == VENT_SETTING)
		handleVentilationSettingScreen();
	else if (state == TRENDS_SCREEN)
		handleTrends();
	else if (state == AUDIO)
		handleAudio();
	else if (state == BRIGHTNESS)
		handleBrightness();
	else if (state == WEIGHT)
		handleWeight();
	else if (state == PATIENT_INFO)
		handlePatientInfoSettingScreen();
	else if (state == DEVICE)
		handleDeviceSetting();
	else if (state == DEVICEINFO)
		handleDeviceInfo();
	else if (state == ALARM)
		handleAlarm();
	else if (state == ALARM_NEXTPAGE)
		handleAlarmNextPage();
	else if (state == MODE)
		handleChooseMode();
	else if (state == AGE)
		handleAge();
	else if (state == DAY)
		handleDay();
	else if (state == MONTH)
		handleMonth();
	else if (state == YEAR)
		handleYear();
	else if (state == HOURS)
		handleHours();
	else if (state == LANGUAGE)
		handleLanguage();
	else if (state == MINUTES)
		handleMinutes();
	else if (state == PEEP)
		handlePEEP();
	else if (state == PIP)
		handlePIP();
	else if (state == RR)
		handleRR();
	else if (state == VT)
		handleVT();
	else if (state == IE)
		handleIE();
	else if (state == FIO2)
		handleFiO2();
	else if (state == TI)
		handleTi();
	else if (state == CPAP)
		handleCPAP();
	else if (state == FLOW)
		handleFlow();
	else if (state == SENS)
		handleSens();
	else if (state == RISETIME)
		handleRisetime();
	else if (state == CYCLING_OFF)
		handleCycling();
	else if (state == TRIGGER)
		handleTrigger();
	else if (state == PEEP_CONF)
		handlePEEP_CONF();
	else if (state == PIP_CONF)
		handlePControl_CONF();
	else if (state == RR_CONF)
		handleRR_CONF();
	else if (state == VT_CONF)
		handleVT_CONF();
	else if (state == SVT_CONF)
		handleSafetyVT_CONF();
	else if (state == FIO2_CONF)
		handleFiO2_CONF();
	else if (state == TI_CONF)
		handleTi_CONF();
	else if (state == PSUPP)
		handlePsupp();
	else if (state == PSUPP_CONF)
		handlePsupp_CONF();
	else if (state == PSMAX_CONF)
		handlePSMax_CONF();
	else if (state == TIINSPPAUSE_CONF)
		handleTiInspPause_CONF();
	else if (state == FLOWSHAPE_CONF)
		handleFlowShape_CONF();
	else if (state == SENS_CONF)
		handleSens_CONF();
	else if (state == RISETIME_CONF)
		handleRisetime_CONF();
	else if (state == CYCLING_OFF_CONF)
		handleCycling_CONF();
	else if (state == TRIGGER_CONF)
		handleTrigger_CONF();
	else if (state == PCONTROL_CONF)
		handlePControl_CONF();
	else if (state == PCONTROLMAX_CONF)
		handlePControlMax_CONF();
	else if (state == CPAP_CONF)
		handleCPAP_CONF();
	else if (state == EPAP_CONF)
		handleEPAP_CONF();
	else if (state == IPAP_CONF)
		handleIPAP_CONF();
	else if (state == IPAPMAX_CONF)
		handleIPAPMax_CONF();
	else if (state == RR_MAX)
		handleRRMax();
	else if (state == RR_MIN)
		handleRRMin();
	else if (state == PRESSURE_MAX)
		handlePressureMax();
	else if (state == PRESSURE_MIN)
		handlePressureMin();
	else if (state == VTI_MAX)
		handleVtiMax();
	else if (state == VTI_MIN)
		handleVtiMin();
	else if (state == VTE_MAX)
		handleVteMax();
	else if (state == VTE_MIN)
		handleVteMin();
	else if (state == MVI_MIN)
		handleMViMin();
	else if (state == MVI_MAX)
		handleMViMax();
	else if (state == MVE_MIN)
		handleMVeMin();
	else if (state == MVE_MAX)
		handleMVeMax();
	else if (state == FIO2_MIN)
		handleFiO2Min();
	else if (state == FIO2_MAX)
		handleFiO2Max();
	else if (state == LEAK_MAX)
		handleLeakMax();
	else if (state == SPO2_MIN)
		handleSPO2Min();
	else if (state == SPO2_MAX)
		handleSPO2Max();
	else if (state == LOWPEEP)
		handleLowPEEP();
	else if (state == ALARM_NEXTPAGE)
		handleAlarmNextPage();
	else if (state == CIRCUIT_ALARM)
		handleCircuitDisAlarm();
	else if (state == PULSERATE_MAX)
		handleHRMaxAlarm();
	else if (state == PULSERATE_MIN)
		handleHRMinAlarm();
	else if (state == OBSTRUCTION_ALARM)
		handleObstructionAlarm();
	else if (state == VENTSTOPED_ALARM)
		handleVentStopedAlarm();
	else if(state == BACKUP)
		handleBackup();
	else if(state == BACKUP_MODE)
		handleBackupChooseModes();
	else if(state == BACKUP_APNEA)
		handleBackupApneaTime();
	else if(state == BACKUP_APNEA)
		handleBackupApneaTime();
	else if(state == APNEA_DETECTION)
		handleApneaDetection();
	else if (state == APNEA_ALARM)
		handleApneaAlaram();
	else if (state == BACKUP_MODESCREEN)
		handleBackupConfigScreen();
	else if (state == BACKUP_PEEP)
		handlePEEPBackup();
	else if (state == BACKUP_RR)
		handleRRBackup();
	else if (state == BACKUP_VT)
		handleVTBackup();
	else if (state == BACKUP_TI)
		handleTiBackup();
	else if (state == BACKUP_RISETIME)
		handleRiseTimeBackup();
	else if (state == BACKUP_PCONTROL)
		handlePControlBackup();
	else if (state == BACKUP_FLOWSHAPE)
		handleFlowShapeBackup();
	else if (state == TIMAX_CONF)
		handleTiMax_CONF();
	else if (state == TIMIN_CONF)
		handleTiMin_CONF();
	else if (state == ALERT)
		handleAlert();
	
}

void screenView::click_autoscaleButton()
{
	key1=0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
}

void screenView::click_configurationButton()
{
	click_setting();
	click_ventSetting();
}
void screenView::handleInitAgeScreen()
{
	if (isCircuitSetting)
	{
		if (!back_initialize.isVisible())
		{
			back_initialize.setVisible(true);
			back_initialize.invalidate();
		}
		if (key1 == 0)
		{
			if (selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(false);
				selector_backInitialize.invalidate();
			}
			if (selector_first.isVisible())
			{
				selector_first.setVisible(false);
				selector_first.invalidate();
			}
			if (selector_second.isVisible())
			{
				selector_second.setVisible(false);
				selector_second.invalidate();
			}
		}
		if (key1 == 1)
		{
			if (!selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(true);
				selector_backInitialize.invalidate();
			}
			if (selector_first.isVisible())
			{
				selector_first.setVisible(false);
				selector_first.invalidate();
			}
			if (selector_second.isVisible())
			{
				selector_second.setVisible(false);
				selector_second.invalidate();
			}
		}
		if (key1 == 2)
		{
			if (selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(false);
				selector_backInitialize.invalidate();
			}
			if (!selector_first.isVisible())
			{
				selector_first.setVisible(true);
				selector_first.invalidate();
			}
			if (selector_second.isVisible())
			{
				selector_second.setVisible(false);
				selector_second.invalidate();
			}
			if (pressKey == 1)
			{
				click_adult_initScreen_button();
			}
		}
		else if (key1 == 3)
		{
			if (selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(false);
				selector_backInitialize.invalidate();
			}
			if (selector_first.isVisible())
			{
				selector_first.setVisible(false);
				selector_first.invalidate();
			}
			if (!selector_second.isVisible())
			{
				selector_second.setVisible(true);
				selector_second.invalidate();
			}
			if (pressKey == 1)
			{
				// --
			}
		}
		else if (key1 > 3)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 3;
			encoderCounter = 13;
			__HAL_TIM_SET_COUNTER(&htim3, 13);
		}
	}
	else
	{
		if (key1 == 0)
		{
			if (selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(false);
				selector_backInitialize.invalidate();
			}
			if (selector_first.isVisible())
			{
				selector_first.setVisible(false);
				selector_first.invalidate();
			}
			if (selector_second.isVisible())
			{
				selector_second.setVisible(false);
				selector_second.invalidate();
			}
		}
		if (key1 == 1)
		{
			if (selector_backInitialize.isVisible())
			{
				selector_backInitialize.setVisible(false);
				selector_backInitialize.invalidate();
			}
			if (!selector_first.isVisible())
			{
				selector_first.setVisible(true);
				selector_first.invalidate();
			}
			if (selector_second.isVisible())
			{
				selector_second.setVisible(false);
				selector_second.invalidate();
			}
			if (pressKey == 1)
			{
				click_adult_initScreen_button();
			}
		}
		else if (key1 == 2)
		{
			if (selector_first.isVisible())
			{
				selector_first.setVisible(false);
				selector_first.invalidate();
			}
			if (!selector_second.isVisible())
			{
				selector_second.setVisible(true);
				selector_second.invalidate();
			}
			if (pressKey == 1)
			{
				click_pediatric_initScreen_button();
			}
		}
		else if (key1 > 2)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 2;
			encoderCounter = 8+1;
			__HAL_TIM_SET_COUNTER(&htim3, 8+1);
		}
	}
}

void screenView::handleInitCircuitScreen()
{
	if (!back_initialize.isVisible() && isCircuitSetting)
	{
		back_initialize.setVisible(true);
		back_initialize.invalidate();
	}
	if (key1 == 0)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
	}
	if (key1 == 1)
	{
		if (!selector_first.isVisible())
		{
			selector_first.setVisible(true);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_singleLeak_button();
		}
	}
	else if (key1 == 2)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (!selector_second.isVisible())
		{
			selector_second.setVisible(true);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_singleCircuit_button();
		}
	}
	else if (key1 > 2)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 2;
		encoderCounter = 8+1;
		__HAL_TIM_SET_COUNTER(&htim3, 8+1);
	}
}

void screenView::handleInitTestCalibrationScreen()
{
	if (container_TestCalibration.isVisible())
	{
		if (key1 == 0)
		{
			pressKey = 0;
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
		}
		else if (key1 == 1)
		{
			selector_testCalibration.setVisible(true);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
			if (pressKey == 1)
			{
				click_testCalibration_button();
			}
		}
		else if (key1 == 2)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(true);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
			if (pressKey == 1)
			{
				click_sensors_button();
			}
		}
		else if (key1 == 3)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(true);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_tightness_button();
			}
		}
		else if (key1 == 4)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(true);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_flowSensor_button();
			}
		}
		else if (key1 == 5)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(true);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_O2Cell_button();
			}
		}
		else if (key1 == 6)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(true);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_CO2Sensor_button();
			}
		}
		else if (key1 == 7)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_tightness.setVisible(false);
			selector_tightness.invalidate();
			selector_flowSensor.setVisible(false);
			selector_flowSensor.invalidate();
			selector_CO2Sensor.setVisible(false);
			selector_CO2Sensor.invalidate();
			selector_O2Cell.setVisible(false);
			selector_O2Cell.invalidate();
			selector_skip.setVisible(true);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_skip_button();
			}
		}
		else if (key1 > 7)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 7;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
}

void screenView::handleSensorsScreen()
{
	if (container_sensors.isVisible())
	{
		if (key1 == 0)
		{
			pressKey = 0;
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
		}
		else if (key1 == 1)
		{
			selector_testCalibration.setVisible(true);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
			if (pressKey == 1)
			{
				click_testCalibration_button();
			}
		}
		else if (key1 == 2)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(true);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();
			if (pressKey == 1)
			{
				click_sensors_button();
			}
		}
		else if (key1 == 3)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(true);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_O2Check_button();
			}
		}
		else if (key1 == 4)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(true);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_CO2Check_button();
			}
		}
		else if (key1 == 5)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(true);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(false);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_SPO2Check_button();
			}
		}
		else if (key1 == 6)
		{
			selector_testCalibration.setVisible(false);
			selector_testCalibration.invalidate();
			selector_sensors.setVisible(false);
			selector_sensors.invalidate();
			selector_O2Check.setVisible(false);
			selector_O2Check.invalidate();
			selector_CO2Check.setVisible(false);
			selector_CO2Check.invalidate();
			selector_SPO2Check.setVisible(false);
			selector_SPO2Check.invalidate();
			selector_skip.setVisible(true);
			selector_skip.invalidate();

			if (pressKey == 1)
			{
				click_skip_button();
			}
		}
		else if (key1 > 6)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 6;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
}

void screenView::handleTightnessScreen()
{
		if (key1 == 0)
		{
			pressKey = 0;
			if(selector_back_tightness.isVisible())
			{
				selector_back_tightness.setVisible(false);
				selector_back_tightness.invalidate();	
			}			
			if(selector_tightnessContinue.isVisible())
			{
				selector_tightnessContinue.setVisible(false);
				selector_tightnessContinue.invalidate();	
			}
		}
		else if (key1 == 1)
		{
			if(!selector_back_tightness.isVisible())
			{
				selector_back_tightness.setVisible(true);
				selector_back_tightness.invalidate();	
			}			
			if(selector_tightnessContinue.isVisible())
			{
				selector_tightnessContinue.setVisible(false);
				selector_tightnessContinue.invalidate();	
			}
			if (pressKey == 1)
			{
				click_back_tightnessScreen();
			}
		}
		else if (key1 == 2)
		{
			if(selector_back_tightness.isVisible())
			{
				selector_back_tightness.setVisible(false);
				selector_back_tightness.invalidate();	
			}			
			if(!selector_tightnessContinue.isVisible())
			{
				selector_tightnessContinue.setVisible(true);
				selector_tightnessContinue.invalidate();	
			}
			if (pressKey == 1)
			{
				click_tightness_continue_button();
			}
		}
		else if (key1 > 2)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 2;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	
}
void screenView::handleTightnessTestScreen()
{
	if(calib_process == 2)
	{
		if (tightness_result == 0)
		{
			tightness_CheckImage.setVisible(false);
			tightness_CheckImage.invalidate();
			tightness_CrossImage.setVisible(true);
			tightness_CrossImage.invalidate();
		}
		else if(tightness_result == 1)
		{
			tightness_CheckImage.setVisible(true);
			tightness_CheckImage.invalidate();
			tightness_CrossImage.setVisible(false);
			tightness_CrossImage.invalidate();
		}
		calibration_result[0] = tightness_result;
		save_calibrationDate(1);
		setCalibrationData();
		container_tightnessTestScreen.setVisible(false);
		container_tightnessTestScreen.invalidate();
		container_preopCheck.setVisible(true);
		container_preopCheck.invalidate();
		testCalibration_button.setSelected(true);
		testCalibration_button.invalidate();
		container_TestCalibration.setVisible(true);
		container_TestCalibration.invalidate();
		
		mode_int = mode_tmp_int;
		blockingStart = 0;
		flag_startVent=0;
		sendConfig();
		sendConfig();
		state = TESTCALIBRATION;
	}
}

void screenView::handleFlowSensorScreen()
{
		if (key1 == 0)
		{
			pressKey = 0;
			if(selector_back_flowSensor.isVisible())
			{
				selector_back_flowSensor.setVisible(false);
				selector_back_flowSensor.invalidate();	
			}			
			if(selector_flowSensorContinue.isVisible())
			{
				selector_flowSensorContinue.setVisible(false);
				selector_flowSensorContinue.invalidate();	
			}
		}
		else if (key1 == 1)
		{
			if(!selector_back_flowSensor.isVisible())
			{
				selector_back_flowSensor.setVisible(true);
				selector_back_flowSensor.invalidate();	
			}			
			if(selector_flowSensorContinue.isVisible())
			{
				selector_flowSensorContinue.setVisible(false);
				selector_flowSensorContinue.invalidate();	
			}
			if (pressKey == 1)
			{
				click_back_flowSensorScreen();
			}
		}
		else if (key1 == 2)
		{
			if(selector_back_flowSensor.isVisible())
			{
				selector_back_flowSensor.setVisible(false);
				selector_back_flowSensor.invalidate();	
			}			
			if(!selector_flowSensorContinue.isVisible())
			{
				selector_flowSensorContinue.setVisible(true);
				selector_flowSensorContinue.invalidate();	
			}
			if (pressKey == 1)
			{
				click_flowSensor_continue_button();
			}
		}
		else if (key1 > 2)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 2;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
}
void screenView::handleFlowSensor_backwardTestScreen()
{
	if(calib_process == 2)
	{
		flowAir_img.setVisible(false);
		flowAir_img.invalidate();
		
		if (flowSensor_backward_result == 0)
		{
			flowSensor_CheckImage.setVisible(false);
			flowSensor_CheckImage.invalidate();
			flowSensor_CrossImage.setVisible(true);
			flowSensor_CrossImage.invalidate();
			container_flowSensorTestScreen.setVisible(false);
			container_flowSensorTestScreen.invalidate();
			container_preopCheck.setVisible(true);
			container_preopCheck.invalidate();
			testCalibration_button.setSelected(true);
			testCalibration_button.invalidate();
			container_TestCalibration.setVisible(true);
			container_TestCalibration.invalidate();
			calibration_result[6] = flowSensor_backward_result;
			save_calibrationDate(2);
			setCalibrationData();
			mode_int = mode_tmp_int;
			flag_startVent=0;
			calibration_sdp_state = 0;
			backward_start = 0;
			forward_start = 0;
			sendConfig();
			sendConfig();
			state = TESTCALIBRATION;
		}
		else if (flowSensor_backward_result == 1)
		{
			flowSensor_backward_img.setVisible(false);
			flowSensor_backward_img.invalidate();
			flowSensor_testing_txt.setVisible(false);
			flowSensor_testing_txt.invalidate();
			flowSensor_forward_img.setVisible(true);
			flowSensor_forward_img.invalidate();
			flowSensor_continue_button.setVisible(true);
			flowSensor_continue_button.invalidate();
			flowSensor_forward_discription_txt.setVisible(true);
			flowSensor_forward_discription_txt.invalidate();
			flowSensor_progress.setValue(60);
			flowSensor_progress.invalidate();
			Unicode::snprintf(flowSensor_progress_txtBuffer,FLOWSENSOR_PROGRESS_TXT_SIZE, "%d",60);
			flowSensor_progress_txt.setWildcard1(flowSensor_progress_txtBuffer);
			flowSensor_progress_txt.invalidate();
			state = FLOWSENSOR_FORWARD;
		}
	}
}

void screenView::handleFlowSensor_forwardScreen()
{
	if (key1 == 0)
		{
			pressKey = 0;
			selector_flowSensorContinue.setVisible(false);
			selector_flowSensorContinue.invalidate();
		}
		else if (key1 == 1)
		{
			selector_flowSensorContinue.setVisible(true);
			selector_flowSensorContinue.invalidate();

			if (pressKey == 1)
			{
				click_flowSensor_continue_button();
			}
		}
		else if (key1 > 1)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 1;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
		
}

void screenView::handleFlowSensor_forwardTestScreen()
{
	if(calib_process == 2)
	{
		if (flowSensor_forward_result == 0)
		{
			flowSensor_CheckImage.setVisible(false);
			flowSensor_CheckImage.invalidate();
			flowSensor_CrossImage.setVisible(true);
			flowSensor_CrossImage.invalidate();
		}
		else if(flowSensor_forward_result == 1)
		{
			flowSensor_CheckImage.setVisible(true);
			flowSensor_CheckImage.invalidate();
			flowSensor_CrossImage.setVisible(false);
			flowSensor_CrossImage.invalidate();
		}
		calibration_result[6] = flowSensor_forward_result;
		save_calibrationDate(2);
		setCalibrationData();
		container_flowSensorTestScreen.setVisible(false);
		container_flowSensorTestScreen.invalidate();
		container_preopCheck.setVisible(true);
		container_preopCheck.invalidate();
		testCalibration_button.setSelected(true);
		testCalibration_button.invalidate();
		container_TestCalibration.setVisible(true);
		container_TestCalibration.invalidate();
		mode_int = mode_tmp_int;
		flag_startVent=0;
		calibration_sdp_state = 0;
		backward_start = 0;
		forward_start = 0;
		
		sendConfig();
		sendConfig();
		state = TESTCALIBRATION;
	}
}


void screenView::handleInterfaceScreen()
{
	if (!back_initialize.isVisible() && isCircuitSetting)
	{
		back_initialize.setVisible(true);
		back_initialize.invalidate();
	}
	if (key1 == 0)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
	}
	if (key1 == 1)
	{
		if (!selector_first.isVisible())
		{
			selector_first.setVisible(true);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_mask();
		}
	}
	else if (key1 == 2)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (!selector_second.isVisible())
		{
			selector_second.setVisible(true);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_invasive();
		}
	}
	else if (key1 > 2)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 2;
		encoderCounter = 8+1;
		__HAL_TIM_SET_COUNTER(&htim3, 8+1);
	}
}
void screenView::handleMasksScreen()
{
		if (!back_initialize.isVisible() && isCircuitSetting)
	{
		back_initialize.setVisible(true);
		back_initialize.invalidate();
	}
	if (key1 == 0)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
	}
	if (key1 == 1)
	{
		if (!selector_first.isVisible())
		{
			selector_first.setVisible(true);
			selector_first.invalidate();
		}
		if (selector_second.isVisible())
		{
			selector_second.setVisible(false);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_nonVentedMask();
		}
	}
	else if (key1 == 2)
	{
		if (selector_first.isVisible())
		{
			selector_first.setVisible(false);
			selector_first.invalidate();
		}
		if (!selector_second.isVisible())
		{
			selector_second.setVisible(true);
			selector_second.invalidate();
		}
		if (pressKey == 1)
		{
			click_ventedMask();
		}
	}
	else if (key1 > 2)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 2;
		encoderCounter = 8+1;
		__HAL_TIM_SET_COUNTER(&htim3, 8+1);
	}
}

void screenView::click_Monitoring()
{
	//disable big values
	if(VT_val_big.isVisible())	click_VT();
	else if(RR_val_big.isVisible())	click_RR();
	else if(flow_val_big.isVisible())	click_flow();
	else if(Ti_val_big.isVisible())	click_Ti();
	else if(PEEP_val_big.isVisible())	click_PEEP();
	else if(PControl_val_big.isVisible())	click_PControl();
	else if(sensivity_val_big.isVisible()) click_sensitivity();
	else if(FiO2_val_big.isVisible()) click_FiO2();
	else if(cyclingOff_val_big.isVisible()) click_cycling();
	
	if (state == MAIN)
	{
		graph_v.clear();
		graph_flow.clear();
		graph_p.clear();
		monitorState++;
		if (monitorState > 3)
		{
			monitorState = 0;
		}
	}
}

void screenView::click_adult_initScreen_button()
{
	click_adult();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_first.setVisible(false);
	selector_first.invalidate();
	container_initializeAge.setVisible(false);
	container_initializeAge.invalidate();
	container_initializeCircuit.setVisible(true);
	container_initializeCircuit.invalidate();
	state = INIT_CIRCUIT;
	isLoading = true;
}

void screenView::click_pediatric_initScreen_button()
{
	click_pediatric();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_second.setVisible(false);
	selector_second.invalidate();
	container_initializeAge.setVisible(false);
	container_initializeAge.invalidate();
	container_initializeCircuit.setVisible(true);
	container_initializeCircuit.invalidate();
	state = INIT_CIRCUIT;
	isLoading = true;
}

void screenView::click_singleLeak_button()
{
	// single with leak
	image_singleLeakCircuit.setVisible(true);
	image_singleLeakCircuit.invalidate();
	image_singleCircuit.setVisible(false);
	image_singleCircuit.invalidate();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_initializeCircuit.setVisible(false);
	container_initializeCircuit.invalidate();
	container_preopCheck.setVisible(true);
	container_preopCheck.invalidate();
	container_TestCalibration.setVisible(true);
	container_TestCalibration.invalidate();
	testCalibration_button.setSelected(true);
	testCalibration_button.invalidate();

	circuitType_intval = 2;
	 
	mode_int = 6+1;
	CMVVCV_txt.setVisible(false);
	CMVVCV_txt.invalidate();
	CMVPCV_txt.setVisible(false);
	CMVPCV_txt.invalidate();
	ACVCV_txt.setVisible(false);
	ACVCV_txt.invalidate();
	ACPCV_txt.setVisible(false);
	ACPCV_txt.invalidate();
	SIMVVCV_txt.setVisible(false);
	SIMVVCV_txt.invalidate();
	SIMVPCV_txt.setVisible(false);
	SIMVPCV_txt.invalidate();
	PSV_txt.setVisible(true);
	PSV_txt.invalidate();
	Unicode::strncpy(modeTxt_valBuffer, (const char *)"PSV    ", strlen("PSV    "));
	modeTxt_val.setWildcard(modeTxt_valBuffer);
	modeTxt_val.invalidate();
	CPAP_txt.setVisible(false);
	CPAP_txt.invalidate();
	BiPAP_txt.setVisible(false);
	BiPAP_txt.invalidate();
	
	state = TESTCALIBRATION;
	isLoading = true;
}

void screenView::click_singleCircuit_button()
{
	// single circuit valve
	image_singleCircuit.setVisible(true);
	image_singleCircuit.invalidate();
	image_singleLeakCircuit.setVisible(false);
	image_singleLeakCircuit.invalidate();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_second.setVisible(false);
	selector_second.invalidate();
	container_initializeCircuit.setVisible(false);
	container_initializeCircuit.invalidate();
	container_preopCheck.setVisible(true);
	container_preopCheck.invalidate();
	container_TestCalibration.setVisible(true);
	container_TestCalibration.invalidate();
	testCalibration_button.setSelected(true);
	testCalibration_button.invalidate();
	
	circuitType_intval = 1;
	
	mode_int = 1;
	CMVVCV_txt.setVisible(true);
	CMVVCV_txt.invalidate();
	Unicode::strncpy(modeTxt_valBuffer, (const char *)"CMV-VCV", strlen("CMV-VCV"));
	modeTxt_val.setWildcard(modeTxt_valBuffer);
	modeTxt_val.invalidate();
	CMVPCV_txt.setVisible(false);
	CMVPCV_txt.invalidate();
	ACVCV_txt.setVisible(false);
	ACVCV_txt.invalidate();
	ACPCV_txt.setVisible(false);
	ACPCV_txt.invalidate();
	SIMVVCV_txt.setVisible(false);
	SIMVVCV_txt.invalidate();
	SIMVPCV_txt.setVisible(false);
	SIMVPCV_txt.invalidate();
	PSV_txt.setVisible(false);
	PSV_txt.invalidate();
	CPAP_txt.setVisible(false);
	CPAP_txt.invalidate();
	BiPAP_txt.setVisible(false);
	BiPAP_txt.invalidate();
	
	state = TESTCALIBRATION;
	isLoading = true;
}


void screenView::click_testCalibration_button()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_TestCalibration.setVisible(true);
	container_TestCalibration.invalidate();
	container_sensors.setVisible(false);
	container_sensors.invalidate();
	state = TESTCALIBRATION;
}

void screenView::click_sensors_button()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_sensors.setVisible(true);
	container_sensors.invalidate();
	state = SENSORS;
}


void screenView::click_tightness_button()
{

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_tightness.setVisible(false);
	selector_tightness.invalidate();
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_preopCheck.setVisible(false);
	container_preopCheck.invalidate();
	container_tightnessTestScreen.setVisible(true);
	container_tightnessTestScreen.invalidate();
	
	tightness_discription_txt.setVisible(true);
	tightness_discription_txt.invalidate();
	tightness_testing_txt.setVisible(false);
	tightness_testing_txt.invalidate();
	tightness_continue_button.setVisible(true);
	tightness_continue_button.invalidate();
	
	Unicode::snprintf(tightness_progress_txtBuffer,TIGHTNESS_PROGRESS_TXT_SIZE, "%d",33);
	tightness_progress_txt.setWildcard1(tightness_progress_txtBuffer);
	tightness_progress_txt.invalidate();
	tightness_progress.setValue(33);
	tightness_progress.invalidate();

	mode_tmp_int = mode_int;
	mode_int = 50;
	flag_startVent = 1;
	calibration_sdp_state = 1;
	
	sendConfig();
	sendConfig();
	
	state = TIGHTNESS;
	isLoading = true;
}
void screenView::click_back_tightnessScreen()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_tightnessTestScreen.setVisible(false);
	container_tightnessTestScreen.invalidate();
	container_preopCheck.setVisible(true);
	container_preopCheck.invalidate();
	testCalibration_button.setSelected(true);
	testCalibration_button.invalidate();
	container_TestCalibration.setVisible(true);
	container_TestCalibration.invalidate();
	
	mode_int = mode_tmp_int;
	blockingStart = 0;
	flag_startVent=0;
	sendConfig();
	sendConfig();
	state = TESTCALIBRATION;
}
void screenView::click_flowSensor_button()
{

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_flowSensor.setVisible(false);
	selector_flowSensor.invalidate();
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_preopCheck.setVisible(false);
	container_preopCheck.invalidate();
	container_flowSensorTestScreen.setVisible(true);
	container_flowSensorTestScreen.invalidate();
	
	flowSensor_backward_discription_txt.setVisible(true);
	flowSensor_backward_discription_txt.invalidate();
	flowSensor_forward_discription_txt.setVisible(false);
	flowSensor_forward_discription_txt.invalidate();
	flowSensor_testing_txt.setVisible(false);
	flowSensor_testing_txt.invalidate();
	flowSensor_continue_button.setVisible(true);
	flowSensor_continue_button.invalidate();
	flowSensor_backward_img.setVisible(true);
	flowSensor_backward_img.invalidate();
	flowSensor_forward_img.setVisible(false);
	flowSensor_forward_img.invalidate();
	
	Unicode::snprintf(flowSensor_progress_txtBuffer,FLOWSENSOR_PROGRESS_TXT_SIZE, "%d",20);
	flowSensor_progress_txt.setWildcard1(flowSensor_progress_txtBuffer);
	flowSensor_progress_txt.invalidate();
	flowSensor_progress.setValue(20);
	flowSensor_progress.invalidate();
	
	mode_tmp_int = mode_int;
	mode_int = 50;
	flag_startVent = 1;
	calibration_sdp_state = 2;
	backward_start = 0;
	forward_start = 0;
	sendConfig();
	sendConfig();
	state = FLOWSENSOR;
	isLoading = true;
}
	
void screenView::click_back_flowSensorScreen()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_flowSensorTestScreen.setVisible(false);
	container_flowSensorTestScreen.invalidate();
	container_preopCheck.setVisible(true);
	container_preopCheck.invalidate();
	testCalibration_button.setSelected(true);
	testCalibration_button.invalidate();
	container_TestCalibration.setVisible(true);
	container_TestCalibration.invalidate();
	mode_int = mode_tmp_int;
	flag_startVent=0;
	calibration_sdp_state = 0;
	backward_start = 0;
	forward_start = 0;
	
	sendConfig();
	sendConfig();
	state = TESTCALIBRATION;
}
void screenView::click_O2Cell_button()
{

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_O2Cell.setVisible(false);
	selector_O2Cell.invalidate();
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_preopCheck.setVisible(false);
	container_preopCheck.invalidate();
	container_o2CellTestScreen.setVisible(true);
	container_o2CellTestScreen.invalidate();


	
	state = O2CELL_TEST;
	isLoading = true;
}

void screenView::click_CO2Sensor_button()
{

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_CO2Sensor.setVisible(false);
	selector_CO2Sensor.invalidate();
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_preopCheck.setVisible(false);
	container_preopCheck.invalidate();
	container_CO2SensorTestScreen.setVisible(true);
	container_CO2SensorTestScreen.invalidate();


	
	state = CO2SENSOR_TEST;
	isLoading = true;
}

void screenView::click_tightness_continue_button()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	tightness_discription_txt.setVisible(false);
	tightness_discription_txt.invalidate();
	tightness_testing_txt.setVisible(true);
	tightness_testing_txt.invalidate();
	tightness_continue_button.setVisible(false);
	tightness_continue_button.invalidate();
	selector_tightnessContinue.setVisible(false);
	selector_tightnessContinue.invalidate();
	mode_int = 50;
	flag_startVent = 1;
	calibration_sdp_state = 1;
	blockingStart = 1;
	Unicode::snprintf(tightness_progress_txtBuffer,TIGHTNESS_PROGRESS_TXT_SIZE, "%d",66);
	tightness_progress_txt.setWildcard1(tightness_progress_txtBuffer);
	tightness_progress_txt.invalidate();
	tightness_progress.setValue(66);
	tightness_progress.invalidate();
	
	sendConfig();
	state = TIGHTNESS_TEST;
}
void screenView::click_flowSensor_continue_button()
{
	flowAir_img.setVisible(true);
	flowAir_img.invalidate();
	
	if (state == FLOWSENSOR)
	{
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		flowSensor_backward_discription_txt.setVisible(false);
		flowSensor_backward_discription_txt.invalidate();
		flowSensor_testing_txt.setVisible(true);
		flowSensor_testing_txt.invalidate();
		flowSensor_continue_button.setVisible(false);
		flowSensor_continue_button.invalidate();
		selector_flowSensorContinue.setVisible(false);
		selector_flowSensorContinue.invalidate();
		
		mode_int = 50;  
		flag_startVent = 1;
		calibration_sdp_state = 2;
		backward_start = 1;
		forward_start = 0;
		sendConfig();
		sendConfig();
		Unicode::snprintf(flowSensor_progress_txtBuffer,FLOWSENSOR_PROGRESS_TXT_SIZE, "%d",40);
		flowSensor_progress_txt.setWildcard1(flowSensor_progress_txtBuffer);
		flowSensor_progress_txt.invalidate();
		flowSensor_progress.setValue(40);
		flowSensor_progress.invalidate();
		
		state = FLOWSENSOR_BACKWARDTEST;
	}
	else if (state == FLOWSENSOR_FORWARD)
	{
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		flowSensor_forward_discription_txt.setVisible(false);
		flowSensor_forward_discription_txt.invalidate();
		flowSensor_testing_txt.setVisible(true);
		flowSensor_testing_txt.invalidate();
		flowSensor_continue_button.setVisible(false);
		flowSensor_continue_button.invalidate();
		selector_flowSensorContinue.setVisible(false);
		selector_flowSensorContinue.invalidate();
		mode_int = 50;  
		flag_startVent = 1;
		calibration_sdp_state = 2;
		forward_start = 1;
		backward_start = 0;
		sendConfig();
		sendConfig();
		Unicode::snprintf(flowSensor_progress_txtBuffer,FLOWSENSOR_PROGRESS_TXT_SIZE, "%d",80);
		flowSensor_progress_txt.setWildcard1(flowSensor_progress_txtBuffer);
		flowSensor_progress_txt.invalidate();
		flowSensor_progress.setValue(80);
		flowSensor_progress.invalidate();
		
		state = FLOWSENSOR_FORWARDTEST;
	}
}

void screenView::click_O2Check_button()
{}
void screenView::click_CO2Check_button()
{}
void screenView::click_SPO2Check_button()
{}
void screenView::click_skip_button()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_preopCheck.setVisible(false);
	container_preopCheck.invalidate();
	container_TestCalibration.setVisible(false);
	container_TestCalibration.invalidate();
	container_sensors.setVisible(false);
	container_sensors.invalidate();
	container_maskorInvasiveType.setVisible(true);
	container_maskorInvasiveType.invalidate();
	state = MASK_OR_NOT;
	isLoading = true;
}

void screenView::click_mask()
{
	interfaceType_intval = 1;
	image_mask_bar.setVisible(true);
	image_mask_bar.invalidate();
	image_invasive_bar.setVisible(false);
	image_invasive_bar.invalidate();
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_maskorInvasiveType.setVisible(false);
	container_maskorInvasiveType.invalidate();
	container_maskTypes.setVisible(true);
	container_maskTypes.invalidate();
	state = MASKS;
}
void screenView::click_invasive()
{
	interfaceType_intval = 2;
	image_mask_bar.setVisible(false);
	image_mask_bar.invalidate();
	image_invasive_bar.setVisible(true);
	image_invasive_bar.invalidate();
	maskType_intval = 0;
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_maskorInvasiveType.setVisible(false);
	container_maskorInvasiveType.invalidate();
	container_mainScreen.setVisible(true);
	container_mainScreen.invalidate();
	state = MAIN;
}
void screenView::click_ventedMask()
{
	maskType_intval = 1;
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_maskTypes.setVisible(false);
	container_maskTypes.invalidate();
	container_mainScreen.setVisible(true);
	container_mainScreen.invalidate();
	state = MAIN;
}
void screenView::click_nonVentedMask()
{
	maskType_intval = 2;
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	container_maskTypes.setVisible(false);
	container_maskTypes.invalidate();
	container_mainScreen.setVisible(true);
	container_mainScreen.invalidate();
	state = MAIN;
}

void screenView::click_backInitialize()
{
	if (selector_backInitialize.isVisible())
	{
		selector_backInitialize.setVisible(false);
		selector_backInitialize.invalidate();
	}
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);

	// which state we are in?
	if (state == INIT_AGE)
	{
		// go to settings
		container_initializeAge.setVisible(false);
		container_initializeAge.invalidate();
		container_initializeScreen.setVisible(false);
		container_initializeScreen.invalidate();
		container_mainScreen.setVisible(true);
		container_mainScreen.invalidate();
		container_settingScreen.setVisible(true);
		container_settingScreen.invalidate();
		state = SETTING;
	}
	else if (state == INIT_CIRCUIT)
	{
		// go to init age
		container_initializeAge.setVisible(true);
		container_initializeAge.invalidate();
		container_initializeCircuit.setVisible(false);
		container_initializeCircuit.invalidate();
		state = INIT_AGE;
	}
	else if (state == TESTCALIBRATION)
	{
		// init cicuit
		container_initializeCircuit.setVisible(true);
		container_initializeCircuit.invalidate();
		container_TestCalibration.setVisible(false);
		container_TestCalibration.invalidate();
		state = INIT_CIRCUIT;
	}
	else if (state == MASKS)
	{
		// go to mask or invasive
		container_maskorInvasiveType.setVisible(true);
		container_maskorInvasiveType.invalidate();
		
		container_maskTypes.setVisible(false);
		container_maskTypes.invalidate();
		state = MASK_OR_NOT;
	}
}

void screenView::click_setting()
{
	//------
	if (PEEP_val_big.isVisible())
	{
		PEEP_val_big.setVisible(false);
		PEEP_val_big.invalidate();
		PEEP_val.setVisible(true);
		PEEP_val.invalidate();
	}
	else if (PControl_val_big.isVisible())
	{
		PControl_val_big.setVisible(false);
		PControl_val_big.invalidate();
		PControl_val.setVisible(true);
		PControl_val.invalidate();
	}
	else if (RR_val_big.isVisible())
	{
		RR_val_big.setVisible(false);
		RR_val_big.invalidate();
		RR_val.setVisible(true);
		RR_val.invalidate();
	}
	else if (VT_val_big.isVisible())
	{
		VT_val_big.setVisible(false);
		VT_val_big.invalidate();
		VT_val.setVisible(true);
		VT_val.invalidate();
	}
	else if (FiO2_val_big.isVisible())
	{
		FiO2_val_big.setVisible(false);
		FiO2_val_big.invalidate();
		FiO2_val.setVisible(true);
		FiO2_val.invalidate();
	}
	else if (container_IEVal_big.isVisible())
	{
		container_IEVal_big.setVisible(false);
		container_IEVal_big.invalidate();
		container_IEVal.setVisible(true);
		container_IEVal.invalidate();
	}
	// -------
	if (state == MAIN)
	{
		pressKey = 0;
		if (selector_startPause.isVisible())
		{
			selector_startPause.setVisible(false);
			selector_startPause.invalidate();
		}
		if (selector_setting.isVisible())
		{
			selector_setting.setVisible(false);
			selector_setting.invalidate();
		}
		if (selector_monitor.isVisible())
		{
			selector_monitor.setVisible(false);
			selector_monitor.invalidate();
		}
		if (selector_FiO2.isVisible())
		{
			selector_FiO2.setVisible(false);
			selector_FiO2.invalidate();
		}
		if (selector_IE.isVisible())
		{
			selector_IE.setVisible(false);
			selector_IE.invalidate();
		}
		if (selector_PEEP.isVisible())
		{
			selector_PEEP.setVisible(false);
			selector_PEEP.invalidate();
		}
		if (selector_PIP.isVisible())
		{
			selector_PIP.setVisible(false);
			selector_PIP.invalidate();
		}
		if (selector_VT.isVisible())
		{
			selector_VT.setVisible(false);
			selector_VT.invalidate();
		}
		if (selector_RR.isVisible())
		{
			selector_RR.setVisible(false);
			selector_RR.invalidate();
		}
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		graph_flow.setVisible(false);
		graph_flow.invalidate();
		graph_v.setVisible(false);
		graph_v.invalidate();
		graph_p.setVisible(false);
		graph_p.invalidate();
		container_pressureMonitor.setVisible(false);
		container_pressureMonitor.invalidate();
	
		container_settingScreen.setVisible(true);
		container_settingScreen.invalidate();

		container_graphVLines.setVisible(false);
		container_graphVLines.invalidate();
		container_graphPLines.setVisible(false);
		container_graphPLines.invalidate();
		container_graphFLines.setVisible(false);
		container_graphFLines.invalidate();

		state = SETTING;
	}
}

void screenView::click_PEEP()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!PEEP_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			PEEP_val.setVisible(false);
			PEEP_val.invalidate();
			PEEP_val_big.setVisible(true);
			PEEP_val_big.invalidate();
			
			PEEP_tmp_intval = PEEP_intval;
			if(PEEP_tmp_intval == -1)
			{
				Unicode::strncpy(PEEP_val_bigBuffer, "Off", 3);
				PEEP_val_big.setWildcard1(PEEP_val_bigBuffer);
				PEEP_val_big.resizeToCurrentText();
				PEEP_val_big.invalidate();
			}
			else
			{
				Unicode::snprintf(PEEP_val_bigBuffer, PEEP_VAL_BIG_SIZE, "%d", (int)PEEP_tmp_intval);
				PEEP_val_big.setWildcard1(PEEP_val_bigBuffer);
				PEEP_val_big.invalidate();
			}
			if(isArabic)
			{
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = PEEP;
		}
		else if (PEEP_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			PEEP_val_big.setVisible(false);
			PEEP_val_big.invalidate();
			PEEP_val.setVisible(true);
			PEEP_val.invalidate();
			
			PEEP_intval = PEEP_tmp_intval;
			if(PEEP_tmp_intval == -1)
			{
				Unicode::strncpy(PEEP_valBuffer, "Off", 3);
				PEEP_val.setWildcard1(PEEP_valBuffer);
				PEEP_val.resizeToCurrentText();
				PEEP_val.invalidate();
			}
			else
			{
				Unicode::snprintf(PEEP_valBuffer, PEEP_VAL_SIZE, "%d", (int)PEEP_tmp_intval);
				PEEP_val.setWildcard1(PEEP_valBuffer);
				PEEP_val.invalidate();
			}
			
			state = MAIN;
		}
	}
}

void screenView::click_PEEP_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!PEEP_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PEEP_val_ventSetting.setVisible(false);
		PEEP_val_ventSetting.invalidate();
		PEEP_val_big_ventSetting.setVisible(true);
		PEEP_val_big_ventSetting.invalidate();
		
		PEEP_tmp_intval = PEEP_intval;
		if(PEEP_tmp_intval == -1)
		{
			Unicode::strncpy(PEEP_val_big_ventSettingBuffer, "Off", 3);
			PEEP_val_big_ventSetting.setWildcard1(PEEP_val_big_ventSettingBuffer);
			PEEP_val_big_ventSetting.resizeToCurrentText();
			PEEP_val_big_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(PEEP_val_big_ventSettingBuffer, PEEP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
			PEEP_val_big_ventSetting.setWildcard1(PEEP_val_big_ventSettingBuffer);
			PEEP_val_big_ventSetting.invalidate();
		}
		state = PEEP_CONF;
	}
	else if (PEEP_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		PEEP_val_big_ventSetting.setVisible(false);
		PEEP_val_big_ventSetting.invalidate();
		PEEP_val_ventSetting.setVisible(true);
		PEEP_val_ventSetting.invalidate();
		if(PEEP_tmp_intval == -1)
		{
			Unicode::strncpy(PEEP_val_ventSettingBuffer, "Off", 3);
			PEEP_val_ventSetting.setWildcard1(PEEP_val_ventSettingBuffer);
			PEEP_val_ventSetting.resizeToCurrentText();
			PEEP_val_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(PEEP_val_ventSettingBuffer, PEEP_VAL_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
			PEEP_val_ventSetting.setWildcard1(PEEP_val_ventSettingBuffer);
			PEEP_val_ventSetting.invalidate();
		}
		
		PEEP_intval = PEEP_tmp_intval;
		state = VENT_SETTING;
	}
}
void screenView::click_PControl()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!PControl_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			PControl_val.setVisible(false);
			PControl_val.invalidate();
			PControl_val_big.setVisible(true);
			PControl_val_big.invalidate();
			// PControl_tmp_intval = PControl_intval;
			Unicode::snprintf(PControl_val_bigBuffer, PCONTROL_VAL_BIG_SIZE, "%d", (int)PControl_tmp_intval);
			PControl_val_big.setWildcard1(PControl_val_bigBuffer);
			PControl_val_big.invalidate();
			
			if(isArabic)
			{
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = PIP;
		}
		else if (PControl_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			PControl_val_big.setVisible(false);
			PControl_val_big.invalidate();
			Unicode::snprintf(PControl_valBuffer, PCONTROL_VAL_SIZE, "%d", (int)PControl_tmp_intval);
			PControl_val.setWildcard1(PControl_valBuffer);
			PControl_val.setVisible(true);
			PControl_val.invalidate();
			
//			PIP_line.setVisible(false);
//			PIP_line.invalidate();
//			PIP_line.setY(351 - (PControl_tmp_intval * 5.33));
//			PIP_line.setVisible(true);
//			PIP_line.invalidate();
			//		pip = PControl_tmp_intval;
			state = MAIN;
		}
	}
}
void screenView::click_PControl_conf()
{  
	pressKey = 0;
	disableVentSettingChoose2();

	if (!PControl_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PControl_val_ventSetting.setVisible(false);
		PControl_val_ventSetting.invalidate();
		PControl_val_big_ventSetting.setVisible(true);
		PControl_val_big_ventSetting.invalidate();
		PControl_tmp_intval = PControl_intval;
		Unicode::snprintf(PControl_val_big_ventSettingBuffer, PCONTROL_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_big_ventSetting.setWildcard1(PControl_val_big_ventSettingBuffer);
		PControl_val_big_ventSetting.invalidate();
		state = PIP_CONF;
	}
	else if (PControl_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		PControl_val_big_ventSetting.setVisible(false);
		PControl_val_big_ventSetting.invalidate();
		PControl_val_ventSetting.setVisible(true);
		PControl_val_ventSetting.invalidate();
		Unicode::snprintf(PControl_val_ventSettingBuffer, PCONTROL_VAL_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_ventSetting.setWildcard1(PControl_val_ventSettingBuffer);
		PControl_val_ventSetting.invalidate();
		PControl_intval = PControl_tmp_intval;
		state = VENT_SETTING;
	}
}
void screenView::click_PControlMax_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!PControlMax_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PControlMax_val_ventSetting.setVisible(false);
		PControlMax_val_ventSetting.invalidate();
		PControlMax_val_big_ventSetting.setVisible(true);
		PControlMax_val_big_ventSetting.invalidate();
		
		PControl_tmp_intval = PControlMax_intval;
		Unicode::snprintf(PControlMax_val_big_ventSettingBuffer, PCONTROLMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControlMax_val_big_ventSetting.setWildcard1(PControlMax_val_big_ventSettingBuffer);
		PControlMax_val_big_ventSetting.invalidate();
		state = PCONTROLMAX_CONF;
	}
	else if (PControlMax_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		PControlMax_val_big_ventSetting.setVisible(false);
		PControlMax_val_big_ventSetting.invalidate();
		PControlMax_val_ventSetting.setVisible(true);
		PControlMax_val_ventSetting.invalidate();
		Unicode::snprintf(PControlMax_val_ventSettingBuffer, PCONTROLMAX_VAL_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControlMax_val_ventSetting.setWildcard1(PControlMax_val_ventSettingBuffer);
		PControlMax_val_ventSetting.invalidate();
		PControlMax_intval = PControl_tmp_intval;
		state = VENT_SETTING;
	}

}
void screenView::click_IPAPMax_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!IPAPMax_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		IPAPMax_val_ventSetting.setVisible(false);
		IPAPMax_val_ventSetting.invalidate();
		IPAPMax_val_big_ventSetting.setVisible(true);
		IPAPMax_val_big_ventSetting.invalidate();
		PControl_tmp_intval = IPAPMax_intval;
		Unicode::snprintf(IPAPMax_val_big_ventSettingBuffer, IPAPMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAPMax_val_big_ventSetting.setWildcard1(IPAPMax_val_big_ventSettingBuffer);
		IPAPMax_val_big_ventSetting.invalidate();
		
		state = IPAPMAX_CONF;
	}
	else if (IPAPMax_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		IPAPMax_val_big_ventSetting.setVisible(false);
		IPAPMax_val_big_ventSetting.invalidate();
		IPAPMax_val_ventSetting.setVisible(true);
		IPAPMax_val_ventSetting.invalidate();
		IPAPMax_intval = PControl_tmp_intval;
		Unicode::snprintf(IPAPMax_val_ventSettingBuffer, IPAPMAX_VAL_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAPMax_val_ventSetting.setWildcard1(IPAPMax_val_ventSettingBuffer);
		IPAPMax_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}

}
void screenView::click_IPAP_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!IPAP_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		IPAP_val_ventSetting.setVisible(false);
		IPAP_val_ventSetting.invalidate();
		IPAP_val_big_ventSetting.setVisible(true);
		IPAP_val_big_ventSetting.invalidate();
		PControl_tmp_intval = IPAP_intval;
		Unicode::snprintf(IPAP_val_big_ventSettingBuffer, IPAP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAP_val_big_ventSetting.setWildcard1(IPAP_val_big_ventSettingBuffer);
		IPAP_val_big_ventSetting.invalidate();
		
		state = IPAP_CONF;
	}
	else if (IPAP_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		IPAP_val_big_ventSetting.setVisible(false);
		IPAP_val_big_ventSetting.invalidate();
		IPAP_val_ventSetting.setVisible(true);
		IPAP_val_ventSetting.invalidate();
		IPAP_intval = PControl_tmp_intval;
		Unicode::snprintf(IPAP_val_ventSettingBuffer, IPAP_VAL_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAP_val_ventSetting.setWildcard1(IPAP_val_ventSettingBuffer);
		IPAP_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}

}
void screenView::click_EPAP_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!EPAP_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		EPAP_val_ventSetting.setVisible(false);
		EPAP_val_ventSetting.invalidate();
		EPAP_val_big_ventSetting.setVisible(true);
		EPAP_val_big_ventSetting.invalidate();
		PEEP_tmp_intval = EPAP_intval;
		Unicode::snprintf(EPAP_val_big_ventSettingBuffer, EPAP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
		EPAP_val_ventSetting.setWildcard1(EPAP_val_big_ventSettingBuffer);
		EPAP_val_ventSetting.invalidate();
		state = EPAP_CONF;
	}
	else if (EPAP_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		EPAP_val_big_ventSetting.setVisible(false);
		EPAP_val_big_ventSetting.invalidate();
		EPAP_val_ventSetting.setVisible(true);
		EPAP_val_ventSetting.invalidate();
		EPAP_intval = PEEP_tmp_intval;
		Unicode::snprintf(EPAP_val_ventSettingBuffer, EPAP_VAL_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
		EPAP_val_ventSetting.setWildcard1(EPAP_val_ventSettingBuffer);
		EPAP_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}

}
void screenView::click_RR()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!RR_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			RR_val.setVisible(false);
			RR_val.invalidate();
			RR_val_big.setVisible(true);
			RR_val_big.invalidate();
			RR_tmp_intval = RR_intval;
			
			if(RR_tmp_intval == 0)
			{
				Unicode::strncpy(RR_val_bigBuffer, "Off", 3);
				RR_val_big.setWildcard1(RR_val_bigBuffer);
				RR_val_big.resizeToCurrentText();
				RR_val_big.invalidate();
			}
			else
			{
				Unicode::snprintf(RR_val_bigBuffer, RR_VAL_BIG_SIZE, "%d", (int)RR_tmp_intval);
				RR_val_big.setWildcard1(RR_val_bigBuffer);
				RR_val_big.invalidate();
			}
			
			if(isArabic)
			{
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = RR;
		}
		else if (RR_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			RR_val_big.setVisible(false);
			RR_val_big.invalidate();
			RR_val.setVisible(true);
			RR_val.invalidate();
			if(RR_tmp_intval == 0)
			{
				Unicode::strncpy(RR_valBuffer, "Off", 3);
				RR_val.setWildcard1(RR_valBuffer);
				RR_val.resizeToCurrentText();
				RR_val.invalidate();
			}
			else
			{
				Unicode::snprintf(RR_valBuffer, RR_VAL_SIZE, "%d", (int)RR_tmp_intval);
				RR_val.setWildcard1(RR_valBuffer);
				RR_val.invalidate();
			}			
			
			state = MAIN;
		}
	}
}

void screenView::click_RR_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!RR_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		RR_val_ventSetting.setVisible(false);
		RR_val_ventSetting.invalidate();
		RR_val_big_ventSetting.setVisible(true);
		RR_val_big_ventSetting.invalidate();
		RR_tmp_intval = RR_intval;
		if(RR_tmp_intval == 0)
		{
			Unicode::strncpy(RR_val_big_ventSettingBuffer, "Off", 3);
			RR_val_big_ventSetting.setWildcard1(RR_val_big_ventSettingBuffer);
			RR_val_big_ventSetting.resizeToCurrentText();
			RR_val_big_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_val_big_ventSettingBuffer, RR_VAL_BIG_VENTSETTING_SIZE, "%d", (int)RR_tmp_intval);
			RR_val_big_ventSetting.setWildcard1(RR_val_big_ventSettingBuffer);
			RR_val_big_ventSetting.invalidate();
		}
		state = RR_CONF;
	}
	else if (RR_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		RR_val_big_ventSetting.setVisible(false);
		RR_val_big_ventSetting.invalidate();
		RR_val_ventSetting.setVisible(true);
		RR_val_ventSetting.invalidate();
		RR_intval = RR_tmp_intval;
		if(RR_tmp_intval == 0)
		{
			Unicode::strncpy(RR_val_ventSettingBuffer, "Off", 3);
			RR_val_ventSetting.setWildcard1(RR_val_ventSettingBuffer);
			RR_val_ventSetting.resizeToCurrentText();
			RR_val_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_val_ventSettingBuffer, RR_VAL_VENTSETTING_SIZE, "%d", (int)RR_tmp_intval);
			RR_val_ventSetting.setWildcard1(RR_val_ventSettingBuffer);
			RR_val_ventSetting.invalidate();
		}
		
		state = VENT_SETTING;
	}
}
void screenView::click_VT()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!VT_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			VT_val.setVisible(false);
			VT_val.invalidate();
			VT_val_big.setVisible(true);
			VT_val_big.invalidate();
			// VT_tmp_intval = VT_intval;
			Unicode::snprintf(VT_val_bigBuffer, VT_VAL_BIG_SIZE, "%d", (int)VT_tmp_intval);
			VT_val_big.setWildcard1(VT_val_bigBuffer);
			VT_val_big.invalidate();
			
			if(isArabic)
			{
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = VT;
		}
		else if (VT_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			VT_val_big.setVisible(false);
			VT_val_big.invalidate();
			VT_val.setVisible(true);
			VT_val.invalidate();
			Unicode::snprintf(VT_valBuffer, VT_VAL_SIZE, "%d", (int)VT_tmp_intval);
			VT_val.setWildcard1(VT_valBuffer);
			VT_val.invalidate();
			
			//		volume_ramp = VT_tmp_intval;
			state = MAIN;
		}
	}
}

void screenView::click_VT_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!VT_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		VT_val_ventSetting.setVisible(false);
		VT_val_ventSetting.invalidate();
		VT_val_big_ventSetting.setVisible(true);
		VT_val_big_ventSetting.invalidate();
		VT_tmp_intval = VT_intval;
		Unicode::snprintf(VT_val_big_ventSettingBuffer, VT_VAL_BIG_VENTSETTING_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_big_ventSetting.setWildcard1(VT_val_big_ventSettingBuffer);
		VT_val_big_ventSetting.invalidate();
		state = VT_CONF;
	}
	else if (VT_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		VT_val_big_ventSetting.setVisible(false);
		VT_val_big_ventSetting.invalidate();
		VT_val_ventSetting.setVisible(true);
		VT_val_ventSetting.invalidate();
		VT_intval = VT_tmp_intval;
		Unicode::snprintf(VT_val_ventSettingBuffer, VT_VAL_VENTSETTING_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_ventSetting.setWildcard1(VT_val_ventSettingBuffer);
		VT_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}
}
void screenView::click_IE()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!container_IEVal_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			container_IEVal.setVisible(false);
			container_IEVal.invalidate();
			container_IEVal_big.setVisible(true);
			container_IEVal_big.invalidate();
			// SafetyVT_tmp_intval = IE_intval;
			Unicode::snprintf(IE_val_bigBuffer, IE_VAL_BIG_SIZE, "%d", (int)SafetyVT_tmp_intval);
			IE_val_big.setWildcard1(IE_val_bigBuffer);
			IE_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = IE;
		}
		else if (container_IEVal_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			container_IEVal_big.setVisible(false);
			container_IEVal_big.invalidate();
			container_IEVal.setVisible(true);
			container_IEVal.invalidate();
			Unicode::snprintf(IE_valBuffer, IE_VAL_SIZE, "%d", (int)SafetyVT_tmp_intval);
			IE_val.setWildcard1(IE_valBuffer);
			IE_val.invalidate();
			
			//		I_E = SafetyVT_tmp_intval;
			state = MAIN;
		}
	}
}

void screenView::click_safetyVT_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!SafetyVT_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		SafetyVT_val_ventSetting.setVisible(false);
		SafetyVT_val_ventSetting.invalidate();
		SafetyVT_val_big_ventSetting.setVisible(true);
		SafetyVT_val_big_ventSetting.invalidate();
		SafetyVT_tmp_intval = safetyVT_intval;
		Unicode::snprintf(SafetyVT_val_big_ventSettingBuffer, SAFETYVT_VAL_BIG_VENTSETTING_SIZE, "%d", (int)SafetyVT_tmp_intval);
		SafetyVT_val_big_ventSetting.setWildcard1(SafetyVT_val_big_ventSettingBuffer);
		SafetyVT_val_big_ventSetting.invalidate();
		state = SVT_CONF;
	}
	else if (SafetyVT_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		SafetyVT_val_big_ventSetting.setVisible(false);
		SafetyVT_val_big_ventSetting.invalidate();
		SafetyVT_val_ventSetting.setVisible(true);
		SafetyVT_val_ventSetting.invalidate();
		safetyVT_intval = SafetyVT_tmp_intval;
		Unicode::snprintf(SafetyVT_val_ventSettingBuffer, SAFETYVT_VAL_VENTSETTING_SIZE, "%d", (int)SafetyVT_tmp_intval);
		SafetyVT_val_ventSetting.setWildcard1(SafetyVT_val_ventSettingBuffer);
		SafetyVT_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}
}

void screenView::click_FiO2()
{
	if(!isFiO2Fake_alarm)
	{
		pressKey = 0;
		return;
	}
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!FiO2_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			else if (CPAP_val_big.isVisible())
				click_CPAP();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			FiO2_val.setVisible(false);
			FiO2_val.invalidate();
			FiO2_val_big.setVisible(true);
			FiO2_val_big.invalidate();
			FiO2_tmp_intval = FiO2_intval;
			Unicode::snprintf(FiO2_val_bigBuffer, FIO2_VAL_BIG_SIZE, "%d", (int)FiO2_tmp_intval);
			FiO2_val_big.setWildcard1(FiO2_val_bigBuffer);
			FiO2_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = FIO2;
		}
		else if (FiO2_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			FiO2_val_big.setVisible(false);
			FiO2_val_big.invalidate();
			FiO2_val.setVisible(true);
			FiO2_val.invalidate();
			Unicode::snprintf(FiO2_valBuffer, FIO2_VAL_SIZE, "%d", (int)FiO2_tmp_intval);
			FiO2_val.setWildcard1(FiO2_valBuffer);
			FiO2_val.invalidate();
			
			FiO2_intval = FiO2_tmp_intval; // have no real fio2 for now
			state = MAIN;
		}
	}
}

void screenView::click_FiO2_conf()
{
	if(!isFiO2Fake_alarm)
	{
		pressKey = 0;
		return;
	}	
	pressKey = 0;
	disableVentSettingChoose2();

	if (!FiO2_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		else if (CPAP_val_big_ventSetting_1.isVisible())
		{
			click_CPAP_conf();
			selector_CPAP_ventSetting_1.setVisible(false);
			selector_CPAP_ventSetting_1.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		FiO2_val_ventSetting.setVisible(false);
		FiO2_val_ventSetting.invalidate();
		FiO2_val_big_ventSetting.setVisible(true);
		FiO2_val_big_ventSetting.invalidate();
		FiO2_tmp_intval = FiO2_intval; 
		Unicode::snprintf(FiO2_val_big_ventSettingBuffer, FIO2_VAL_BIG_VENTSETTING_SIZE, "%d", (int)FiO2_tmp_intval);
		FiO2_val_big_ventSetting.setWildcard1(FiO2_val_big_ventSettingBuffer);
		FiO2_val_big_ventSetting.invalidate();
		state = FIO2_CONF;
	}
	else if (FiO2_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		FiO2_val_big_ventSetting.setVisible(false);
		FiO2_val_big_ventSetting.invalidate();
		FiO2_val_ventSetting.setVisible(true);
		FiO2_val_ventSetting.invalidate();
		FiO2_intval = FiO2_tmp_intval;
		Unicode::snprintf(FiO2_val_ventSettingBuffer, FIO2_VAL_VENTSETTING_SIZE, "%d", (int)FiO2_tmp_intval);
		FiO2_val_ventSetting.setWildcard1(FiO2_val_ventSettingBuffer);
		FiO2_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}
}
void screenView::click_Ti()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!Ti_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			if (PControl_val_big.isVisible())
				click_PControl();
			if (VT_val_big.isVisible())
				click_VT();
			if (container_IEVal_big.isVisible())
				click_IE();
			if (RR_val_big.isVisible())
				click_RR();
			if (FiO2_val_big.isVisible())
				click_FiO2();
			if (flow_val_big.isVisible())
				click_flow();
			if (PS_val_big.isVisible())
				click_Psupp();
			if (riseTime_val_big.isVisible())
				click_riseTime();
			if (sensivity_val_big.isVisible())
				click_sensitivity();
			if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			Ti_val.setVisible(false);
			Ti_val.invalidate();
			Ti_val_big.setVisible(true);
			Ti_val_big.invalidate();
			// Ti_tmp_intval = Ti_intval;
			Unicode::snprintfFloat(Ti_val_bigBuffer, TI_VAL_BIG_SIZE, "%.1f", Ti_tmp_intval);
			Ti_val_big.setWildcard1(Ti_val_bigBuffer);
			Ti_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = TI;
		}
		else if (Ti_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			Ti_val_big.setVisible(false);
			Ti_val_big.invalidate();
			Ti_val.setVisible(true);
			Ti_val.invalidate();
			Unicode::snprintfFloat(Ti_valBuffer, TI_VAL_SIZE, "%.1f", Ti_tmp_intval);
			Ti_val.setWildcard1(Ti_valBuffer);
			Ti_val.invalidate();
			state = MAIN;
		}
	}
}

void screenView::click_Ti_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!Ti_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		Ti_val_ventSetting.setVisible(false);
		Ti_val_ventSetting.invalidate();
		Ti_val_big_ventSetting.setVisible(true);
		Ti_val_big_ventSetting.invalidate();
		Ti_tmp_intval = Ti_intval;
		Unicode::snprintfFloat(Ti_val_big_ventSettingBuffer, TI_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val_big_ventSetting.setWildcard1(Ti_val_big_ventSettingBuffer);
		Ti_val_big_ventSetting.invalidate();
		state = TI_CONF;
	}
	else if (Ti_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		Ti_val_big_ventSetting.setVisible(false);
		Ti_val_big_ventSetting.invalidate();
		Ti_val_ventSetting.setVisible(true);
		Ti_val_ventSetting.invalidate();
		Ti_intval = Ti_tmp_intval;
		Unicode::snprintfFloat(Ti_val_ventSettingBuffer, TI_VAL_VENTSETTING_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val_ventSetting.setWildcard1(Ti_val_ventSettingBuffer);
		Ti_val_ventSetting.invalidate();
		Unicode::snprintfFloat(Ti_valBuffer, TI_VAL_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val.setWildcard1(Ti_valBuffer);
		Ti_val.invalidate();
		
		state = VENT_SETTING;
	}
}

void screenView::click_TiMax_ventSetting()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!TiMax_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		TiMax_val_ventSetting.setVisible(false);
		TiMax_val_ventSetting.invalidate();
		TiMax_val_big_ventSetting.setVisible(true);
		TiMax_val_big_ventSetting.invalidate();
		Unicode::snprintfFloat(TiMax_val_big_ventSettingBuffer, TIMAX_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_max_intval);
		TiMax_val_big_ventSetting.setWildcard1(TiMax_val_big_ventSettingBuffer);
		TiMax_val_big_ventSetting.invalidate();
		state = TIMAX_CONF;
	}
	else if (TiMax_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		TiMax_val_big_ventSetting.setVisible(false);
		TiMax_val_big_ventSetting.invalidate();
		TiMax_val_ventSetting.setVisible(true);
		TiMax_val_ventSetting.invalidate();
		Unicode::snprintfFloat(TiMax_val_ventSettingBuffer, TIMAX_VAL_VENTSETTING_SIZE, "%.1f", Ti_max_intval);
		TiMax_val_ventSetting.setWildcard1(TiMax_val_ventSettingBuffer);
		TiMax_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}
void screenView::click_TiMin_ventSetting()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!TiMin_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		TiMin_val_ventSetting.setVisible(false);
		TiMin_val_ventSetting.invalidate();
		TiMin_val_big_ventSetting.setVisible(true);
		TiMin_val_big_ventSetting.invalidate();
		Unicode::snprintfFloat(TiMin_val_big_ventSettingBuffer, TIMIN_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_min_intval);
		TiMin_val_big_ventSetting.setWildcard1(TiMin_val_big_ventSettingBuffer);
		TiMin_val_big_ventSetting.invalidate();
		state = TIMIN_CONF;
	}
	else if (TiMin_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		TiMin_val_big_ventSetting.setVisible(false);
		TiMin_val_big_ventSetting.invalidate();
		TiMin_val_ventSetting.setVisible(true);
		TiMin_val_ventSetting.invalidate();
		Unicode::snprintfFloat(TiMin_val_ventSettingBuffer, TIMIN_VAL_VENTSETTING_SIZE, "%.1f", Ti_min_intval);
		TiMin_val_ventSetting.setWildcard1(TiMin_val_ventSettingBuffer);
		TiMin_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}
void screenView::click_flow()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!flow_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			flow_val.setVisible(false);
			flow_val.invalidate();
			flow_val_big.setVisible(true);
			flow_val_big.invalidate();
			Unicode::snprintf(flow_val_bigBuffer, FLOW_VAL_BIG_SIZE, "%d", (int)TiInspPause_tmp_intval);
			flow_val_big.setWildcard1(flow_val_bigBuffer);
			flow_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = FLOW;
		}
		else if (flow_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			flow_val_big.setVisible(false);
			flow_val_big.invalidate();
			flow_val.setVisible(true);
			flow_val.invalidate();
			Unicode::snprintf(flow_valBuffer, FLOW_VAL_SIZE, "%d", (int)TiInspPause_tmp_intval);
			flow_val.setWildcard1(flow_valBuffer);
			flow_val.invalidate();
			state = MAIN;
		}
	}
}
void screenView::click_TiInspPause_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!TiInspPause_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if(PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		TiInspPause_val_ventSetting.setVisible(false);
		TiInspPause_val_ventSetting.invalidate();
		TiInspPause_val_big_ventSetting.setVisible(true);
		TiInspPause_val_big_ventSetting.invalidate();
		TiInspPause_tmp_intval = TiInspPause_intval;
		Unicode::snprintfFloat(TiInspPause_val_big_ventSettingBuffer, TIINSPPAUSE_VAL_BIG_VENTSETTING_SIZE, "%0.1f", TiInspPause_tmp_intval);
		TiInspPause_val_big_ventSetting.setWildcard1(TiInspPause_val_big_ventSettingBuffer);
		TiInspPause_val_big_ventSetting.invalidate();
		state = TIINSPPAUSE_CONF;
	}
	else if (TiInspPause_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_TiInspPause_ventSetting.setVisible(false);
		selector_TiInspPause_ventSetting.invalidate();
		TiInspPause_val_big_ventSetting.setVisible(false);
		TiInspPause_val_big_ventSetting.invalidate();
		TiInspPause_val_ventSetting.setVisible(true);
		TiInspPause_val_ventSetting.invalidate();
		TiInspPause_intval = TiInspPause_tmp_intval;
		Unicode::snprintfFloat(TiInspPause_val_ventSettingBuffer, TIINSPPAUSE_VAL_BIG_VENTSETTING_SIZE, "%0.1f", TiInspPause_tmp_intval);
		TiInspPause_val_ventSetting.setWildcard1(TiInspPause_val_ventSettingBuffer);
		TiInspPause_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}

void screenView::click_flowShape_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!FlowShape_val_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		FlowShape_val_ventSetting.setVisible(false);
		FlowShape_val_ventSetting.invalidate();
		FlowShape_val_big_ventSetting.setVisible(true);
		FlowShape_val_big_ventSetting.invalidate();
		flowShape_tmp_intval = flowShape_intval;
		Unicode::snprintf(FlowShape_val_big_ventSettingBuffer, FLOWSHAPE_VAL_BIG_VENTSETTING_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_big_ventSetting.setWildcard1(FlowShape_val_big_ventSettingBuffer);
		FlowShape_val_big_ventSetting.invalidate();
		state = FLOWSHAPE_CONF;
	}
	else if (FlowShape_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_flowShape_ventSetting.setVisible(false);
		selector_flowShape_ventSetting.invalidate();
		FlowShape_val_big_ventSetting.setVisible(false);
		FlowShape_val_big_ventSetting.invalidate();
		FlowShape_val_ventSetting.setVisible(true);
		FlowShape_val_ventSetting.invalidate();
		flowShape_intval = flowShape_tmp_intval;
		Unicode::snprintf(FlowShape_val_ventSettingBuffer, FLOWSHAPE_VAL_VENTSETTING_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_ventSetting.setWildcard1(FlowShape_val_ventSettingBuffer);
		FlowShape_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}
void screenView::click_Psupp()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!PS_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			PS_val.setVisible(false);
			PS_val.invalidate();
			PS_val_big.setVisible(true);
			PS_val_big.invalidate();

			Unicode::snprintf(PS_val_bigBuffer, PS_VAL_BIG_SIZE, "%d", (int)Psupp_tmp_intval);
			PS_val_big.setWildcard1(PS_val_bigBuffer);
			PS_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = PSUPP;
		}
		else if (PS_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			PS_val_big.setVisible(false);
			PS_val_big.invalidate();
			PS_val.setVisible(true);
			PS_val.invalidate();
			Unicode::snprintf(PS_valBuffer, PS_VAL_SIZE, "%d", (int)Psupp_tmp_intval);
			PS_val.setWildcard1(PS_valBuffer);
			PS_val.invalidate();
			state = MAIN;
		}
	}
}
void screenView::click_Psupp_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!PS_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PS_val_ventSetting.setVisible(false);
		PS_val_ventSetting.invalidate();
		PS_val_big_ventSetting.setVisible(true);
		PS_val_big_ventSetting.invalidate();
		Psupp_tmp_intval = Psupp_intval;
		Unicode::snprintf(PS_val_big_ventSettingBuffer, PS_VAL_BIG_VENTSETTING_SIZE, "%d", (int)Psupp_tmp_intval);
		PS_val_big_ventSetting.setWildcard1(PS_val_big_ventSettingBuffer);
		PS_val_big_ventSetting.invalidate();
		state = PSUPP_CONF;
	}
	else if (PS_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_PS_ventSetting.setVisible(false);
		selector_PS_ventSetting.invalidate();
		PS_val_big_ventSetting.setVisible(false);
		PS_val_big_ventSetting.invalidate();
		PS_val_ventSetting.setVisible(true);
		PS_val_ventSetting.invalidate();
		Psupp_intval = Psupp_tmp_intval;
		Unicode::snprintf(PS_val_ventSettingBuffer, PS_VAL_VENTSETTING_SIZE, "%d", (int)Psupp_tmp_intval);
		PS_val_ventSetting.setWildcard1(PS_val_ventSettingBuffer);
		PS_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}

void screenView::click_PSMax_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!PSMax_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PSMax_val_ventSetting.setVisible(false);
		PSMax_val_ventSetting.invalidate();
		PSMax_val_big_ventSetting.setVisible(true);
		PSMax_val_big_ventSetting.invalidate();
		
		Psupp_tmp_intval = PSMax_intval;
		Unicode::snprintf(PSMax_val_big_ventSettingBuffer, PSMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PSMax_intval);
		PSMax_val_big_ventSetting.setWildcard1(PSMax_val_big_ventSettingBuffer);
		PSMax_val_big_ventSetting.invalidate();
		
		state = PSMAX_CONF;
	}
	else if (PSMax_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_PSMax_ventSetting.setVisible(false);
		selector_PSMax_ventSetting.invalidate();
		PSMax_val_big_ventSetting.setVisible(false);
		PSMax_val_big_ventSetting.invalidate();
		PSMax_val_ventSetting.setVisible(true);
		PSMax_val_ventSetting.invalidate();
		PSMax_intval = Psupp_tmp_intval;
		Unicode::snprintf(PSMax_val_ventSettingBuffer, PSMAX_VAL_VENTSETTING_SIZE, "%d", (int)Psupp_tmp_intval);
		PSMax_val_ventSetting.setWildcard1(PSMax_val_ventSettingBuffer);
		PSMax_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}
}

void screenView::click_CPAP()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!CPAP_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			CPAP_val.setVisible(false);
			CPAP_val.invalidate();
			CPAP_val_big.setVisible(true);
			CPAP_val_big.invalidate();

			Unicode::snprintf(CPAP_val_bigBuffer, CPAP_VAL_BIG_SIZE, "%d", (int)CPAP_tmp_intval);
			CPAP_val_big.setWildcard1(CPAP_val_bigBuffer);
			CPAP_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = CPAP;
		}
		else if (CPAP_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			CPAP_val_big.setVisible(false);
			CPAP_val_big.invalidate();
			CPAP_val.setVisible(true);
			CPAP_val.invalidate();
			Unicode::snprintf(CPAP_valBuffer, CPAP_VAL_SIZE, "%d", (int)CPAP_tmp_intval);
			CPAP_val.setWildcard1(CPAP_valBuffer);
			CPAP_val.invalidate();
			state = MAIN;
		}
	}
}

void screenView::click_CPAP_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!CPAP_val_big_ventSetting_1.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CPAP_val_ventSetting.setVisible(false);
		CPAP_val_ventSetting.invalidate();
		CPAP_val_big_ventSetting_1.setVisible(true);
		CPAP_val_big_ventSetting_1.invalidate();
		CPAP_tmp_intval = CPAP_intval; 
		Unicode::snprintf(CPAP_val_big_ventSetting_1Buffer, CPAP_VAL_BIG_VENTSETTING_1_SIZE, "%d", (int)CPAP_tmp_intval);
		CPAP_val_big_ventSetting_1.setWildcard1(CPAP_val_big_ventSetting_1Buffer);
		CPAP_val_big_ventSetting_1.invalidate();
		state = CPAP_CONF;
	}
	else if (CPAP_val_big_ventSetting_1.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		CPAP_val_big_ventSetting_1.setVisible(false);
		CPAP_val_big_ventSetting_1.invalidate();
		CPAP_val_ventSetting.setVisible(true);
		CPAP_val_ventSetting.invalidate();
		CPAP_intval = CPAP_tmp_intval; 
		Unicode::snprintf(CPAP_val_ventSettingBuffer, CPAP_VAL_VENTSETTING_SIZE, "%d", (int)CPAP_tmp_intval);
		CPAP_val_ventSetting.setWildcard1(CPAP_val_ventSettingBuffer);
		CPAP_val_ventSetting.invalidate();
		
		state = VENT_SETTING;
	}
}
void screenView::click_riseTime()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!riseTime_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (flow_val_big.isVisible())
				click_flow();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			riseTime_val.setVisible(false);
			riseTime_val.invalidate();
			riseTime_val_big.setVisible(true);
			riseTime_val_big.invalidate();
			riseTime_tmp_intval = riseTime_intval;
			Unicode::snprintf(riseTime_val_bigBuffer, RISETIME_VAL_BIG_SIZE, "%d", (int)riseTime_tmp_intval);
			riseTime_val_big.setWildcard1(riseTime_val_bigBuffer);
			riseTime_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = RISETIME;
		}
		else if (riseTime_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			riseTime_val_big.setVisible(false);
			riseTime_val_big.invalidate();
			riseTime_val.setVisible(true);
			riseTime_val.invalidate();
			Unicode::snprintf(riseTime_valBuffer, RISETIME_VAL_SIZE, "%d", (int)riseTime_tmp_intval);
			riseTime_val.setWildcard1(riseTime_valBuffer);
			riseTime_val.invalidate();
			state = MAIN;
		}
	}
}
void screenView::click_riseTime_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!riseTime_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (CPAP_val_big_ventSetting_1.isVisible())
		{
			click_CPAP_conf();
			CPAP_val_big_ventSetting_1.setVisible(false);
			CPAP_val_big_ventSetting_1.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		riseTime_val_ventSetting.setVisible(false);
		riseTime_val_ventSetting.invalidate();
		riseTime_val_big_ventSetting.setVisible(true);
		riseTime_val_big_ventSetting.invalidate();
		riseTime_tmp_intval = riseTime_intval;
		Unicode::snprintf(riseTime_val_big_ventSettingBuffer, RISETIME_VAL_BIG_VENTSETTING_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_big_ventSetting.setWildcard1(riseTime_val_big_ventSettingBuffer);
		riseTime_val_big_ventSetting.invalidate();
		state = RISETIME_CONF;
	}
	else if (riseTime_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_riseTime_ventSetting.setVisible(false);
		selector_riseTime_ventSetting.invalidate();
		riseTime_val_big_ventSetting.setVisible(false);
		riseTime_val_big_ventSetting.invalidate();
		riseTime_val_ventSetting.setVisible(true);
		riseTime_val_ventSetting.invalidate();
		riseTime_intval = riseTime_tmp_intval;
		Unicode::snprintf(riseTime_val_ventSettingBuffer, RISETIME_VAL_VENTSETTING_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_ventSetting.setWildcard1(riseTime_val_ventSettingBuffer);
		riseTime_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}
void screenView::click_cycling()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!cyclingOff_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			cyclingOff_val.setVisible(false);
			cyclingOff_val.invalidate();
			cyclingOff_val_big.setVisible(true);
			cyclingOff_val_big.invalidate();
			// cyclingOff_tmp_intval = cyclingOff_intval;
			Unicode::snprintf(cyclingOff_val_bigBuffer, CYCLINGOFF_VAL_BIG_SIZE, "%d", (int)cyclingOff_tmp_intval);
			cyclingOff_val_big.setWildcard1(cyclingOff_val_bigBuffer);
			cyclingOff_val_big.invalidate();
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = CYCLING_OFF;
		}
		else if (cyclingOff_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			cyclingOff_val_big.setVisible(false);
			cyclingOff_val_big.invalidate();
			cyclingOff_val.setVisible(true);
			cyclingOff_val.invalidate();
			Unicode::snprintf(cyclingOff_valBuffer, CYCLINGOFF_VAL_SIZE, "%d", (int)cyclingOff_tmp_intval);
			cyclingOff_val.setWildcard1(cyclingOff_valBuffer);
			cyclingOff_val.invalidate();
			state = MAIN;
		}
	}
}
void screenView::click_cycling_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!cyclingOff_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		else if (CPAP_val_big_ventSetting_1.isVisible())
		{
			click_CPAP_conf();
			CPAP_val_big_ventSetting_1.setVisible(false);
			CPAP_val_big_ventSetting_1.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		cyclingOff_val_ventSetting.setVisible(false);
		cyclingOff_val_ventSetting.invalidate();
		cyclingOff_val_big_ventSetting.setVisible(true);
		cyclingOff_val_big_ventSetting.invalidate();
		cyclingOff_tmp_intval = cyclingOff_intval;
		Unicode::snprintf(cyclingOff_val_big_ventSettingBuffer, CYCLINGOFF_VAL_BIG_VENTSETTING_SIZE, "%d", (int)cyclingOff_tmp_intval);
		cyclingOff_val_big_ventSetting.setWildcard1(cyclingOff_val_big_ventSettingBuffer);
		
		cyclingOff_val_big_ventSetting.invalidate();
		state = CYCLING_OFF_CONF;
	}
	else if (cyclingOff_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_cyclingOff_ventSetting.setVisible(false);
		selector_cyclingOff_ventSetting.invalidate();
		cyclingOff_val_big_ventSetting.setVisible(false);
		cyclingOff_val_big_ventSetting.invalidate();
		cyclingOff_val_ventSetting.setVisible(true);
		cyclingOff_val_ventSetting.invalidate();
		cyclingOff_intval = cyclingOff_tmp_intval;
		Unicode::snprintf(cyclingOff_val_ventSettingBuffer, CYCLINGOFF_VAL_VENTSETTING_SIZE, "%d", (int)cyclingOff_tmp_intval);
		cyclingOff_val_ventSetting.setWildcard1(cyclingOff_val_ventSettingBuffer);
		cyclingOff_val_ventSetting.invalidate();
		state = VENT_SETTING;
	}
}
void screenView::click_trigger()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!trigger_val_flow_big.isVisible() && !trigger_val_pressure_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			else if (CPAP_val_big.isVisible())
				click_CPAP();

			pressKey = 0;
			if (trigger_val_flow.isVisible())
			{
				key1 = 0;
				encoderCounter = 0 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, 0 + 1);
				trigger_val_flow.setVisible(false);
				trigger_val_flow.invalidate();
				trigger_val_flow_big.setVisible(true);
				trigger_val_flow_big.invalidate();
				trigger_tmp_intval = 0;
			}
			else if (trigger_val_pressure.isVisible())
			{
				key1 = 1;
				encoderCounter = 4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, 4 + 1);
				trigger_val_pressure.setVisible(false);
				trigger_val_pressure.invalidate();
				trigger_val_pressure_big.setVisible(true);
				trigger_val_pressure_big.invalidate();
				trigger_tmp_intval = 1;
			}
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = TRIGGER;
		}
		else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			if (trigger_val_flow_big.isVisible())
			{
				trigger_val_flow.setVisible(true);
				trigger_val_flow.invalidate();
				trigger_val_flow_big.setVisible(false);
				trigger_val_flow_big.invalidate();
				trigger_tmp_intval = 0;
			}
			else if (trigger_val_pressure_big.isVisible())
			{
				trigger_val_pressure.setVisible(true);
				trigger_val_pressure.invalidate();
				trigger_val_pressure_big.setVisible(false);
				trigger_val_pressure_big.invalidate();
				trigger_tmp_intval = 1;
			}
			state = MAIN;
		}
	}
}
void screenView::click_trigger_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!trigger_val_flow_big_ventSetting.isVisible() && !trigger_val_pressure_big_ventSetting.isVisible())
	{
		if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		else if (CPAP_val_big_ventSetting_1.isVisible())
		{
			click_CPAP_conf();
			selector_CPAP_ventSetting_1.setVisible(false);
			selector_CPAP_ventSetting_1.invalidate();
		}
		
		pressKey = 0;
		key1 = trigger_intval * 4;
		encoderCounter = trigger_intval * 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, trigger_intval * 4 + 1);
		if (trigger_val_flow_ventSetting.isVisible())
		{
			trigger_val_flow_ventSetting.setVisible(false);
			trigger_val_flow_ventSetting.invalidate();
			trigger_val_flow_big_ventSetting.setVisible(true);
			trigger_val_flow_big_ventSetting.invalidate();
		}
		else if (trigger_val_pressure_ventSetting.isVisible())
		{
			trigger_val_pressure_ventSetting.setVisible(false);
			trigger_val_pressure_ventSetting.invalidate();
			trigger_val_pressure_big_ventSetting.setVisible(true);
			trigger_val_pressure_big_ventSetting.invalidate();
		}
		state = TRIGGER_CONF;
	}
	else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		if (trigger_val_flow_big_ventSetting.isVisible())
		{
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
			trigger_val_flow_ventSetting.setVisible(true);
			trigger_val_flow_ventSetting.invalidate();
			trigger_val_flow_big_ventSetting.setVisible(false);
			trigger_val_flow_big_ventSetting.invalidate();
			trigger_intval = 0;
			lpmtxt_sens.setVisible(true);
			lpmtxt_sens.invalidate();
			lpmtxt_sensVentS.setVisible(true);
			lpmtxt_sensVentS.invalidate();
			cmh2otxt_sens.setVisible(false);
			cmh2otxt_sens.invalidate();
			cmh2otxt_sensVentS.setVisible(false);
			cmh2otxt_sensVentS.invalidate();
		}
		else if (trigger_val_pressure_big_ventSetting.isVisible())
		{
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
			trigger_val_pressure_ventSetting.setVisible(true);
			trigger_val_pressure_ventSetting.invalidate();
			trigger_val_pressure_big_ventSetting.setVisible(false);
			trigger_val_pressure_big_ventSetting.invalidate();
			trigger_intval = 1;
			lpmtxt_sens.setVisible(false);
			lpmtxt_sens.invalidate();
			lpmtxt_sensVentS.setVisible(false);
			lpmtxt_sensVentS.invalidate();
			cmh2otxt_sens.setVisible(true);
			cmh2otxt_sens.invalidate();
			cmh2otxt_sensVentS.setVisible(true);
			cmh2otxt_sensVentS.invalidate();
		}
		state = VENT_SETTING;
	}
}
void screenView::click_sensitivity()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		if (!sensivity_val_big.isVisible())
		{
			if (PEEP_val_big.isVisible())
				click_PEEP();
			else if (PControl_val_big.isVisible())
				click_PControl();
			else if (VT_val_big.isVisible())
				click_VT();
			else if (container_IEVal_big.isVisible())
				click_IE();
			else if (RR_val_big.isVisible())
				click_RR();
			else if (FiO2_val_big.isVisible())
				click_FiO2();
			else if (Ti_val_big.isVisible())
				click_Ti();
			else if (PS_val_big.isVisible())
				click_Psupp();
			else if (riseTime_val_big.isVisible())
				click_riseTime();
			else if (sensivity_val_big.isVisible())
				click_sensitivity();
			else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
				click_trigger();
			else if (CPAP_val_big.isVisible())
				click_CPAP();
			
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			sensivity_val.setVisible(false);
			sensivity_val.invalidate();
			sensivity_val_big.setVisible(true);
			sensivity_val_big.invalidate();
			sens_tmp_intval = sens_intval;
			if(sens_intval == -1)
			{
				Unicode::strncpy(sensivity_val_bigBuffer, "Off", 3);
				sensivity_val_big.setWildcard1(sensivity_val_bigBuffer);
				sensivity_val_big.resizeToCurrentText();
				sensivity_val_big.invalidate();
			}
			else
			{
				Unicode::snprintfFloat(sensivity_val_bigBuffer, SENSIVITY_VAL_BIG_SIZE, "%.1f", sens_tmp_intval);
				sensivity_val_big.setWildcard1(sensivity_val_bigBuffer);
				sensivity_val_big.invalidate();
			}
			
			if(isArabic)
			{
				confirm_button.setVisible(false);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(true);
				confirm_arbButton.invalidate();
				arb_startButton.setVisible(false);
				arb_startButton.invalidate();
				arb_pauseButton.setVisible(false);
				arb_pauseButton.invalidate();
			}
			else
			{
				confirm_button.setVisible(true);
				confirm_button.invalidate();
				confirm_arbButton.setVisible(false);
				confirm_arbButton.invalidate();
				startButton.setVisible(false);
				startButton.invalidate();
				pauseButton.setVisible(false);
				pauseButton.invalidate();
			}
			state = SENS;
		}
		else if (sensivity_val_big.isVisible())
		{
			pressKey = 0;
			tmp = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			sensivity_val_big.setVisible(false);
			sensivity_val_big.invalidate();
			sensivity_val.setVisible(true);
			sensivity_val.invalidate();
			sens_intval = sens_tmp_intval;
			if(sens_intval == -1)
			{
				Unicode::strncpy(sensivity_valBuffer, "Off", 3);
				sensivity_val.setWildcard1(sensivity_valBuffer);
				sensivity_val.resizeToCurrentText();
				sensivity_val.invalidate();
			}
			else
			{
				Unicode::snprintfFloat(sensivity_valBuffer, SENSIVITY_VAL_SIZE, "%.1f", sens_tmp_intval);
				sensivity_val.setWildcard1(sensivity_valBuffer);
				sensivity_val.invalidate();
			}
			
			state = MAIN;
		}
	}
}
void screenView::click_sensitivity_conf()
{
	pressKey = 0;
	disableVentSettingChoose2();

	if (!sensivity_val_big_ventSetting.isVisible())
	{
		if (RR_val_big_ventSetting.isVisible())
		{
			click_RR_conf();
			selector_RR_ventSetting.setVisible(false);
			selector_RR_ventSetting.invalidate();
		}
		else if (VT_val_big_ventSetting.isVisible())
		{
			click_VT_conf();
			selector_VT_ventSetting.setVisible(false);
			selector_VT_ventSetting.invalidate();
		}
		else if (PEEP_val_big_ventSetting.isVisible())
		{
			click_PEEP_conf();
			selector_PEEP_ventSetting.setVisible(false);
			selector_PEEP_ventSetting.invalidate();
		}
		else if (SafetyVT_val_big_ventSetting.isVisible())
		{
			click_safetyVT_conf();
			selector_safetyVT_ventSetting.setVisible(false);
			selector_safetyVT_ventSetting.invalidate();
		}
		else if (PControl_val_big_ventSetting.isVisible())
		{
			click_PControl_conf();
			selector_PControl_ventSetting.setVisible(false);
			selector_PControl_ventSetting.invalidate();
		}
		else if (TiInspPause_val_big_ventSetting.isVisible())
		{
			click_TiInspPause_conf();
			selector_TiInspPause_ventSetting.setVisible(false);
			selector_TiInspPause_ventSetting.invalidate();
		}
		else if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
		{
			click_trigger_conf();
			selector_trigger_ventSetting.setVisible(false);
			selector_trigger_ventSetting.invalidate();
		}
		else if (PControlMax_val_big_ventSetting.isVisible())
		{
			click_PControlMax_conf();
			selector_PControlMax_ventSetting.setVisible(false);
			selector_PControlMax_ventSetting.invalidate();
		}
		else if (PSMax_val_big_ventSetting.isVisible())
		{
			click_PSMax_conf();
			selector_PSMax_ventSetting.setVisible(false);
			selector_PSMax_ventSetting.invalidate();
		}
		else if (PS_val_big_ventSetting.isVisible())
		{
			click_Psupp_conf();
			selector_PS_ventSetting.setVisible(false);
			selector_PS_ventSetting.invalidate();
		}
		else if (Ti_val_big_ventSetting.isVisible())
		{
			click_Ti_conf();
			selector_Ti_ventSetting.setVisible(false);
			selector_Ti_ventSetting.invalidate();
		}
		else if (TiMax_val_big_ventSetting.isVisible())
		{
			click_TiMax_ventSetting();
			selector_TiMax_ventSetting.setVisible(false);
			selector_TiMax_ventSetting.invalidate();
		}
		else if (TiMin_val_big_ventSetting.isVisible())
		{
			click_TiMin_ventSetting();
			selector_TiMin_ventSetting.setVisible(false);
			selector_TiMin_ventSetting.invalidate();
		}
		else if (FiO2_val_big_ventSetting.isVisible())
		{
			click_FiO2_conf();
			selector_FiO2_ventSetting.setVisible(false);
			selector_FiO2_ventSetting.invalidate();
		}
		else if (sensivity_val_big_ventSetting.isVisible())
		{
			click_sensitivity_conf();
			selector_sens_ventSetting.setVisible(false);
			selector_sens_ventSetting.invalidate();
		}
		else if (cyclingOff_val_big_ventSetting.isVisible())
		{
			click_cycling_conf();
			selector_cyclingOff_ventSetting.setVisible(false);
			selector_cyclingOff_ventSetting.invalidate();
		}
		else if (riseTime_val_big_ventSetting.isVisible())
		{
			click_riseTime_conf();
			selector_riseTime_ventSetting.setVisible(false);
			selector_riseTime_ventSetting.invalidate();
		}
		else if (FlowShape_val_big_ventSetting.isVisible())
		{
			click_flowShape_conf();
			selector_flowShape_ventSetting.setVisible(false);
			selector_flowShape_ventSetting.invalidate();
		}
		else if (IPAPMax_val_big_ventSetting.isVisible())
		{
			click_IPAPMax_conf();
			selector_IPAPMax_ventSetting.setVisible(false);
			selector_IPAPMax_ventSetting.invalidate();
		}
		else if (IPAP_val_big_ventSetting.isVisible())
		{
			click_IPAP_conf();
			selector_IPAP_ventSetting.setVisible(false);
			selector_IPAP_ventSetting.invalidate();
		}
		else if (EPAP_val_big_ventSetting.isVisible())
		{
			click_EPAP_conf();
			selector_EPAP_ventSetting.setVisible(false);
			selector_EPAP_ventSetting.invalidate();
		}
		else if (CPAP_val_big_ventSetting_1.isVisible())
		{
			click_CPAP_conf();
			selector_CPAP_ventSetting_1.setVisible(false);
			selector_CPAP_ventSetting_1.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		sensivity_val_ventSetting.setVisible(false);
		sensivity_val_ventSetting.invalidate();
		sensivity_val_big_ventSetting.setVisible(true);
		sensivity_val_big_ventSetting.invalidate();
		sens_tmp_intval = sens_intval;
		if(sens_tmp_intval == -1)
		{
			Unicode::strncpy(sensivity_val_big_ventSettingBuffer, "Off", 3);
			sensivity_val_big_ventSetting.setWildcard1(sensivity_val_big_ventSettingBuffer);
			sensivity_val_big_ventSetting.resizeToCurrentText();
			sensivity_val_big_ventSetting.invalidate();	
		}
		else
		{
			Unicode::snprintfFloat(sensivity_val_big_ventSettingBuffer, SENSIVITY_VAL_BIG_VENTSETTING_SIZE, "%.1f", sens_tmp_intval);
			sensivity_val_big_ventSetting.setWildcard1(sensivity_val_big_ventSettingBuffer);
			sensivity_val_big_ventSetting.invalidate();	
		}
		
		state = SENS_CONF;
	}
	else if (sensivity_val_big_ventSetting.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		selector_sens_ventSetting.setVisible(false);
		selector_sens_ventSetting.invalidate();
		sensivity_val_big_ventSetting.setVisible(false);
		sensivity_val_big_ventSetting.invalidate();
		sensivity_val_ventSetting.setVisible(true);
		sensivity_val_ventSetting.invalidate();
		sens_intval = sens_tmp_intval;
		if(sens_tmp_intval == -1)
		{
			Unicode::strncpy(sensivity_val_ventSettingBuffer, "Off", 3);
			sensivity_val_ventSetting.setWildcard1(sensivity_val_ventSettingBuffer);
			sensivity_val_ventSetting.resizeToCurrentText();
			sensivity_val_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintfFloat(sensivity_val_ventSettingBuffer, SENSIVITY_VAL_VENTSETTING_SIZE, "%.1f", sens_tmp_intval);
			sensivity_val_ventSetting.setWildcard1(sensivity_val_ventSettingBuffer);
			sensivity_val_ventSetting.invalidate();
		}
		
		state = VENT_SETTING;
	}
}
void screenView::click_confirm()
{
	if (state != SETTING && state != DEVICE && state != ALARM && state != VENT_SETTING && state != PATIENT_INFO && state != TRENDS_SCREEN)
	{
		pressKey = 0;
		disableMainChoose();

		// handle uncomfimed big blue variables
		if (PEEP_val_big.isVisible())
			click_PEEP();
		else if (PControl_val_big.isVisible())
			click_PControl();
		else if (VT_val_big.isVisible())
			click_VT();
		else if (container_IEVal_big.isVisible())
			click_IE();
		else if (RR_val_big.isVisible())
			click_RR();
		else if (FiO2_val_big.isVisible())
			click_FiO2();
		else if (flow_val_big.isVisible())
			click_flow();
		else if (sensivity_val_big.isVisible())
			click_sensitivity();
		else if (Ti_val_big.isVisible())
			click_Ti();
		else if (riseTime_val_big.isVisible())
			click_riseTime();
		else if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
			click_trigger();
		else if (cyclingOff_val_big.isVisible())
			click_cycling();
		else if (PS_val_big.isVisible())
			click_Psupp();

		confirm_button.setVisible(false);
		confirm_button.invalidate();
		confirm_arbButton.setVisible(false);
		confirm_arbButton.invalidate();
		if (flag_startVent == 0)
		{
			if(isArabic)
			{
				arb_startButton.setVisible(true);
				arb_startButton.invalidate();
			}
			else
			{
				startButton.setVisible(true);
				startButton.invalidate();
			}
		}
		else
		{
			if(isArabic)
			{
				arb_pauseButton.setVisible(true);
				arb_pauseButton.invalidate();
			}
			else
			{
				pauseButton.setVisible(true);
				pauseButton.invalidate();
			}
		}

		PEEP_intval = PEEP_tmp_intval;
		PControl_intval = PControl_tmp_intval;
		RR_intval = RR_tmp_intval;
		VT_intval = VT_tmp_intval;
		IE_intval = SafetyVT_tmp_intval;
		FiO2_intval = FiO2_tmp_intval;
		TiInspPause_intval = TiInspPause_tmp_intval;
		sens_intval = sens_tmp_intval;
		Ti_intval = Ti_tmp_intval;
		riseTime_intval = riseTime_tmp_intval;
		Psupp_intval = Psupp_tmp_intval;
		trigger_intval = trigger_tmp_intval;
		updateConfigsWildCards();
		sendConfig();
	}
}

void screenView::click_backSetting()
{
	// close mode
	CMVVCV_big_txt.setVisible(false);
	CMVVCV_big_txt.invalidate();
	CMVPCV_big_txt.setVisible(false);
	CMVPCV_big_txt.invalidate();
	ACVCV_big_txt.setVisible(false);
	ACVCV_big_txt.invalidate();
	ACPCV_big_txt.setVisible(false);
	ACPCV_big_txt.invalidate();
	SIMVVCV_big_txt.setVisible(false);
	SIMVVCV_big_txt.invalidate();
	SIMVPCV_big_txt.setVisible(false);
	SIMVPCV_big_txt.invalidate();
	PSV_big_txt.setVisible(false);
	PSV_big_txt.invalidate();
	CPAP_big_txt.setVisible(false);
	CPAP_big_txt.invalidate();
	BiPAP_big_txt.setVisible(false);
	BiPAP_big_txt.invalidate();
	HFNC_big_txt.setVisible(false);
	HFNC_big_txt.invalidate();
	switch ((int)mode_int)
	{
	case 1:
	{
		CMVVCV_txt.setVisible(true);
		CMVVCV_txt.invalidate();
		break;
	}
	case 2:
	{
		CMVPCV_txt.setVisible(true);
		CMVPCV_txt.invalidate();
		break;
	}
	case 3:
	{
		ACVCV_txt.setVisible(true);
		ACVCV_txt.invalidate();
		break;
	}
	case 4:
	{
		ACPCV_txt.setVisible(true);
		ACPCV_txt.invalidate();
		break;
	}
	case 5:
	{
		SIMVVCV_txt.setVisible(true);
		SIMVVCV_txt.invalidate();
		break;
	}
	case 6:
	{
		SIMVPCV_txt.setVisible(true);
		SIMVPCV_txt.invalidate();
		break;
	}
	case 7:
	{
		PSV_txt.setVisible(true);
		PSV_txt.invalidate();
		break;
	}
	case 8:
	{
		CPAP_txt.setVisible(true);
		CPAP_txt.invalidate();
		break;
	}
	case 9:
	{
		BiPAP_txt.setVisible(true);
		BiPAP_txt.invalidate();
		break;
	}
	case 10:
	{
		CPR_txt.setVisible(true);
		CPR_txt.invalidate();
		//HFNC_txt.setVisible(true);
		//HFNC_txt.invalidate();
		break;
	}
	}

	pressKey = 0;
	state = MAIN;
	
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	
	if(monitorState==3)
	{
		arb_startButton.setVisible(false);
		arb_startButton.invalidate();
		arb_pauseButton.setVisible(false);
		arb_pauseButton.invalidate();
		startButton.setVisible(false);
		startButton.invalidate();
		pauseButton.setVisible(false);
		pauseButton.invalidate();
		confirm_button.setVisible(false);
		confirm_button.invalidate();
		confirm_arbButton.setVisible(false);
		confirm_arbButton.invalidate();
	}
	
	graph_v.clear();
	graph_flow.clear();
	graph_p.clear();
	
	updateConfigsWildCards();
	sendConfig();
}

void screenView::click_mode()
{
	pressKey = 0;
	// invisible chooses
	if (selector_backVentSetting.isVisible())
	{
		selector_backVentSetting.setVisible(false);
		selector_backVentSetting.invalidate();
	}
	else
		disableVentSettingChoose();

	if (CMVVCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CMVVCV_big_txt.setVisible(false);
		CMVVCV_big_txt.invalidate();
		mode_int = 1;
		if (!CMVVCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(true);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			PSV_txt.setVisible(false);
			PSV_txt.invalidate();
			CPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"CMV-VCV", strlen("CMV-VCV"));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (CMVPCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CMVPCV_big_txt.setVisible(false);
		CMVPCV_big_txt.invalidate();
		mode_int = 2;
		if (!CMVPCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(true);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"CMV-PCV", strlen("CMV-PCV"));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (ACVCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		ACVCV_big_txt.setVisible(false);
		ACVCV_big_txt.invalidate();
		mode_int = 3;
		if (!ACVCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(true);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"AC-VCV ", strlen("AC-VCV "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (ACPCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		ACPCV_big_txt.setVisible(false);
		ACPCV_big_txt.invalidate();
		mode_int = 4;
		if (!ACPCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(true);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"AC-PCV ", strlen("AC-PCV "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (SIMVVCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		SIMVVCV_big_txt.setVisible(false);
		SIMVVCV_big_txt.invalidate();
		mode_int = 5;
		if (!SIMVVCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(true);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"SIMV-VC", strlen("SIMV-VC"));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (SIMVPCV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		SIMVPCV_big_txt.setVisible(false);
		SIMVPCV_big_txt.invalidate();
		mode_int = 6;
		if (!SIMVPCV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(true);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"SIMV-PC", strlen("SIMV-PC"));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (PSV_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PSV_big_txt.setVisible(false);
		PSV_big_txt.invalidate();
		mode_int = 7;
		if (!PSV_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			PSV_txt.setVisible(true);
			PSV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"PSV    ", strlen("PSV    "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (CPAP_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CPAP_big_txt.setVisible(false);
		CPAP_big_txt.invalidate();
		mode_int = 8;
		if (!CPAP_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(true);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"CPAP   ", strlen("CPAP   "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (BiPAP_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		BiPAP_big_txt.setVisible(false);
		BiPAP_big_txt.invalidate();
		mode_int = 9;
		if (!BiPAP_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(true);
			BiPAP_txt.invalidate();
			HFNC_txt.setVisible(false);
			HFNC_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"BiPAP  ", strlen("BiPAP  "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else if (HFNC_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		HFNC_big_txt.setVisible(false);
		HFNC_big_txt.invalidate();
		mode_int = 10;
		if (!HFNC_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
			HFNC_txt.setVisible(true);
			HFNC_txt.invalidate();
		}
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"HFNC   ", strlen("HFNC   "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	
	else if (CPR_big_txt.isVisible())
	{
		isLoading = true;
		pressKey = 0;
		state = VENT_SETTING;
		container_ventilationSettingScreen.setVisible(false);
		container_ventilationSettingScreen.invalidate();
		container_ventilationSettingScreen.setVisible(true);
		container_ventilationSettingScreen.invalidate();
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CPR_big_txt.setVisible(false);
		CPR_big_txt.invalidate();
		mode_int = 10;
		if (!CPR_txt.isVisible())
		{
			CMVVCV_txt.setVisible(false);
			CMVVCV_txt.invalidate();
			CMVPCV_txt.setVisible(false);
			CMVPCV_txt.invalidate();
			ACVCV_txt.setVisible(false);
			ACVCV_txt.invalidate();
			ACPCV_txt.setVisible(false);
			ACPCV_txt.invalidate();
			SIMVVCV_txt.setVisible(false);
			SIMVVCV_txt.invalidate();
			SIMVPCV_txt.setVisible(false);
			SIMVPCV_txt.invalidate();
			CPAP_txt.setVisible(false);
			CPAP_txt.invalidate();
			HFNC_txt.setVisible(false);
			HFNC_txt.invalidate();
			CPR_txt.setVisible(true);
			CPR_txt.invalidate();
			BiPAP_txt.setVisible(false);
			BiPAP_txt.invalidate();
		}
		
		Unicode::strncpy(modeTxt_valBuffer, (const char *)"CPR    ", strlen("CPR    "));
		modeTxt_val.setWildcard1(modeTxt_valBuffer);
		modeTxt_val.invalidate();
	}
	else
	{
		modeFlag = false;
		state = MODE;
		key1 = mode_int - 1;
		encoderCounter = (key1)*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, (key1)*4 + 1);
	}
	pressKey = 0;
}

void screenView::click_age()
{
	pressKey = 0;
	if (selector_backPatientInfoSetting.isVisible())
	{
		selector_backPatientInfoSetting.setVisible(false);
		selector_backPatientInfoSetting.invalidate();
	}
	if (!selector_ageSetting.isVisible())
	{
		selector_ageSetting.setVisible(true);
		selector_ageSetting.invalidate();
	}
	if (selector_heightPatientSetting.isVisible())
	{
		selector_heightPatientSetting.setVisible(false);
		selector_heightPatientSetting.invalidate();
	}
	
	if (weight_bigVal.isVisible())
	{
		click_heightButton();
	}
	if (state != AGE)
	{
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		state = AGE;
		container_ageSetting.setVisible(true);
		container_ageSetting.moveTo(263, container_ageSetting.getY());
		container_ageSetting.invalidate();
	}
	else
	{
		if (adult_image.isVisible())
			click_adult();
		else if (child_image.isVisible())
			click_pediatric();
	}
}

void screenView::click_adult()
{
	patientType_intval = 1;
	isLoading = true;
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	state = PATIENT_INFO;
	selector_ageAdultSetting.setVisible(false);
	selector_ageAdultSetting.invalidate();
	container_ageSetting.moveTo(263, container_ageSetting.getY());
	container_ageSetting.setVisible(false);
	container_ageSetting.invalidate();
	adult_image.setVisible(true);
	adult_image.invalidate();
	child_image.setVisible(false);
	child_image.invalidate();
	adult_patientInfo_image.setVisible(true);
	adult_patientInfo_image.invalidate();
	child_patientInfo_image.setVisible(false);
	child_patientInfo_image.invalidate();
	// adjust configurations
	sens_intval = sens_tmp_intval = 1;
	backup_Ti_intval = Ti_intval = Ti_tmp_intval = 1;
	backup_riseTime_intval = riseTime_intval = riseTime_tmp_intval = 200;
	cyclingOff_intval = cyclingOff_tmp_intval = 25;
	TiInspPause_intval = TiInspPause_tmp_intval = 0.2;
	backup_flowShape_intval = flowShape_tmp_intval = flowShape_intval = 100;
	Psupp_intval = Psupp_tmp_intval = 7;
	PSMax_intval = 20;
	weight_tmp_intval = weight_intval = 60;
	backup_PEEP_intval = EPAP_intval = CPAP_intval = PEEP_tmp_intval = PEEP_intval = 5;
	backup_PControl_intval = PControl_tmp_intval = PControl_intval = 7;
	IPAP_intval = 12;
	IPAPMax_intval =PControlMax_intval = 25;
	backup_RR_intval = RR_tmp_intval = RR_intval = 15;
	backup_VT_intval = VT_tmp_intval = VT_intval = 500;
	safetyVT_intval = SafetyVT_tmp_intval = 4;
	Ti_max_intval = 1.5;
	Ti_min_intval = 0.2;
	updateConfigsWildCards();
}

void screenView::click_pediatric()
{
	patientType_intval = 2;
	isLoading = true;
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	state = PATIENT_INFO;
	selector_ageChildSetting.setVisible(false);
	selector_ageChildSetting.invalidate();
	container_ageSetting.moveTo(263, container_ageSetting.getY());
	container_ageSetting.setVisible(false);
	container_ageSetting.invalidate();
	adult_image.setVisible(false);
	adult_image.invalidate();
	child_image.setVisible(true);
	child_image.invalidate();
	adult_patientInfo_image.setVisible(false);
	adult_patientInfo_image.invalidate();
	child_patientInfo_image.setVisible(true);
	child_patientInfo_image.invalidate();
	// adjust configurations
	sens_intval = sens_tmp_intval = 0.5;
	backup_Ti_intval = Ti_intval = Ti_tmp_intval = 0.6;
	backup_riseTime_intval = riseTime_intval = riseTime_tmp_intval = 200;
	cyclingOff_intval = cyclingOff_tmp_intval = 25;
	TiInspPause_intval = TiInspPause_tmp_intval = 0.2;
	backup_flowShape_intval = flowShape_tmp_intval = flowShape_intval = 100;
	Psupp_intval = Psupp_tmp_intval = 7;
	PSMax_intval = 20;
	weight_tmp_intval = weight_intval = 60;
	backup_PEEP_intval = EPAP_intval = CPAP_intval = PEEP_tmp_intval = PEEP_intval = 5;
	backup_PControl_intval = PControl_tmp_intval = PControl_intval = 7;
	IPAP_intval = 12;
	IPAPMax_intval =PControlMax_intval = 25;
	backup_RR_intval = RR_tmp_intval = RR_intval = 15;
	backup_VT_intval = VT_tmp_intval = VT_intval = 100;
	safetyVT_intval = SafetyVT_tmp_intval = 4;
	Ti_max_intval = 0.8;
	Ti_min_intval = 0.2;
	
	updateConfigsWildCards();
}

void screenView::click_ventSetting()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);

	
	VT_container_ventSetting.setVisible(false);
	VT_container_ventSetting.invalidate();
	RR_container_ventSetting.setVisible(false);
	RR_container_ventSetting.invalidate();
	SafetyVT_container_ventSetting.setVisible(false);
	SafetyVT_container_ventSetting.invalidate();
	PEEP_container_ventSetting.setVisible(false);
	PEEP_container_ventSetting.invalidate();
	FiO2_container_ventSetting.setVisible(false);
	FiO2_container_ventSetting.invalidate();
	Ti_container_ventSetting.setVisible(false);
	Ti_container_ventSetting.invalidate();
	TiInspPause_container_ventSetting.setVisible(false);
	TiInspPause_container_ventSetting.invalidate();
	sensitivity_container_ventSetting_1_1.setVisible(false);
	sensitivity_container_ventSetting_1_1.invalidate();
	trigger_container_ventSetting_1_1.setVisible(false);
	trigger_container_ventSetting_1_1.invalidate();

	
	container_ventilationSettingScreen.setVisible(true);
	container_ventilationSettingScreen.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	state = VENT_SETTING;
}
void screenView::click_patientInfo()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_patientInfoSetting.setVisible(true);
	container_patientInfoSetting.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	Unicode::snprintf(weight_valBuffer, WEIGHT_VAL_SIZE, "%d", (int)weight_intval);
	weight_val.setWildcard1(weight_valBuffer);
	weight_val.invalidate();
	state = PATIENT_INFO;
}

void screenView::click_trends()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_trendScreen.setVisible(true);
	container_trendScreen.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	
	if(alarmCount > 0)
	{
		container_noData.setVisible(false);
		container_noData.invalidate();
		trendShowSteps = 0;
		radioButtonGroupRecords.setSelected(radioButton_alarmRecords);
	}else
	{
		container_alarmRecords.setVisible(false);
		container_alarmRecords.invalidate();
		container_noData.setVisible(true);
		container_noData.invalidate();
	}
	trendShowSteps = 0;
	
	state = TRENDS_SCREEN;
}
void screenView::click_previous()
{
	if(container_alarmRecords.isVisible())
	{
		if(trendShowSteps > 10)
			trendShowSteps -= 10;
		else if(trendShowSteps > 0)
			trendShowSteps = 0;
		else return;
		click_alarmRecords();
	}
	else if(container_dataRecords.isVisible())
	{
		if(trendShowSteps > 4)
			trendShowSteps -= 4;
		else if(trendShowSteps > 0)
			trendShowSteps = 0;
		else return;
		click_dataRecords();
	}
}
void screenView::click_previous2x()
{
	if(container_alarmRecords.isVisible())
	{
		if(trendShowSteps > 50)
			trendShowSteps -= 50;
		else if(trendShowSteps > 0)
			trendShowSteps = 0;
		else return;
		click_alarmRecords();
	}
	else if(container_dataRecords.isVisible())
	{
		if(trendShowSteps > 20)
			trendShowSteps -= 20;
		else if(trendShowSteps > 0)
			trendShowSteps = 0;
		else return;
		click_dataRecords();
	}
}
void screenView::click_next()
{
	if(container_alarmRecords.isVisible())
	{
		if(alarmCount >= trendShowSteps+10)
			trendShowSteps += 10;
		else return;
		click_alarmRecords();
	}
	else if(container_dataRecords.isVisible())
	{
		if(dataCount >= trendShowSteps+4)
			trendShowSteps += 4;
		else return;
		click_dataRecords();
	}
	
}

void screenView::click_next2x()
{
	if(container_alarmRecords.isVisible())
	{
		if(alarmCount > trendShowSteps+50)
			trendShowSteps += 50;
		else if(alarmCount > trendShowSteps) trendShowSteps += (alarmCount-trendShowSteps - 1)/10 * 10; // /10*10-> first a multiplied of 10 then *10
		else return;
		click_alarmRecords();
	}
	else if(container_dataRecords.isVisible())
	{
		if(dataCount > trendShowSteps+20)
			trendShowSteps += 20;
		else if(dataCount > trendShowSteps) trendShowSteps += (dataCount-trendShowSteps-1)/4 * 4;
		else return;
		click_dataRecords();
	}
}
void screenView::click_alarmRecords()
{
	click_backDataGraphs();
	
	isLoading = true;
	selector_alarmRecords.setVisible(false);
	selector_alarmRecords.invalidate();
	container_alarmRecords.setVisible(true);
	container_alarmRecords.invalidate();
	if(container_dataRecords.isVisible())// if changing screen 
		trendShowSteps = 0;
	container_dataRecords.setVisible(false);
	container_dataRecords.invalidate();
	container_noData.setVisible(false);
	container_noData.invalidate();
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_dataRecords.invalidate();
	arb_text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_dataRecords.invalidate();
	text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_alarmRecords.invalidate();
	arb_text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_alarmRecords.invalidate();
	isAlarmTrend = true;
	
	//--------- start trenList
	createAlarmTrendList();
	//--------- end trenList
		
}
void screenView::createAlarmTrendList()
{
	if(alarmCount-trendShowSteps > 10)
	{
		for(int i = 0; i < 10; i++)
		{
			int reversedIndex = alarmCount - trendShowSteps - i - 1;
			
			Unicode::snprintf(alarmsIndex_buffers[i], 6, "%d", i+trendShowSteps+1);
			alarmsIndexesVector[i]->setWildcard1(alarmsIndex_buffers[i]);
			alarmsIndexesVector[i]->setVisible(true);
			alarmsIndexesVector[i]->invalidate();
			Unicode::snprintf(alarmsTime_buffers1[i], 12, "20%d-%02d-%02d", trendAlarmValues[reversedIndex][27], trendAlarmValues[reversedIndex][28],trendAlarmValues[reversedIndex][29]);
			alarmsTimeVector[i]->setWildcard1(alarmsTime_buffers1[i]);
			Unicode::snprintf(alarmsTime_buffers2[i], 8, "%02d:%02d", trendAlarmValues[reversedIndex][25], trendAlarmValues[reversedIndex][26]);
			alarmsTimeVector[i]->setWildcard2(alarmsTime_buffers2[i]);
			alarmsTimeVector[i]->setVisible(true);
			alarmsTimeVector[i]->invalidate();				
			for (int j = 0; j < 24; j++) 
			{
				alarmsContent_buffers[i][j] = static_cast<Unicode::UnicodeChar>(trendAlarmValues[reversedIndex][j]);
			}

			alarmsContentVector[i]->setWildcard1(alarmsContent_buffers[i]);
			alarmsContentVector[i]->resizeToCurrentText();
			alarmsContentVector[i]->setVisible(true);
			alarmsContentVector[i]->invalidate();
		}
	}
	else if(alarmCount-trendShowSteps > 0) 
	{
		for(int i = 0; i < 10; i++)
		{
			int reversedIndex = alarmCount - trendShowSteps - i - 1;
			
			if(i+trendShowSteps+1 > alarmCount)
			{
				Unicode::snprintf(alarmsIndex_buffers[i], 6, "      ");
				Unicode::snprintf(alarmsTime_buffers1[i], 12, "            ");
				Unicode::snprintf(alarmsTime_buffers2[i], 8, "         ");
				for (int j = 0; j < 24; j++) 
				{
					alarmsContent_buffers[i][j] = static_cast<Unicode::UnicodeChar>(' ');
				}
			}
			else
			{
				Unicode::snprintf(alarmsIndex_buffers[i], 6, "%d", i+trendShowSteps+1);
				Unicode::snprintf(alarmsTime_buffers1[i], 12, "20%d-%02d-%02d", trendAlarmValues[reversedIndex][27], trendAlarmValues[reversedIndex][28],trendAlarmValues[reversedIndex][29]);
				Unicode::snprintf(alarmsTime_buffers2[i], 8, "%02d:%02d", trendAlarmValues[reversedIndex][25], trendAlarmValues[reversedIndex][26]);
				for (int j = 0; j < 24; j++) 
				{
					alarmsContent_buffers[i][j] = static_cast<Unicode::UnicodeChar>(trendAlarmValues[reversedIndex][j]);
				}
				
			}
			alarmsIndexesVector[i]->setWildcard1(alarmsIndex_buffers[i]);
			alarmsIndexesVector[i]->setVisible(true);
			alarmsIndexesVector[i]->invalidate();
			
			alarmsTimeVector[i]->setWildcard1(alarmsTime_buffers1[i]);
			alarmsTimeVector[i]->setWildcard2(alarmsTime_buffers2[i]);
			alarmsTimeVector[i]->setVisible(true);
			alarmsTimeVector[i]->invalidate();
			
			alarmsContentVector[i]->setWildcard1(alarmsContent_buffers[i]);
			alarmsContentVector[i]->setVisible(true);
			alarmsContentVector[i]->invalidate();
		}
	}
	else
	{
		container_alarmRecords.setVisible(false);
		container_alarmRecords.invalidate();
		container_noData.setVisible(true);
		container_noData.invalidate();
	}	
}
void screenView::click_dataRecords()
{
	isLoading = true;
	selector_dataRecords.setVisible(false);
	selector_dataRecords.invalidate();
	container_dataRecords.setVisible(true);
	container_dataRecords.invalidate();
	if(container_alarmRecords.isVisible()) 
		trendShowSteps = 0;
	container_alarmRecords.setVisible(false);
	container_alarmRecords.invalidate();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_alarmRecords.invalidate();
	arb_text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_alarmRecords.invalidate();
	text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_dataRecords.invalidate();
	arb_text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_dataRecords.invalidate();
	isAlarmTrend = false;
	
	// create data list
	load_trendData_last4n();
	createDataTrendList();
	// ----------------
	
}
void screenView::createDataTrendList()
{
	if(dataCount-trendShowSteps > 4)
	{
		for(int i = 0; i < 4; i++)
		{
			int reversedIndex;
			if(dataCount>4) reversedIndex = 4 - i - 1;
			else reversedIndex = dataCount - i - 1;
			
			Unicode::snprintf(dataTime_buffers1[i], 12, "20%d-%02d-%02d", trendDataValues[reversedIndex][3], trendDataValues[reversedIndex][4],trendDataValues[reversedIndex][5]);
			Unicode::snprintf(dataTime_buffers2[i], 8, "%02d:%02d", trendDataValues[reversedIndex][1], trendDataValues[reversedIndex][2]);		
			Unicode::strncpy(dataMode_buffers[i], convertIdToMode(trendDataValues[reversedIndex][0]), 10);		
			//memcpy(dataMode_buffers[i], convertIdToMode(trendDataValues[reversedIndex][0]), 10);
			
			dataTimeVector[i]->setWildcard1(dataTime_buffers1[i]);
			dataTimeVector[i]->setWildcard2(dataTime_buffers2[i]);
			dataTimeVector[i]->setVisible(true);
			dataTimeVector[i]->invalidate();		
			
			dataModeVector[i]->setWildcard1(dataMode_buffers[i]);
			dataModeVector[i]->setVisible(true);
			dataModeVector[i]->invalidate();
			
		}
	}
	else if(dataCount-trendShowSteps > 0) 
	{
		for(int i = 0; i < 4; i++)
		{
			int reversedIndex = dataCount - trendShowSteps - i - 1;
			
			if(i+trendShowSteps+1 > dataCount)
			{
				Unicode::snprintf(dataTime_buffers1[i], 12, "            ");
				Unicode::snprintf(dataTime_buffers2[i], 8, "         ");
				Unicode::snprintf(dataMode_buffers[i], 10, "           ");
//				for (int j = 0; j < 10; j++) 
//				{
//					dataMode_buffers[i][j] = static_cast<Unicode::UnicodeChar>(' ');
//				}
			}
			else
			{
				Unicode::snprintf(dataTime_buffers1[i], 12, "20%d-%02d-%02d", trendDataValues[reversedIndex][3], trendDataValues[reversedIndex][4],trendDataValues[reversedIndex][5]);
				Unicode::snprintf(dataTime_buffers2[i], 8, "%02d:%02d", trendDataValues[reversedIndex][1], trendDataValues[reversedIndex][2]);
				Unicode::strncpy(dataMode_buffers[i], convertIdToMode(trendDataValues[reversedIndex][0]), 10);		
				//memcpy(dataMode_buffers[i], convertIdToMode(trendDataValues[reversedIndex][0]), 10);
				
			}
			
			dataTimeVector[i]->setWildcard1(dataTime_buffers1[i]);
			dataTimeVector[i]->setWildcard2(dataTime_buffers2[i]);
			dataTimeVector[i]->setVisible(true);
			dataTimeVector[i]->invalidate();
			
			dataModeVector[i]->setWildcard1(dataMode_buffers[i]);
			dataModeVector[i]->setVisible(true);
			dataModeVector[i]->invalidate();
		}
	}
	else
	{
		container_dataRecords.setVisible(false);
		container_dataRecords.invalidate();
		container_noData.setVisible(true);
		container_noData.invalidate();
	}	
}
char* screenView::convertIdToMode(uint8_t id)
{
	switch(id)
	{
		case 0:
		{
			return (char*)"BAD-Data ";
		}
		case 1:
		{
			return (char*)"CMV-VCV  ";
		}
		case 2:
		{
			return (char*)"CMV-PCV  ";
		}
		case 3:
		{
			return (char*)"AC-VCV   ";
		}
		case 4:
		{
			return (char*)"AC-PCV   ";
		}
		case 5:
		{
			return (char*)"SIMV-VC  ";
		}
		case 6:
		{
			return (char*)"SIMV-PC  ";
		}
		case 7:
		{
			return (char*)"CPAP     ";
		}
		case 8:
		{
			return (char*)"BIPAP    ";
		}
		case 9:
		{
			return (char*)"NFCD-VC  ";
		}
		case 10:
		{
			return (char*)"NFCD-PC  ";
		}
		default:
			return (char*)"Eror...";
	}
}
void screenView::click_dataButton1()
{
	// hide buttons and next/previous steps
	container_dataLists.setVisible(false);
	container_dataLists.invalidate();
	container_trendSteps.setVisible(false);
	container_trendSteps.invalidate();
	// show return button
	back_dataGraphs.setVisible(true);
	back_dataGraphs.invalidate();
	
	// reset graphs
	data_graph_v.clear();
	data_graph_flow.clear();
	data_graph_p.clear();
	
	//add values grpahs
	int vt_max=0;
	float flow_min=100;
	float flow_max=0;;
	float pressure_max=0;
	for(int i = 6; i<2006; i+=10)
	{
		int vt;
		float flow;
		float pressure;
		memcpy(&vt, trendDataValues[0]+ i, sizeof(int));
		memcpy(&flow, trendDataValues[0]+ i + 2, sizeof(float));
		memcpy(&pressure, trendDataValues[0]+ i + 6, sizeof(float));
		data_graph_v.addDataPoint(vt);
		if(vt>vt_max) vt_max = vt;
		data_graph_flow.addDataPoint(flow);
		if(flow>flow_max) flow_max = flow;
		if(flow<flow_min) flow_min = flow;
		data_graph_p.addDataPoint(pressure);
		if(pressure>pressure_max) pressure_max = pressure;
	}
	data_graph_v.setVisible(true);
	data_graph_flow.setVisible(true);
	data_graph_p.setVisible(true);
	container_graphFLines_1.setVisible(true);
	container_graphVLines_1.setVisible(true);
	container_graphPLines_1.setVisible(true);
	
	// scaled
	//volume
	if(vt_max+10<=250) data_graph_v.setGraphRangeY(0, 250);
	else if(vt_max+10<=500) data_graph_v.setGraphRangeY(0, 500);
	else if(vt_max+10<=750) data_graph_v.setGraphRangeY(0, 750);
	else if(vt_max+10<=1000) data_graph_v.setGraphRangeY(0, 1000);
	else if(vt_max+10<=1250) data_graph_v.setGraphRangeY(0, 1250);
	else if(vt_max+10<=1500) data_graph_v.setGraphRangeY(0, 1500);
	else if(vt_max+10<=1750) data_graph_v.setGraphRangeY(0, 1750);
	else data_graph_v.setGraphRangeY(0, 2000);
	//flow
	if(flow_max+5<=25 && flow_min-5 <= 25) data_graph_flow.setGraphRangeY(-25, 25);
	else if(flow_max+5<=50 && flow_min-5 <= 50) data_graph_flow.setGraphRangeY(-50, 50);
	else if(flow_max+5<=75 && flow_min-5 <= 75) data_graph_flow.setGraphRangeY(-75, 75);
	else if(flow_max+5<=100 && flow_min-5 <= 100) data_graph_flow.setGraphRangeY(-100, 100);
	else if(flow_max+5<=125 && flow_min-5 <= 125) data_graph_flow.setGraphRangeY(-125, 125);
	else data_graph_flow.setGraphRangeY(-150, 150);
	//pressure
	if(pressure_max+5<=15) data_graph_p.setGraphRangeY(0, 15);
	else if(pressure_max+5<=30) data_graph_p.setGraphRangeY(0, 30);
	else if(pressure_max+5<=45) data_graph_p.setGraphRangeY(0, 45);
	else if(pressure_max+5<=60) data_graph_p.setGraphRangeY(0, 60);
	else data_graph_p.setGraphRangeY(0, 75);				
	// ------
	
	container_graphFLines_1.invalidate();
	container_graphVLines_1.invalidate();
	container_graphPLines_1.invalidate();
	data_graph_v.invalidate();
	data_graph_flow.invalidate();
	data_graph_p.invalidate();
	
}
void screenView::click_dataButton2()
{
	// hide buttons and next/previous steps
	container_dataLists.setVisible(false);
	container_dataLists.invalidate();
	container_trendSteps.setVisible(false);
	container_trendSteps.invalidate();
	// show return button
	back_dataGraphs.setVisible(true);
	back_dataGraphs.invalidate();
	
	// reset graphs
	data_graph_v.clear();
	data_graph_flow.clear();
	data_graph_p.clear();
	
	int vt_max=0;
	float flow_min=100;
	float flow_max=0;;
	float pressure_max=0;
	//add values grpahs
	for(int i = 6; i<2006; i+=10)
	{
		int vt;
		float flow;
		float pressure;
		memcpy(&vt, trendDataValues[1]+ i, sizeof(int));
		memcpy(&flow, trendDataValues[1]+ i + 2, sizeof(float));
		memcpy(&pressure, trendDataValues[1]+ i + 6, sizeof(float));
		data_graph_v.addDataPoint(vt);
		if(vt>vt_max) vt_max = vt;
		data_graph_flow.addDataPoint(flow);
		if(flow>flow_max) flow_max = flow;
		if(flow<flow_min) flow_min = flow;
		data_graph_p.addDataPoint(pressure);
		if(pressure>pressure_max) pressure_max = pressure;
	}
	data_graph_v.setVisible(true);
	data_graph_flow.setVisible(true);
	data_graph_p.setVisible(true);
	container_graphFLines_1.setVisible(true);
	container_graphVLines_1.setVisible(true);
	container_graphPLines_1.setVisible(true);
	// scaled
	//volume
	if(vt_max+10<=250) data_graph_v.setGraphRangeY(0, 250);
	else if(vt_max+10<=500) data_graph_v.setGraphRangeY(0, 500);
	else if(vt_max+10<=750) data_graph_v.setGraphRangeY(0, 750);
	else if(vt_max+10<=1000) data_graph_v.setGraphRangeY(0, 1000);
	else if(vt_max+10<=1250) data_graph_v.setGraphRangeY(0, 1250);
	else if(vt_max+10<=1500) data_graph_v.setGraphRangeY(0, 1500);
	else if(vt_max+10<=1750) data_graph_v.setGraphRangeY(0, 1750);
	else data_graph_v.setGraphRangeY(0, 2000);
	//flow
	if(flow_max+5<=25 && flow_min-5 <= 25) data_graph_flow.setGraphRangeY(-25, 25);
	else if(flow_max+5<=50 && flow_min-5 <= 50) data_graph_flow.setGraphRangeY(-50, 50);
	else if(flow_max+5<=75 && flow_min-5 <= 75) data_graph_flow.setGraphRangeY(-75, 75);
	else if(flow_max+5<=100 && flow_min-5 <= 100) data_graph_flow.setGraphRangeY(-100, 100);
	else if(flow_max+5<=125 && flow_min-5 <= 125) data_graph_flow.setGraphRangeY(-125, 125);
	else data_graph_flow.setGraphRangeY(-150, 150);
	//pressure
	if(pressure_max+5<=15) data_graph_p.setGraphRangeY(0, 15);
	else if(pressure_max+5<=30) data_graph_p.setGraphRangeY(0, 30);
	else if(pressure_max+5<=45) data_graph_p.setGraphRangeY(0, 45);
	else if(pressure_max+5<=60) data_graph_p.setGraphRangeY(0, 60);
	else data_graph_p.setGraphRangeY(0, 75);				
	// ------
	
	
	container_graphFLines_1.invalidate();
	container_graphVLines_1.invalidate();
	container_graphPLines_1.invalidate();
	data_graph_v.invalidate();
	data_graph_flow.invalidate();
	data_graph_p.invalidate();
}
void screenView::click_dataButton3()
{
	// hide buttons and next/previous steps
	container_dataLists.setVisible(false);
	container_dataLists.invalidate();
	container_trendSteps.setVisible(false);
	container_trendSteps.invalidate();
	// show return button
	back_dataGraphs.setVisible(true);
	back_dataGraphs.invalidate();
	
	// reset graphs
	data_graph_v.clear();
	data_graph_flow.clear();
	data_graph_p.clear();
	
	int vt_max=0;
	float flow_min=100;
	float flow_max=0;;
	float pressure_max=0;
	//add values grpahs
	for(int i = 6; i<2006; i+=10)
	{
		int vt;
		float flow;
		float pressure;
		memcpy(&vt, trendDataValues[2]+ i, sizeof(int));
		memcpy(&flow, trendDataValues[2]+ i + 2, sizeof(float));
		memcpy(&pressure, trendDataValues[2]+ i + 6, sizeof(float));
		data_graph_v.addDataPoint(vt);
		if(vt>vt_max) vt_max = vt;
		data_graph_flow.addDataPoint(flow);
		if(flow>flow_max) flow_max = flow;
		if(flow<flow_min) flow_min = flow;
		data_graph_p.addDataPoint(pressure);
		if(pressure>pressure_max) pressure_max = pressure;
	}
	data_graph_v.setVisible(true);
	data_graph_flow.setVisible(true);
	data_graph_p.setVisible(true);
	container_graphFLines_1.setVisible(true);
	container_graphVLines_1.setVisible(true);
	container_graphPLines_1.setVisible(true);
	// scaled
	//volume
	if(vt_max+10<=250) data_graph_v.setGraphRangeY(0, 250);
	else if(vt_max+10<=500) data_graph_v.setGraphRangeY(0, 500);
	else if(vt_max+10<=750) data_graph_v.setGraphRangeY(0, 750);
	else if(vt_max+10<=1000) data_graph_v.setGraphRangeY(0, 1000);
	else if(vt_max+10<=1250) data_graph_v.setGraphRangeY(0, 1250);
	else if(vt_max+10<=1500) data_graph_v.setGraphRangeY(0, 1500);
	else if(vt_max+10<=1750) data_graph_v.setGraphRangeY(0, 1750);
	else data_graph_v.setGraphRangeY(0, 2000);
	//flow
	if(flow_max+5<=25 && flow_min-5 <= 25) data_graph_flow.setGraphRangeY(-25, 25);
	else if(flow_max+5<=50 && flow_min-5 <= 50) data_graph_flow.setGraphRangeY(-50, 50);
	else if(flow_max+5<=75 && flow_min-5 <= 75) data_graph_flow.setGraphRangeY(-75, 75);
	else if(flow_max+5<=100 && flow_min-5 <= 100) data_graph_flow.setGraphRangeY(-100, 100);
	else if(flow_max+5<=125 && flow_min-5 <= 125) data_graph_flow.setGraphRangeY(-125, 125);
	else data_graph_flow.setGraphRangeY(-150, 150);
	//pressure
	if(pressure_max+5<=15) data_graph_p.setGraphRangeY(0, 15);
	else if(pressure_max+5<=30) data_graph_p.setGraphRangeY(0, 30);
	else if(pressure_max+5<=45) data_graph_p.setGraphRangeY(0, 45);
	else if(pressure_max+5<=60) data_graph_p.setGraphRangeY(0, 60);
	else data_graph_p.setGraphRangeY(0, 75);				
	// ------
	
	container_graphFLines_1.invalidate();
	container_graphVLines_1.invalidate();
	container_graphPLines_1.invalidate();
	data_graph_v.invalidate();
	data_graph_flow.invalidate();
	data_graph_p.invalidate();
}
void screenView::click_dataButton4()
{
	// hide buttons and next/previous steps
	container_dataLists.setVisible(false);
	container_dataLists.invalidate();
	container_trendSteps.setVisible(false);
	container_trendSteps.invalidate();
	// show return button
	back_dataGraphs.setVisible(true);
	back_dataGraphs.invalidate();
	
	// reset graphs
	data_graph_v.clear();
	data_graph_flow.clear();
	data_graph_p.clear();
	
	int vt_max=0;
	float flow_min=100;
	float flow_max=0;;
	float pressure_max=0;
	//add values grpahs
	for(int i = 6; i<2006; i+=10)
	{
		int vt;
		float flow;
		float pressure;
		memcpy(&vt, trendDataValues[3]+ i, sizeof(int));
		memcpy(&flow, trendDataValues[3]+ i + 2, sizeof(float));
		memcpy(&pressure, trendDataValues[3]+ i + 6, sizeof(float));
		data_graph_v.addDataPoint(vt);
		if(vt>vt_max) vt_max = vt;
		data_graph_flow.addDataPoint(flow);
		if(flow>flow_max) flow_max = flow;
		if(flow<flow_min) flow_min = flow;
		data_graph_p.addDataPoint(pressure);
		if(pressure>pressure_max) pressure_max = pressure;
	}
	data_graph_v.setVisible(true);
	data_graph_flow.setVisible(true);
	data_graph_p.setVisible(true);
	container_graphFLines_1.setVisible(true);
	container_graphVLines_1.setVisible(true);
	container_graphPLines_1.setVisible(true);
	// scaled
	//volume
	if(vt_max+10<=250) data_graph_v.setGraphRangeY(0, 250);
	else if(vt_max+10<=500) data_graph_v.setGraphRangeY(0, 500);
	else if(vt_max+10<=750) data_graph_v.setGraphRangeY(0, 750);
	else if(vt_max+10<=1000) data_graph_v.setGraphRangeY(0, 1000);
	else if(vt_max+10<=1250) data_graph_v.setGraphRangeY(0, 1250);
	else if(vt_max+10<=1500) data_graph_v.setGraphRangeY(0, 1500);
	else if(vt_max+10<=1750) data_graph_v.setGraphRangeY(0, 1750);
	else data_graph_v.setGraphRangeY(0, 2000);
	//flow
	if(flow_max+5<=25 && flow_min-5 <= 25) data_graph_flow.setGraphRangeY(-25, 25);
	else if(flow_max+5<=50 && flow_min-5 <= 50) data_graph_flow.setGraphRangeY(-50, 50);
	else if(flow_max+5<=75 && flow_min-5 <= 75) data_graph_flow.setGraphRangeY(-75, 75);
	else if(flow_max+5<=100 && flow_min-5 <= 100) data_graph_flow.setGraphRangeY(-100, 100);
	else if(flow_max+5<=125 && flow_min-5 <= 125) data_graph_flow.setGraphRangeY(-125, 125);
	else data_graph_flow.setGraphRangeY(-150, 150);
	//pressure
	if(pressure_max+5<=15) data_graph_p.setGraphRangeY(0, 15);
	else if(pressure_max+5<=30) data_graph_p.setGraphRangeY(0, 30);
	else if(pressure_max+5<=45) data_graph_p.setGraphRangeY(0, 45);
	else if(pressure_max+5<=60) data_graph_p.setGraphRangeY(0, 60);
	else data_graph_p.setGraphRangeY(0, 75);				
	// ------
	
	container_graphFLines_1.invalidate();
	container_graphVLines_1.invalidate();
	container_graphPLines_1.invalidate();
	data_graph_v.invalidate();
	data_graph_flow.invalidate();
	data_graph_p.invalidate();
}
void screenView::click_backDataGraphs()
{
	container_dataLists.setVisible(true);
	container_dataLists.invalidate();
	container_trendSteps.setVisible(true);
	container_trendSteps.invalidate();
	
	data_graph_v.setVisible(false);
	data_graph_flow.setVisible(false);
	data_graph_p.setVisible(false);
	container_graphFLines_1.setVisible(false);
	container_graphVLines_1.setVisible(false);
	container_graphPLines_1.setVisible(false);
	
	container_graphFLines_1.invalidate();
	container_graphVLines_1.invalidate();
	container_graphPLines_1.invalidate();
	
	data_graph_v.invalidate();
	data_graph_flow.invalidate();
	data_graph_p.invalidate();
	
	back_dataGraphs.setVisible(false);
	back_dataGraphs.invalidate();
}
void screenView::click_nextPageAlarm()
{
	container_alarmSettingScreen.setVisible(false);
	container_alarmSettingScreen.invalidate();
	container_alarmSettingScreenNext.setVisible(true);
	container_alarmSettingScreenNext.invalidate();
	
	pressKey=0;
	key1 = 0;
	encoderCounter = key1*4 + 1;
	__HAL_TIM_SetCounter(&htim3, encoderCounter);
	
	state = ALARM_NEXTPAGE;
}
void screenView::click_previousPageAlarm()
{
	container_alarmSettingScreen.setVisible(true);
	container_alarmSettingScreen.invalidate();
	container_alarmSettingScreenNext.setVisible(false);
	container_alarmSettingScreenNext.invalidate();
	
	pressKey=0;
	key1 = 0;
	encoderCounter = key1*4 + 1;
	__HAL_TIM_SetCounter(&htim3, encoderCounter);
	
	state = ALARM;
}
void screenView::click_heightButton()
{
	pressKey = 0;
	if (!selector_heightPatientSetting.isVisible())
	{
		selector_heightPatientSetting.setVisible(true);
		selector_heightPatientSetting.invalidate();
	}
	if (selector_ageSetting.isVisible())
	{
		selector_ageSetting.setVisible(false);
		selector_ageSetting.invalidate();
	}
	if (selector_backPatientInfoSetting.isVisible())
	{
		selector_backPatientInfoSetting.setVisible(false);
		selector_backPatientInfoSetting.invalidate();
	}

	if (!weight_bigVal.isVisible())
	{
		if (container_ageSetting.getX() != 263)
		{
			if (adult_patientInfo_image.isVisible())
				click_adult();
			else
				click_pediatric();
		}

		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		weight_val.setVisible(false);
		weight_val.invalidate();
		weight_bigVal.setVisible(true);
		weight_bigVal.invalidate();
		weight_tmp_intval = weight_intval;
		Unicode::snprintf(weight_bigValBuffer, WEIGHT_BIGVAL_SIZE, "%d", (int)weight_tmp_intval);
		weight_bigVal.setWildcard1(weight_bigValBuffer);
		weight_bigVal.invalidate();
		state = WEIGHT;
	}
	else if (weight_bigVal.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		if (selector_heightPatientSetting.isVisible())
		{
			selector_heightPatientSetting.setVisible(false);
			selector_heightPatientSetting.invalidate();
		}
		weight_bigVal.setVisible(false);
		weight_bigVal.invalidate();
		weight_val.setVisible(true);
		weight_val.invalidate();
		
		lastState = PATIENT_INFO;
		lastButton = WEIGHT_BUTTON;
		showAlert();
	}
}
void screenView::click_device()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_deviceSettingScreen.setVisible(true);
	container_deviceSettingScreen.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	state = DEVICE;
}

void screenView::click_deviceInfo()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);

	Unicode::snprintf(ventHours_valBuffer, VENTHOURS_VAL_SIZE, "%d", (int)vent_hours[0]);
	ventHours_val.setWildcard1(ventHours_valBuffer);
	ventHours_val.invalidate();

	container_deviceInfoScreen.setVisible(true);
	container_deviceInfoScreen.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	state = DEVICEINFO;
}
void screenView::click_circuitSetting()
{
	lastState = SETTING;
	lastButton = CIRCUITSETTING_BUTTON;
	showAlert();
}

void screenView::click_backupSetting()
{
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	if(backupMode_intval==1 || backupMode_intval==2)
	{
		if(!VC_backupMode_val.isVisible())
		{
			VC_backupMode_val.setVisible(true);
			VC_backupMode_val.invalidate();
			PC_backupMode_val.setVisible(false);
			PC_backupMode_val.invalidate();
			AlarmOnly_backupMode_val.setVisible(false);
			AlarmOnly_backupMode_val.invalidate();
		}
		else if(!PC_backupMode_val.isVisible())
		{
			VC_backupMode_val.setVisible(false);
			VC_backupMode_val.invalidate();
			PC_backupMode_val.setVisible(true);
			PC_backupMode_val.invalidate();
			AlarmOnly_backupMode_val.setVisible(false);
			AlarmOnly_backupMode_val.invalidate();
		}
		container_backupConfig.setVisible(true);
		container_backupConfig.invalidate();
	}
	else if(backupMode_intval==0)
	{
		if(!AlarmOnly_backupMode_val.isVisible())
		{
			VC_backupMode_val.setVisible(false);
			VC_backupMode_val.invalidate();
			PC_backupMode_val.setVisible(false);
			PC_backupMode_val.invalidate();
			AlarmOnly_backupMode_val.setVisible(true);
			AlarmOnly_backupMode_val.invalidate();
		}
		container_backupConfig.setVisible(false);
		container_backupConfig.invalidate();
	}
	container_backupScreen.setVisible(true);
	container_backupScreen.invalidate();
	container_alarmSettingScreen.setVisible(false);
	container_alarmSettingScreen.invalidate();
	state = BACKUP;
}

void screenView::click_backupModes()
{
	pressKey = 0;
	// invisible chooses
	if(selector_backBackupScreen.isVisible())
	{
		selector_backBackupScreen.setVisible(false);
		selector_backBackupScreen.invalidate();
	}
	if(!selector_backupMode.isVisible())
	{
		selector_backupMode.setVisible(true);
		selector_backupMode.invalidate();
	}
	if(selector_backupApnea.isVisible())
	{
		selector_backupApnea.setVisible(false);
		selector_backupApnea.invalidate();
	}
	if(selector_apneaDetection.isVisible())
	{
		selector_apneaDetection.setVisible(false);
		selector_apneaDetection.invalidate();
	}
	if(selector_backupConfig.isVisible())
	{
		selector_backupConfig.setVisible(false);
		selector_backupConfig.invalidate();
	}
	// disable big ones
	if(apneaTime_backupModeBigVal.isVisible())
	{
		apneaTime_backupModeBigVal.setVisible(false);
		apneaTime_backupModeBigVal.invalidate();
		apneaTime_backupModeVal.setVisible(true);
		apneaTime_backupModeVal.invalidate();
	}
	if(noBreath_backupMode_bigVal.isVisible() || noSpontBreath_backupMode_bigVal.isVisible())
	{
		noBreath_backupMode_bigVal.setVisible(false);
		noBreath_backupMode_bigVal.invalidate();
		noSpontBreath_backupMode_bigVal.setVisible(false);
		noSpontBreath_backupMode_bigVal.invalidate();
		if(apneaDetection_intval==1)
		{
			noBreath_backupMode_val.setVisible(true);
			noBreath_backupMode_val.invalidate();
		}
		else if(apneaDetection_intval==2)
		{
			noSpontBreath_backupMode_val.setVisible(true);
			noSpontBreath_backupMode_val.invalidate();
		}
	}
	
	switch((int)backupMode_intval)
	{
		case 0: //alarm only
		{
			if(AlarmOnly_backupMode_val.isVisible())
			{
				AlarmOnly_backupMode_bigVal.setVisible(true);
				AlarmOnly_backupMode_bigVal.invalidate();
				AlarmOnly_backupMode_val.setVisible(false);
				AlarmOnly_backupMode_val.invalidate();
				
				key1=0;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = BACKUP_MODE;
			}
			else if(AlarmOnly_backupMode_bigVal.isVisible())
			{
				AlarmOnly_backupMode_bigVal.setVisible(false);
				AlarmOnly_backupMode_bigVal.invalidate();
				AlarmOnly_backupMode_val.setVisible(true);
				AlarmOnly_backupMode_val.invalidate();
				
				container_backupConfig.setVisible(false);
				container_backupConfig.invalidate();
				
				key1=2;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);				
				state = BACKUP;
			}
			
			break;
		}
		
		case 1: //vcv
		{
			if(VC_backupMode_val.isVisible())
			{
				VC_backupMode_bigVal.setVisible(true);
				VC_backupMode_bigVal.invalidate();
				VC_backupMode_val.setVisible(false);
				VC_backupMode_val.invalidate();
				
				key1=1;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = BACKUP_MODE;
			}
			else if(VC_backupMode_bigVal.isVisible())
			{
				VC_backupMode_bigVal.setVisible(false);
				VC_backupMode_bigVal.invalidate();
				VC_backupMode_val.setVisible(true);
				VC_backupMode_val.invalidate();
				
				container_backupConfig.setVisible(true);
				container_backupConfig.invalidate();
				
				key1=2;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);				
				state = BACKUP;
			}
			
			break;
		}
		case 2: //pcv
		{
			if(PC_backupMode_val.isVisible())
			{
				PC_backupMode_bigVal.setVisible(true);
				PC_backupMode_bigVal.invalidate();
				PC_backupMode_val.setVisible(false);
				PC_backupMode_val.invalidate();
				
				key1=2;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = BACKUP_MODE;
			}
			else if(PC_backupMode_bigVal.isVisible())
			{
				PC_backupMode_bigVal.setVisible(false);
				PC_backupMode_bigVal.invalidate();
				PC_backupMode_val.setVisible(true);
				PC_backupMode_val.invalidate();
				
				container_backupConfig.setVisible(true);
				container_backupConfig.invalidate();
				
				key1=2;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = BACKUP;
			}
			
			break;
		}	
	}
}
void screenView::click_backBackupModeScreen()
{
	disableBackupModeChooses();
	if(selector_backBackupModesScreen.isVisible())
	{
		selector_backBackupModesScreen.setVisible(false);
		selector_backBackupModesScreen.invalidate();		
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_backupScreen.setVisible(true);
	container_backupScreen.invalidate();
	container_backupModesScreens.setVisible(false);
	container_backupModesScreens.invalidate();
	
	state = BACKUP;
}
void screenView::click_backupConfigs()
{
	pressKey = 0;
	// invisible chooses
	if(selector_backBackupScreen.isVisible())
	{
		selector_backBackupScreen.setVisible(false);
		selector_backBackupScreen.invalidate();
	}
	if(!selector_backupMode.isVisible())
	{
		selector_backupMode.setVisible(true);
		selector_backupMode.invalidate();
	}
	if(selector_backupApnea.isVisible())
	{
		selector_backupApnea.setVisible(false);
		selector_backupApnea.invalidate();
	}
	if(selector_apneaDetection.isVisible())
	{
		selector_apneaDetection.setVisible(false);
		selector_apneaDetection.invalidate();
	}
	if(selector_backupConfig.isVisible())
	{
		selector_backupConfig.setVisible(false);
		selector_backupConfig.invalidate();
	}
	// disable big ones
	if(apneaTime_backupModeBigVal.isVisible())
	{
		apneaTime_backupModeBigVal.setVisible(false);
		apneaTime_backupModeBigVal.invalidate();
		apneaTime_backupModeVal.setVisible(true);
		apneaTime_backupModeVal.invalidate();
	}
	else if(PC_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible() || AlarmOnly_backupMode_bigVal.isVisible())
	{
		AlarmOnly_backupMode_bigVal.setVisible(false);
		AlarmOnly_backupMode_bigVal.invalidate();
		PC_backupMode_bigVal.setVisible(false);
		PC_backupMode_bigVal.invalidate();
		VC_backupMode_bigVal.setVisible(false);
		VC_backupMode_bigVal.invalidate();
		if(backupMode_intval==0)
		{
			AlarmOnly_backupMode_val.setVisible(true);
			AlarmOnly_backupMode_val.invalidate();
		}
		else if(backupMode_intval==1)
		{
			VC_backupMode_val.setVisible(true);
			VC_backupMode_val.invalidate();
		}
		else if(backupMode_intval==2)
		{
			PC_backupMode_val.setVisible(true);
			PC_backupMode_val.invalidate();
		}
	}
	
	container_backupScreen.setVisible(false);
	container_backupScreen.invalidate();
	container_backupModesScreens.setVisible(true);
	container_backupModesScreens.invalidate();
	if(backupMode_intval==1)
	{
		ACVCV_backupModetxt.setVisible(true);
		ACVCV_backupModetxt.invalidate();
		ACPCV_backupModetxt.setVisible(false);
		ACPCV_backupModetxt.invalidate();
	}
	else if(backupMode_intval==2)
	{
		ACVCV_backupModetxt.setVisible(false);
		ACVCV_backupModetxt.invalidate();
		ACPCV_backupModetxt.setVisible(true);
		ACPCV_backupModetxt.invalidate();
	}
	
	key1 = tmp = 0;
	encoderCounter = key1*4+1;
	__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	state = BACKUP_MODESCREEN;
	
}
void screenView::click_apneaDetection()
{
	pressKey = 0;
	// invisible chooses
	if(selector_backBackupScreen.isVisible())
	{
		selector_backBackupScreen.setVisible(false);
		selector_backBackupScreen.invalidate();
	}
	if(selector_backupMode.isVisible())
	{
		selector_backupMode.setVisible(false);
		selector_backupMode.invalidate();
	}
	if(selector_backupApnea.isVisible())
	{
		selector_backupApnea.setVisible(false);
		selector_backupApnea.invalidate();
	}
	if(!selector_apneaDetection.isVisible())
	{
		selector_apneaDetection.setVisible(true);
		selector_apneaDetection.invalidate();
	}
	if(selector_backupConfig.isVisible())
	{
		selector_backupConfig.setVisible(false);
		selector_backupConfig.invalidate();
	}
	// disable big ones
	if(apneaTime_backupModeBigVal.isVisible())
	{
		apneaTime_backupModeBigVal.setVisible(false);
		apneaTime_backupModeBigVal.invalidate();
		apneaTime_backupModeVal.setVisible(true);
		apneaTime_backupModeVal.invalidate();
	}
	if(PC_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible() || AlarmOnly_backupMode_bigVal.isVisible())
	{
		AlarmOnly_backupMode_bigVal.setVisible(false);
		AlarmOnly_backupMode_bigVal.invalidate();
		PC_backupMode_bigVal.setVisible(false);
		PC_backupMode_bigVal.invalidate();
		VC_backupMode_bigVal.setVisible(false);
		VC_backupMode_bigVal.invalidate();
		if(backupMode_intval==0)
		{
			AlarmOnly_backupMode_val.setVisible(true);
			AlarmOnly_backupMode_val.invalidate();
		}
		else if(backupMode_intval==1)
		{
			VC_backupMode_val.setVisible(true);
			VC_backupMode_val.invalidate();
		}
		else if(backupMode_intval==2)
		{
			PC_backupMode_val.setVisible(true);
			PC_backupMode_val.invalidate();
		}
	}
	
	switch((int)apneaDetection_intval)
	{
		case 1: //no breath
		{
			if(noBreath_backupMode_val.isVisible())
			{
				noBreath_backupMode_bigVal.setVisible(true);
				noBreath_backupMode_bigVal.invalidate();
				noBreath_backupMode_val.setVisible(false);
				noBreath_backupMode_val.invalidate();
				
				key1=0;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = APNEA_DETECTION;
			}
			else if(noBreath_backupMode_bigVal.isVisible())
			{
				noBreath_backupMode_bigVal.setVisible(false);
				noBreath_backupMode_bigVal.invalidate();
				noBreath_backupMode_val.setVisible(true);
				noBreath_backupMode_val.invalidate();
				
				key1=4;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);				
				state = BACKUP;
			}
			break;
		}
		case 2: //no spont.breath
		{
			if(noSpontBreath_backupMode_val.isVisible())
			{
				noSpontBreath_backupMode_bigVal.setVisible(true);
				noSpontBreath_backupMode_bigVal.invalidate();
				noSpontBreath_backupMode_val.setVisible(false);
				noSpontBreath_backupMode_val.invalidate();
				
				key1=1;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = APNEA_DETECTION;
			}
			else if(noSpontBreath_backupMode_bigVal.isVisible())
			{
				noSpontBreath_backupMode_bigVal.setVisible(false);
				noSpontBreath_backupMode_bigVal.invalidate();
				noSpontBreath_backupMode_val.setVisible(true);
				noSpontBreath_backupMode_val.invalidate();
				
				key1=4;
				encoderCounter = key1*4+1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
				state = BACKUP;
			}
			break;
		}	
	}
}
void screenView::click_backupApnea()
{
	pressKey=0;
	// invisible chooses
	if(selector_backBackupScreen.isVisible())
	{
		selector_backBackupScreen.setVisible(false);
		selector_backBackupScreen.invalidate();
	}
	if(selector_backupMode.isVisible())
	{
		selector_backupMode.setVisible(false);
		selector_backupMode.invalidate();
	}
	if(!selector_backupApnea.isVisible())
	{
		selector_backupApnea.setVisible(true);
		selector_backupApnea.invalidate();
	}
	if(selector_apneaDetection.isVisible())
	{
		selector_apneaDetection.setVisible(false);
		selector_apneaDetection.invalidate();
	}
	if(selector_backupConfig.isVisible())
	{
		selector_backupConfig.setVisible(false);
		selector_backupConfig.invalidate();
	}
	// disable big ones
	if(PC_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible() || AlarmOnly_backupMode_bigVal.isVisible())
	{
		AlarmOnly_backupMode_bigVal.setVisible(false);
		AlarmOnly_backupMode_bigVal.invalidate();
		PC_backupMode_bigVal.setVisible(false);
		PC_backupMode_bigVal.invalidate();
		VC_backupMode_bigVal.setVisible(false);
		VC_backupMode_bigVal.invalidate();
		if(backupMode_intval==0)
		{
			AlarmOnly_backupMode_val.setVisible(true);
			AlarmOnly_backupMode_val.invalidate();
		}
		else if(backupMode_intval==1)
		{
			VC_backupMode_val.setVisible(true);
			VC_backupMode_val.invalidate();
		}
		else if(backupMode_intval==2)
		{
			PC_backupMode_val.setVisible(true);
			PC_backupMode_val.invalidate();
		}
	}
	if(noBreath_backupMode_bigVal.isVisible() || noSpontBreath_backupMode_bigVal.isVisible())
	{
		noBreath_backupMode_bigVal.setVisible(false);
		noBreath_backupMode_bigVal.invalidate();
		noSpontBreath_backupMode_bigVal.setVisible(false);
		noSpontBreath_backupMode_bigVal.invalidate();
		if(apneaDetection_intval==1)
		{
			noBreath_backupMode_val.setVisible(true);
			noBreath_backupMode_val.invalidate();
		}
		else if(apneaDetection_intval==2)
		{
			noSpontBreath_backupMode_val.setVisible(true);
			noSpontBreath_backupMode_val.invalidate();
		}
	}
	
	if(apneaTime_backupModeVal.isVisible())
	{
		apneaTime_backupModeVal.setVisible(false);
		apneaTime_backupModeVal.invalidate();
		apneaTime_backupModeBigVal.setVisible(true);
		apneaTime_backupModeBigVal.invalidate();
		
		Unicode::snprintf(apneaTime_backupModeBigValBuffer, APNEATIME_BACKUPMODEBIGVAL_SIZE, "%d", (int)apnea_backupIntval);
		apneaTime_backupModeBigVal.setWildcard1(apneaTime_backupModeBigValBuffer);
		apneaTime_backupModeBigVal.invalidate();
		
		key1 = tmp = 0;
		encoderCounter = key1*4+1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		state = BACKUP_APNEA;	
	}
	else if(apneaTime_backupModeBigVal.isVisible())
	{
		apneaTime_backupModeVal.setVisible(true);
		apneaTime_backupModeVal.invalidate();
		apneaTime_backupModeBigVal.setVisible(false);
		apneaTime_backupModeBigVal.invalidate();
		
		Unicode::snprintf(apneaTime_backupModeBigValBuffer, APNEATIME_BACKUPMODEBIGVAL_SIZE, "%d", (int)apnea_backupIntval);
		apneaTime_backupModeBigVal.setWildcard1(apneaTime_backupModeBigValBuffer);
		apneaTime_backupModeBigVal.invalidate();
		Unicode::snprintf(apneaTime_backupModeValBuffer, APNEATIME_BACKUPMODEVAL_SIZE, "%d", (int)apnea_backupIntval);
		apneaTime_backupModeVal.setWildcard1(apneaTime_backupModeValBuffer);
		apneaTime_backupModeVal.invalidate();
		
		key1=3;
		encoderCounter = key1*4+1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		state = BACKUP;	
	}
	
}
void screenView::disableBackupModeChooses()
{
	if (selector_RR_backupScreen.isVisible())
	{
		selector_RR_backupScreen.setVisible(false);
		selector_RR_backupScreen.invalidate();
	}
	if (selector_VT_backupScreen.isVisible())
	{
		selector_VT_backupScreen.setVisible(false);
		selector_VT_backupScreen.invalidate();
	}
	if (selector_Ti_backupScreen.isVisible())
	{
		selector_Ti_backupScreen.setVisible(false);
		selector_Ti_backupScreen.invalidate();
	}
	if (!selector_PEEP__backupScreen.isVisible())
	{
		selector_PEEP__backupScreen.setVisible(false);
		selector_PEEP__backupScreen.invalidate();
	}
	if (selector_PControl_backupScreen.isVisible())
	{
		selector_PControl_backupScreen.setVisible(false);
		selector_PControl_backupScreen.invalidate();
	}
	if (selector_riseTime__backupScreen.isVisible())
	{
		selector_riseTime__backupScreen.setVisible(false);
		selector_riseTime__backupScreen.invalidate();
	}
	if (selector_flowShape_backupScreen.isVisible())
	{
		selector_flowShape_backupScreen.setVisible(false);
		selector_flowShape_backupScreen.invalidate();
	}
}
void screenView::click_PEEPBackupScreen()
 {
	pressKey = 0;
	disableBackupModeChooses();
	
	if (!PEEP_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_TiBackupScreen();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PEEP_val_backupScreen.setVisible(false);
		PEEP_val_backupScreen.invalidate();
		PEEP_val_big_backupScreen.setVisible(true);
		PEEP_val_big_backupScreen.invalidate();
		PEEP_tmp_intval = backup_PEEP_intval;
		Unicode::snprintf(PEEP_val_big_backupScreenBuffer, PEEP_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)PEEP_tmp_intval);
		PEEP_val_big_backupScreen.setWildcard1(PEEP_val_big_backupScreenBuffer);
		PEEP_val_big_backupScreen.invalidate();
		state = BACKUP_PEEP;
	}
	else if (PEEP_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		PEEP_val_big_backupScreen.setVisible(false);
		PEEP_val_big_backupScreen.invalidate();
		PEEP_val_backupScreen.setVisible(true);
		PEEP_val_backupScreen.invalidate();
		Unicode::snprintf(PEEP_val_backupScreenBuffer, PEEP_VAL_BACKUPSCREEN_SIZE, "%d", (int)PEEP_tmp_intval);
		PEEP_val_backupScreen.setWildcard1(PEEP_val_backupScreenBuffer);
		PEEP_val_backupScreen.invalidate();
		backup_PEEP_intval = PEEP_tmp_intval;
		state = BACKUP_MODESCREEN;
	}
}

void screenView::click_RRBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	if (!RR_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_Ti_conf();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		RR_val_backupScreen.setVisible(false);
		RR_val_backupScreen.invalidate();
		RR_val_big_backupScreen.setVisible(true);
		RR_val_big_backupScreen.invalidate();
		RR_tmp_intval = backup_RR_intval;
		Unicode::snprintf(RR_val_big_backupScreenBuffer, RR_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)RR_tmp_intval);
		RR_val_big_backupScreen.setWildcard1(RR_val_big_backupScreenBuffer);
		RR_val_big_backupScreen.invalidate();
		state = BACKUP_RR;
	}
	else if (RR_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		RR_val_big_backupScreen.setVisible(false);
		RR_val_big_backupScreen.invalidate();
		RR_val_backupScreen.setVisible(true);
		RR_val_backupScreen.invalidate();
		Unicode::snprintf(RR_val_backupScreenBuffer, RR_VAL_BACKUPSCREEN_SIZE, "%d", (int)RR_tmp_intval);
		RR_val_backupScreen.setWildcard1(RR_val_backupScreenBuffer);
		RR_val_backupScreen.invalidate();
		backup_RR_intval = RR_tmp_intval;
		state = BACKUP_RR;
	}

	
}
void screenView::click_VTBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	if (!VT_val_big_backupScreen.isVisible())
	{
		if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_TiBackupScreen();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		

		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		VT_val_backupScreen.setVisible(false);
		VT_val_backupScreen.invalidate();
		VT_val_big_backupScreen.setVisible(true);
		VT_val_big_backupScreen.invalidate();
		VT_tmp_intval = backup_VT_intval;
		Unicode::snprintf(VT_val_big_backupScreenBuffer, VT_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_big_backupScreen.setWildcard1(VT_val_big_backupScreenBuffer);
		VT_val_big_backupScreen.invalidate();
		state = BACKUP_VT;
	}
	else if (VT_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		VT_val_big_backupScreen.setVisible(false);
		VT_val_big_backupScreen.invalidate();
		VT_val_backupScreen.setVisible(true);
		VT_val_backupScreen.invalidate();
		Unicode::snprintf(VT_val_backupScreenBuffer, VT_VAL_BACKUPSCREEN_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_backupScreen.setWildcard1(VT_val_backupScreenBuffer);
		VT_val_backupScreen.invalidate();
		backup_VT_intval = VT_tmp_intval;
		state = BACKUP_MODESCREEN;
	}

	
}
void screenView::click_TiBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	
	if (!Ti_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		Ti_val_backupScreen.setVisible(false);
		Ti_val_backupScreen.invalidate();
		Ti_val_big_backupScreen.setVisible(true);
		Ti_val_big_backupScreen.invalidate();
		Ti_tmp_intval = backup_Ti_intval;
		Unicode::snprintfFloat(Ti_val_big_backupScreenBuffer, TI_VAL_BIG_BACKUPSCREEN_SIZE, "%0.1f", Ti_tmp_intval);
		Ti_val_big_backupScreen.setWildcard1(Ti_val_big_backupScreenBuffer);
		Ti_val_big_backupScreen.invalidate();
		state = BACKUP_TI;
	}
	else if (Ti_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		Ti_val_big_backupScreen.setVisible(false);
		Ti_val_big_backupScreen.invalidate();
		Ti_val_backupScreen.setVisible(true);
		Ti_val_backupScreen.invalidate();
		Unicode::snprintfFloat(Ti_val_backupScreenBuffer, TI_VAL_BACKUPSCREEN_SIZE, "%0.1f", Ti_tmp_intval);
		Ti_val_backupScreen.setWildcard1(Ti_val_backupScreenBuffer);
		Ti_val_backupScreen.invalidate();
		backup_Ti_intval = Ti_tmp_intval;
		state = BACKUP_MODESCREEN;
	}

}
void screenView::click_flowShapeBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	
	if (!FlowShape_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_TiBackupScreen();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		FlowShape_val_backupScreen.setVisible(false);
		FlowShape_val_backupScreen.invalidate();
		FlowShape_val_big_backupScreen.setVisible(true);
		FlowShape_val_big_backupScreen.invalidate();
		flowShape_tmp_intval = backup_flowShape_intval ;
		Unicode::snprintf(FlowShape_val_big_backupScreenBuffer, FLOWSHAPE_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_big_backupScreen.setWildcard1(FlowShape_val_big_backupScreenBuffer);
		FlowShape_val_big_backupScreen.invalidate();
		state = BACKUP_FLOWSHAPE;
	}
	else if (FlowShape_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		FlowShape_val_big_backupScreen.setVisible(false);
		FlowShape_val_big_backupScreen.invalidate();
		FlowShape_val_backupScreen.setVisible(true);
		FlowShape_val_backupScreen.invalidate();
		Unicode::snprintf(FlowShape_val_backupScreenBuffer, FLOWSHAPE_VAL_BACKUPSCREEN_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_backupScreen.setWildcard1(FlowShape_val_backupScreenBuffer);
		FlowShape_val_backupScreen.invalidate();
		backup_flowShape_intval = flowShape_tmp_intval;
		state = BACKUP_MODESCREEN;
	}

}
void screenView::click_PControlBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	
	if (!PControl_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_TiBackupScreen();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (riseTime_val_big_backupScreen.isVisible())
		{
			click_riseTimeBackupScreen();
			selector_riseTime__backupScreen.setVisible(false);
			selector_riseTime__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		PControl_val_backupScreen.setVisible(false);
		PControl_val_backupScreen.invalidate();
		PControl_val_big_backupScreen.setVisible(true);
		PControl_val_big_backupScreen.invalidate();
		PControl_tmp_intval = backup_PControl_intval;
		Unicode::snprintf(PControl_val_big_backupScreenBuffer, PCONTROL_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_big_backupScreen.setWildcard1(PControl_val_big_backupScreenBuffer);
		PControl_val_big_backupScreen.invalidate();
		state = BACKUP_PCONTROL;
	}
	else if (PControl_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		PControl_val_big_backupScreen.setVisible(false);
		PControl_val_big_backupScreen.invalidate();
		PControl_val_backupScreen.setVisible(true);
		PControl_val_backupScreen.invalidate();
		Unicode::snprintf(PControl_val_backupScreenBuffer, PCONTROL_VAL_BACKUPSCREEN_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_backupScreen.setWildcard1(PControl_val_backupScreenBuffer);
		PControl_val_backupScreen.invalidate();
		backup_PControl_intval = PControl_tmp_intval;
		state = BACKUP_MODESCREEN;
	}

}
void screenView::click_riseTimeBackupScreen()
{
	pressKey = 0;
	disableBackupModeChooses();
	
	if (!riseTime_val_big_backupScreen.isVisible())
	{
		if (VT_val_big_backupScreen.isVisible())
		{
			click_VTBackupScreen();
			selector_VT_backupScreen.setVisible(false);
			selector_VT_backupScreen.invalidate();
		}
		else if (RR_val_big_backupScreen.isVisible())
		{
			click_RRBackupScreen();
			selector_RR_backupScreen.setVisible(false);
			selector_RR_backupScreen.invalidate();
		}
		else if (PControl_val_big_backupScreen.isVisible())
		{
			click_PControlBackupScreen();
			selector_PControl_backupScreen.setVisible(false);
			selector_PControl_backupScreen.invalidate();
		}
		else if (Ti_val_big_backupScreen.isVisible())
		{
			click_TiBackupScreen();
			selector_Ti_backupScreen.setVisible(false);
			selector_Ti_backupScreen.invalidate();
		}
		else if (PEEP_val_big_backupScreen.isVisible())
		{
			click_PEEPBackupScreen();
			selector_PEEP__backupScreen.setVisible(false);
			selector_PEEP__backupScreen.invalidate();
		}
		else if (FlowShape_val_big_backupScreen.isVisible())
		{
			click_flowShapeBackupScreen();
			selector_flowShape_backupScreen.setVisible(false);
			selector_flowShape_backupScreen.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		riseTime_val_backupScreen.setVisible(false);
		riseTime_val_backupScreen.invalidate();
		riseTime_val_big_backupScreen.setVisible(true);
		riseTime_val_big_backupScreen.invalidate();
		riseTime_tmp_intval = backup_riseTime_intval;
		Unicode::snprintf(riseTime_val_big_backupScreenBuffer, RISETIME_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_big_backupScreen.setWildcard1(riseTime_val_big_backupScreenBuffer);
		riseTime_val_big_backupScreen.invalidate();
		state = BACKUP_RISETIME;
	}
	else if (riseTime_val_big_backupScreen.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		riseTime_val_big_backupScreen.setVisible(false);
		riseTime_val_big_backupScreen.invalidate();
		riseTime_val_backupScreen.setVisible(true);
		riseTime_val_backupScreen.invalidate();
		Unicode::snprintf(riseTime_val_backupScreenBuffer, RISETIME_VAL_BACKUPSCREEN_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_backupScreen.setWildcard1(riseTime_val_backupScreenBuffer);
		riseTime_val_backupScreen.invalidate();
		backup_riseTime_intval = riseTime_tmp_intval;
		state = BACKUP_MODESCREEN;
	}

}
void screenView::click_alarm()
{
	//-------
	CMVVCV_big_txt.setVisible(false);
	CMVVCV_big_txt.invalidate();
	CMVPCV_big_txt.setVisible(false);
	CMVPCV_big_txt.invalidate();
	ACVCV_big_txt.setVisible(false);
	ACVCV_big_txt.invalidate();
	ACPCV_big_txt.setVisible(false);
	ACPCV_big_txt.invalidate();
	SIMVVCV_big_txt.setVisible(false);
	SIMVVCV_big_txt.invalidate();
	SIMVPCV_big_txt.setVisible(false);
	SIMVPCV_big_txt.invalidate();
	PSV_big_txt.setVisible(false);
	PSV_big_txt.invalidate();
	CPAP_big_txt.setVisible(false);
	CPAP_big_txt.invalidate();
	BiPAP_big_txt.setVisible(false);
	BiPAP_big_txt.invalidate();
	switch ((int)mode_int)
	{
	case 1:
	{
		CMVVCV_txt.setVisible(true);
		CMVVCV_txt.invalidate();
		break;
	}
	case 2:
	{
		CMVPCV_txt.setVisible(true);
		CMVPCV_txt.invalidate();
		break;
	}
	case 3:
	{
		ACVCV_txt.setVisible(true);
		ACVCV_txt.invalidate();
		break;
	}
	case 4:
	{
		ACPCV_txt.setVisible(true);
		ACPCV_txt.invalidate();
		break;
	}
	case 5:
	{
		SIMVVCV_txt.setVisible(true);
		SIMVVCV_txt.invalidate();
		break;
	}
	case 6:
	{
		SIMVPCV_txt.setVisible(true);
		SIMVPCV_txt.invalidate();
		break;
	}
	case 7:
	{
		PSV_txt.setVisible(true);
		PSV_txt.invalidate();
		break;
	}
	case 8:
	{
		CPAP_txt.setVisible(true);
		CPAP_txt.invalidate();
		break;
	}
	case 9:
	{
		BiPAP_txt.setVisible(true);
		BiPAP_txt.invalidate();
		break;
	}
	case 10:
	{
		CPR_txt.setVisible(true);
		CPR_txt.invalidate();
		//HFNC_txt.setVisible(true);
		//HFNC_txt.invalidate();
		break;
	}
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_alarmSettingScreen.setVisible(true);
	container_alarmSettingScreen.invalidate();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
	RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
	RR_alarm_max.invalidate();
	Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
	pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
	pressure_alarm_max.invalidate();
	Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
	pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
	pressure_alarm_min.invalidate();
	Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
	vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
	vti_alarm_max.invalidate();
	Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
	vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
	vti_alarm_min.invalidate();
	Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
	MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
	MVi_alarm_max.invalidate();
	Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
	MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
	MVi_alarm_min.invalidate();
	state = ALARM;
}

void screenView::click_activeAlarms()
{
	click_setting();
	container_settingScreen.setVisible(false);
	container_settingScreen.invalidate();
	
	container_activeAlarms.setVisible(true);
	container_activeAlarms.invalidate();
	
	state = ACTIVE_ALARMS;
}
	
void screenView::click_backActiveAlarms()
{
	if(selector_backActiveAlarmsScreen.isVisible())
	{
		selector_backActiveAlarmsScreen.setVisible(false);
		selector_backActiveAlarmsScreen.invalidate();
	}
	container_activeAlarms.setVisible(false);
	container_activeAlarms.invalidate();
	
	click_backSetting();
}
void screenView::click_backVentSetting()
{
	if (selector_backVentSetting.isVisible())
	{
		selector_backVentSetting.setVisible(false);
		selector_backVentSetting.invalidate();
	}
	if (selector_modeSetting.isVisible())
	{
		selector_modeSetting.setVisible(false);
		selector_modeSetting.invalidate();
	}
	CMVVCV_big_txt.setVisible(false);
	CMVVCV_big_txt.invalidate();
	CMVPCV_big_txt.setVisible(false);
	CMVPCV_big_txt.invalidate();
	ACVCV_big_txt.setVisible(false);
	ACVCV_big_txt.invalidate();
	ACPCV_big_txt.setVisible(false);
	ACPCV_big_txt.invalidate();
	SIMVVCV_big_txt.setVisible(false);
	SIMVVCV_big_txt.invalidate();
	SIMVPCV_big_txt.setVisible(false);
	SIMVPCV_big_txt.invalidate();
	PSV_big_txt.setVisible(false);
	PSV_big_txt.invalidate();
	CPAP_big_txt.setVisible(false);
	CPAP_big_txt.invalidate();
	BiPAP_big_txt.setVisible(false);
	BiPAP_big_txt.invalidate();
	switch ((int)mode_int)
	{
	case 1:
	{
		CMVVCV_txt.setVisible(true);
		CMVVCV_txt.invalidate();
		break;
	}
	case 2:
	{
		CMVPCV_txt.setVisible(true);
		CMVPCV_txt.invalidate();
		break;
	}
	case 3:
	{
		ACVCV_txt.setVisible(true);
		ACVCV_txt.invalidate();
		break;
	}
	case 4:
	{
		ACPCV_txt.setVisible(true);
		ACPCV_txt.invalidate();
		break;
	}
	case 5:
	{
		SIMVVCV_txt.setVisible(true);
		SIMVVCV_txt.invalidate();
		break;
	}
	case 6:
	{
		SIMVPCV_txt.setVisible(true);
		SIMVPCV_txt.invalidate();
		break;
	}
	case 7:
	{
		PSV_txt.setVisible(true);
		PSV_txt.invalidate();
		break;
	}
	case 8:
	{
		CPAP_txt.setVisible(true);
		CPAP_txt.invalidate();
		break;
	}
	case 9:
	{
		BiPAP_txt.setVisible(true);
		BiPAP_txt.invalidate();
		break;
	}
	case 10:
	{
		CPR_txt.setVisible(true);
		CPR_txt.invalidate();
		//HFNC_txt.setVisible(true);
		//HFNC_txt.invalidate();
		break;
	}
	}
	// close big ones
	if (VT_val_big_ventSetting.isVisible())
	{
		click_VT_conf();
	}
	if (RR_val_big_ventSetting.isVisible())
	{
		click_RR_conf();
	}
	if (TiInspPause_val_big_ventSetting.isVisible())
	{
		click_TiInspPause_conf();
	}
	if (FiO2_val_big_ventSetting.isVisible())
	{
		click_FiO2_conf();
	}
	if (riseTime_val_big_ventSetting.isVisible())
	{
		click_riseTime_conf();
	}
	if (PEEP_val_big_ventSetting.isVisible())
	{
		click_PEEP_conf();
	}
	if (PControl_val_big_ventSetting.isVisible())
	{
		click_PControl_conf();
	}
	if (PS_val_big_ventSetting.isVisible())
	{
		click_Psupp_conf();
	}
	if (Ti_val_big_ventSetting.isVisible())
	{
		click_Ti_conf();
	}
	if (trigger_val_flow_big_ventSetting.isVisible() || trigger_val_pressure_big_ventSetting.isVisible())
	{
		click_trigger_conf();
	}
	if (sensivity_val_big_ventSetting.isVisible())
	{
		click_sensitivity_conf();
	}
	if (FlowShape_val_big_ventSetting.isVisible())
	{
		click_flowShape_conf();
	}

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);

	
	container_ventilationSettingScreen.setVisible(false);
	container_ventilationSettingScreen.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();

	
	sendConfig();
	state = SETTING;
}
void screenView::click_backPatientInfo()
{
	if (selector_backPatientInfoSetting.isVisible())
	{
		selector_backPatientInfoSetting.setVisible(false);
		selector_backPatientInfoSetting.invalidate();
	}
	if (selector_ageSetting.isVisible())
	{
		selector_ageSetting.setVisible(false);
		selector_ageSetting.invalidate();
	}
	if (selector_heightPatientSetting.isVisible())
	{
		selector_heightPatientSetting.setVisible(false);
		selector_heightPatientSetting.invalidate();
	}
	// close age
	if (container_ageSetting.getX() != 263)
	{
		if (adult_image.isVisible())
			click_adult();
		if (child_image.isVisible())
			click_pediatric();
	}
	// close WEIGHT
	if (weight_bigVal.isVisible())
	{
		weight_bigVal.setVisible(false);
		weight_bigVal.invalidate();
		weight_val.setVisible(true);
		weight_val.invalidate();
		Unicode::snprintf(weight_bigValBuffer, WEIGHT_BIGVAL_SIZE, "%d", weight_intval);
		weight_bigVal.setWildcard1(weight_bigValBuffer);
		weight_bigVal.invalidate();
		Unicode::snprintf(weight_valBuffer, WEIGHT_VAL_SIZE, "%d", weight_intval);
		weight_val.setWildcard1(weight_valBuffer);
		weight_val.invalidate();
	}

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_patientInfoSetting.setVisible(false);
	container_patientInfoSetting.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();

	state = SETTING;
}

void screenView::click_backTrendsScreen()
{
	if (selector_backTrends.isVisible())
	{
		selector_backTrends.setVisible(false);
		selector_backTrends.invalidate();
	}

	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_trendScreen.setVisible(false);
	container_trendScreen.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();

	
	state = SETTING;
}

void screenView::click_backBackupScreen()
{
	if(selector_backBackupScreen.isVisible())
	{
		selector_backBackupScreen.setVisible(false);
		selector_backBackupScreen.invalidate();
	}
	if(selector_apneaDetection.isVisible())
	{
		selector_apneaDetection.setVisible(false);
		selector_apneaDetection.invalidate();
	}
	if(selector_backupConfig.isVisible())
	{
		selector_backupConfig.setVisible(false);
		selector_backupConfig.invalidate();		
	}
	
	// close big ones
	if(AlarmOnly_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible() || PC_backupMode_bigVal.isVisible())	
	{
		click_backupModes();
	}
	else if(apneaTime_backupModeBigVal.isVisible())
	{
		click_backupApnea();
	}
	else if(noBreath_backupMode_bigVal.isVisible() || noSpontBreath_backupMode_bigVal.isVisible())
	{
		click_apneaDetection();
	}
	
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_backupScreen.setVisible(false);
	container_backupScreen.invalidate();
	container_alarmSettingScreen.setVisible(true);
	container_alarmSettingScreen.invalidate();

	state = ALARM;
}
void screenView::click_backDeviceS()
{
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(false);
		selector_audioSetting.invalidate();
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
	}
	if (selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(false);
		selector_brightnessSetting.invalidate();
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
	}
	if (selector_timeSetting.isVisible())
	{
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
			digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			digitalClock_setting.invalidate();
			selector_hours.setVisible(false);
			selector_hours.invalidate();
			selector_minutes.setVisible(false);
			selector_minutes.invalidate();
		}
	}
	if (selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(false);
		selector_languageSetting.invalidate();
		selector_languageEnglish.setVisible(false);
		selector_languageEnglish.invalidate();
		selector_languageArabic.setVisible(false);
		selector_languageArabic.invalidate();
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);

	container_deviceSettingScreen.setVisible(false);
	container_deviceSettingScreen.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();

	state = SETTING;
}
void screenView::click_backDeviceInfo()
{
	if (selector_backDeviceInfo.isVisible())
	{
		selector_backDeviceInfo.setVisible(false);
		selector_backDeviceInfo.invalidate();
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	container_deviceInfoScreen.setVisible(false);
	container_deviceInfoScreen.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();
	state = SETTING;
}
void screenView::click_audio()
{
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(false);
		selector_languageSetting.invalidate();
		selector_languageEnglish.setVisible(false);
		selector_languageEnglish.invalidate();
		selector_languageArabic.setVisible(false);
		selector_languageArabic.invalidate();
	}
	if (selector_timeSetting.isVisible())
	{
		selector_timeSetting.setVisible(false);
		selector_timeSetting.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
	}
	if (selector_dateSetting.isVisible())
	{
		selector_dateSetting.setVisible(false);
		selector_dateSetting.invalidate();
		day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		day_setting.invalidate();
		month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		month_setting.invalidate();
		year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		year_setting.invalidate();
		selector_day.setVisible(false);
		selector_day.invalidate();
		selector_month.setVisible(false);
		selector_month.invalidate();
		selector_year.setVisible(false);
		selector_year.invalidate();
	}
	if (selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(false);
		selector_brightnessSetting.invalidate();
	}
	if (selectorBrightnessSlider.isVisible())
	{
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
	}
	if (!selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(true);
		selector_audioSetting.invalidate();
	}

	if (selectorAudioSlider.isVisible())
	{
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		state = DEVICE;
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selectorAudioSlider.setVisible(true);
	selectorAudioSlider.invalidate();
	state = AUDIO;
}

void screenView::click_audioSlider(int a)
{
	if (a < 0)
	{
		a = 0;
		audio_slider.setValue(a);
	}
	else if(a > 100)
	{
		a = 100;
		audio_slider.setValue(a);
	}
	audio_sound = a;
	
	if (state != AUDIO)
	{
		key1 = 1;
		encoderCounter = 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 4 + 1);
		state = AUDIO;
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
			selector_languageEnglish.setVisible(false);
			selector_languageEnglish.invalidate();
			selector_languageArabic.setVisible(false);
			selector_languageArabic.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
			digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			digitalClock_setting.invalidate();
			selector_hours.setVisible(false);
			selector_hours.invalidate();
			selector_minutes.setVisible(false);
			selector_minutes.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
			day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			day_setting.invalidate();
			month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			month_setting.invalidate();
			year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			year_setting.invalidate();
			selector_day.setVisible(false);
			selector_day.invalidate();
			selector_month.setVisible(false);
			selector_month.invalidate();
			selector_year.setVisible(false);
			selector_year.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (selectorBrightnessSlider.isVisible())
		{
			selectorBrightnessSlider.setVisible(false);
			selectorBrightnessSlider.invalidate();
		}
		if (!selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(true);
			selector_audioSetting.invalidate();
		}
		if (!selectorAudioSlider.isVisible())
		{
			selectorAudioSlider.setVisible(true);
			selectorAudioSlider.invalidate();
		}
	}
	
}

void screenView::click_brightness()
{
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(false);
		selector_languageSetting.invalidate();
		selector_languageEnglish.setVisible(false);
		selector_languageEnglish.invalidate();
		selector_languageArabic.setVisible(false);
		selector_languageArabic.invalidate();
	}
	if (selector_timeSetting.isVisible())
	{
		selector_timeSetting.setVisible(false);
		selector_timeSetting.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
	}
	if (selector_dateSetting.isVisible())
	{
		selector_dateSetting.setVisible(false);
		selector_dateSetting.invalidate();
		day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		day_setting.invalidate();
		month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		month_setting.invalidate();
		year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		year_setting.invalidate();
		selector_day.setVisible(false);
		selector_day.invalidate();
		selector_month.setVisible(false);
		selector_month.invalidate();
		selector_year.setVisible(false);
		selector_year.invalidate();
	}
	if (!selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(true);
		selector_brightnessSetting.invalidate();
	}
	if (selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(false);
		selector_audioSetting.invalidate();
	}
	if (selectorAudioSlider.isVisible())
	{
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
	}
	if (selectorBrightnessSlider.isVisible())
	{
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		state = DEVICE;
	}
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selectorBrightnessSlider.setVisible(true);
	selectorBrightnessSlider.invalidate();
	state = BRIGHTNESS;
}

void screenView::click_brightnessSlider(int a)
{
	if (a < 20)
	{
		a = 20;
		brightness_slider.setValue(20);
	}
	
	if (state != BRIGHTNESS)
	{
		key1 = 1;
		encoderCounter = 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 4 + 1);
		state = BRIGHTNESS;
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
			selector_languageEnglish.setVisible(false);
			selector_languageEnglish.invalidate();
			selector_languageArabic.setVisible(false);
			selector_languageArabic.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
			digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			digitalClock_setting.invalidate();
			selector_hours.setVisible(false);
			selector_hours.invalidate();
			selector_minutes.setVisible(false);
			selector_minutes.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
			day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			day_setting.invalidate();
			month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			month_setting.invalidate();
			year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			year_setting.invalidate();
			selector_day.setVisible(false);
			selector_day.invalidate();
			selector_month.setVisible(false);
			selector_month.invalidate();
			selector_year.setVisible(false);
			selector_year.invalidate();
		}
		if (!selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(true);
			selector_brightnessSetting.invalidate();
		}
		if (!selectorBrightnessSlider.isVisible())
		{
			selectorBrightnessSlider.setVisible(true);
			selectorBrightnessSlider.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (selectorAudioSlider.isVisible())
		{
			selectorAudioSlider.setVisible(false);
			selectorAudioSlider.invalidate();
		}
	}
	
	TIM15->CCR1 = a;
}

void screenView::click_time()
{
	//	key1=2;
	//	encoderCounter=8+1;
	//	__HAL_TIM_SET_COUNTER(&htim3, 8+1);
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(false);
		selector_audioSetting.invalidate();
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
	}
	if (selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(false);
		selector_brightnessSetting.invalidate();
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
	}
	if (selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(false);
		selector_languageSetting.invalidate();
		selector_languageEnglish.setVisible(false);
		selector_languageEnglish.invalidate();
		selector_languageArabic.setVisible(false);
		selector_languageArabic.invalidate();
	}
	if (selector_dateSetting.isVisible())
	{
		selector_dateSetting.setVisible(false);
		selector_dateSetting.invalidate();
		day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		day_setting.invalidate();
		month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		month_setting.invalidate();
		year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		year_setting.invalidate();
		selector_day.setVisible(false);
		selector_day.invalidate();
		selector_month.setVisible(false);
		selector_month.invalidate();
		selector_year.setVisible(false);
		selector_year.invalidate();
	}
	if (!selector_timeSetting.isVisible())
	{
		selector_timeSetting.setVisible(true);
		selector_timeSetting.invalidate();
	}

	if (state != HOURS && state != MINUTES)
	{
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = 0;
		selector_hours.setVisible(true);
		selector_hours.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(230, 230, 230)); // default was (71, 71, 71)
		digitalClock_setting.setTime24Hour(h, m, 30);
		digitalClock_setting.invalidate();
		state = HOURS;
	}
	else if (state == HOURS)
	{
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		h = digitalClock_setting.getCurrentHour();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(true);
		selector_minutes.invalidate();
		state = MINUTES;
	}
	else if (state == MINUTES)
	{
		isLoading = true;
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		h = digitalClock_setting.getCurrentHour();
		m = digitalClock_setting.getCurrentMinute();
		// saving time to RTC clock
		RTC_Time.Hours = h;
		RTC_Time.Minutes = m;
		RTC_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
		RTC_Time.StoreOperation = RTC_STOREOPERATION_RESET;
		if (HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN) != HAL_OK)
		{
			Error_Handler();
		}
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		state = DEVICE;
	}
}

void screenView::click_date()
{
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(false);
		selector_audioSetting.invalidate();
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
	}
	if (selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(false);
		selector_brightnessSetting.invalidate();
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
	}
	if (selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(false);
		selector_languageSetting.invalidate();
		selector_languageEnglish.setVisible(false);
		selector_languageEnglish.invalidate();
		selector_languageArabic.setVisible(false);
		selector_languageArabic.invalidate();
	}
	if (selector_timeSetting.isVisible())
	{
		selector_timeSetting.setVisible(false);
		selector_timeSetting.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
	}
	if (!selector_dateSetting.isVisible())
	{
		selector_dateSetting.setVisible(true);
		selector_dateSetting.invalidate();
	}

	if (state != DAY && state != MONTH && state != YEAR)
	{
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = 0;
		selector_day.setVisible(true);
		selector_day.invalidate();
		day_setting.setColor(Color::getColorFromRGB(230, 230, 230)); // default was (71, 71, 71)
		day_setting.invalidate();
		state = DAY;
	}
	else if (state == DAY)
	{
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		selector_day.setVisible(false);
		selector_day.invalidate();
		selector_month.setVisible(true);
		selector_month.invalidate();
		day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		day_setting.invalidate();
		month_setting.setColor(Color::getColorFromRGB(230, 230, 230)); // default was (71, 71, 71)
		month_setting.invalidate();
		state = MONTH;
	}
	else if (state == MONTH)
	{
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		selector_year.setVisible(true);
		selector_year.invalidate();
		selector_month.setVisible(false);
		selector_month.invalidate();
		month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		month_setting.invalidate();
		year_setting.setColor(Color::getColorFromRGB(230, 230, 230)); // default was (71, 71, 71)
		year_setting.invalidate();
		state = YEAR;
	}
	else if (state == YEAR)
	{
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		selector_year.setVisible(false);
		selector_year.invalidate();
		year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		year_setting.invalidate();
		if (HAL_RTC_SetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN) != HAL_OK)
		{
			Error_Handler();
		}
		state = DEVICE;
	}
	//	else if(state == WEEK)
	//	{
	//		pressKey = 0;
	//		__HAL_TIM_SET_COUNTER(&htim3, 0);
	//		encoderCounter = 0;
	//		key1 = 0;
	//		tmp = 0;
	//		selector_week.setVisible(false);
	//		selector_week.invalidate();
	//		week_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
	//		week_setting.invalidate();
	//
	//		state = DEVICE;
	//	}
}

void screenView::click_language()
{
	key1 = 3;
	encoderCounter = 12 + 1;
	__HAL_TIM_SET_COUNTER(&htim3, 12 + 1);
	if (selector_backDeviceSetting.isVisible())
	{
		selector_backDeviceSetting.setVisible(false);
		selector_backDeviceSetting.invalidate();
	}
	if (selector_audioSetting.isVisible())
	{
		selector_audioSetting.setVisible(false);
		selector_audioSetting.invalidate();
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
	}
	if (selector_brightnessSetting.isVisible())
	{
		selector_brightnessSetting.setVisible(false);
		selector_brightnessSetting.invalidate();
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
	}
	if (selector_timeSetting.isVisible())
	{
		selector_timeSetting.setVisible(false);
		selector_timeSetting.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
	}
	if (selector_dateSetting.isVisible())
	{
		selector_dateSetting.setVisible(false);
		selector_dateSetting.invalidate();
		day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		day_setting.invalidate();
		month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		month_setting.invalidate();
		year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		year_setting.invalidate();
		selector_day.setVisible(false);
		selector_day.invalidate();
		selector_month.setVisible(false);
		selector_month.invalidate();
		selector_year.setVisible(false);
		selector_year.invalidate();
	}
	if (!selector_languageSetting.isVisible())
	{
		selector_languageSetting.setVisible(true);
		selector_languageSetting.invalidate();
	}

	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	tmp = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	selector_languageEnglish.setVisible(true);
	selector_languageEnglish.invalidate();
	state = LANGUAGE;
}

void screenView::click_english()
{
	isLoading = true;
	selector_languageEnglish.setVisible(false);
	selector_languageEnglish.invalidate();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	// radioButtonGroup1.setSelected(radioButton_english);
	text_arabic.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_arabic.invalidate();
	arb_text_arabic.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_arabic.invalidate();
	text_english.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_english.invalidate();
	arb_text_english.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_english.invalidate();

	state = DEVICE;
	//	code for English
	isArabic = false;
	setLanguage();
}

void screenView::click_arabic()
{
	isLoading = true;
	selector_languageArabic.setVisible(false);
	selector_languageArabic.invalidate();
	pressKey = 0;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	// radioButtonGroup1.setSelected(radioButton_arabic); it would do it itself when clicking it.
	text_english.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_english.invalidate();
	arb_text_english.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_english.invalidate();
	text_arabic.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	text_arabic.invalidate();
	arb_text_arabic.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
	arb_text_arabic.invalidate();
	state = DEVICE;
	//	code for Arabic
	isArabic = true;
	setLanguage();
}

void screenView::click_backAlarmSc()
{
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}
	// close un-finish bigs
	if (RR_alarm_big_max.isVisible())
	{
		RR_alarm_big_max.setVisible(false);
		RR_alarm_big_max.invalidate();
		RR_alarm_max.setVisible(true);
		RR_alarm_max.invalidate();
	}
	if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
	{
		pressure_alarm_big_max.setVisible(false);
		pressure_alarm_big_max.invalidate();
		pressure_alarm_max.setVisible(true);
		pressure_alarm_max.invalidate();
		pressure_alarm_big_min.setVisible(false);
		pressure_alarm_big_min.invalidate();
		pressure_alarm_min.setVisible(true);
		pressure_alarm_min.invalidate();
	}
	if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
	{
		vti_alarm_big_min.setVisible(false);
		vti_alarm_big_min.invalidate();
		vti_alarm_max.setVisible(true);
		vti_alarm_max.invalidate();
		vti_alarm_big_max.setVisible(false);
		vti_alarm_big_max.invalidate();
		vti_alarm_min.setVisible(true);
		vti_alarm_min.invalidate();
	}
	if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
	{
		vte_alarm_big_min.setVisible(false);
		vte_alarm_big_min.invalidate();
		vte_alarm_max.setVisible(true);
		vte_alarm_max.invalidate();
		vte_alarm_big_max.setVisible(false);
		vte_alarm_big_max.invalidate();
		vte_alarm_min.setVisible(true);
		vte_alarm_min.invalidate();
	}
	if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
	{
		MVe_alarm_big_max.setVisible(false);
		MVe_alarm_big_max.invalidate();
		MVe_alarm_max.setVisible(true);
		MVe_alarm_max.invalidate();
		MVe_alarm_big_min.setVisible(false);
		MVe_alarm_big_min.invalidate();
		MVe_alarm_min.setVisible(true);
		MVe_alarm_min.invalidate();
	}
	if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
	{
		MVi_alarm_big_max.setVisible(false);
		MVi_alarm_big_max.invalidate();
		MVi_alarm_max.setVisible(true);
		MVi_alarm_max.invalidate();
		MVi_alarm_big_min.setVisible(false);
		MVi_alarm_big_min.invalidate();
		MVi_alarm_min.setVisible(true);
		MVi_alarm_min.invalidate();
	}
	if (Leak_alarm_big_max.isVisible())
	{
		Leak_alarm_big_max.setVisible(false);
		Leak_alarm_big_max.invalidate();
		Leak_alarm_max.setVisible(true);
		Leak_alarm_max.invalidate();
	}
	if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
	{
		SPO2_alarm_big_maxVal.setVisible(false);
		SPO2_alarm_big_maxVal.invalidate();
		SPO2_alarm_maxVal.setVisible(true);
		SPO2_alarm_maxVal.invalidate();
		SPO2_alarm_big_minVal.setVisible(false);
		SPO2_alarm_big_minVal.invalidate();
		SPO2_alarm_minVal.setVisible(true);
		SPO2_alarm_minVal.invalidate();
	}
	
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	container_alarmSettingScreen.setVisible(false);
	container_alarmSettingScreen.invalidate();
	container_settingScreen.setVisible(true);
	container_settingScreen.invalidate();
	
	state = SETTING;
	key1 = 0;
	encoderCounter = 0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	
	sendConfig();
}

void screenView::click_RRAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (!selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(true);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!RR_alarm_big_max.isVisible() && !RR_alarm_big_min.isVisible())
	{
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		RR_alarm_max.setVisible(false);
		RR_alarm_max.invalidate();
		RR_alarm_big_max.setVisible(true);
		RR_alarm_big_max.invalidate();
		Unicode::snprintf(RR_alarm_big_maxBuffer, RR_ALARM_BIG_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
		RR_alarm_big_max.setWildcard1(RR_alarm_maxBuffer);
		RR_alarm_big_max.invalidate();
		state = RR_MAX;
	}
	else if (RR_alarm_big_max.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		RR_alarm_big_max.setVisible(false);
		RR_alarm_big_max.invalidate();
		RR_alarm_max.setVisible(true);
		RR_alarm_max.invalidate();
		RR_alarm_big_min.setVisible(true);
		RR_alarm_big_min.invalidate();
		RR_alarm_min.setVisible(false);
		RR_alarm_min.invalidate();
		if(RR_alarm_maxVal == -1)
		{
			Unicode::strncpy(RR_alarm_maxBuffer, "Off", 3);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.resizeToCurrentText();
			RR_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();	
		}
		state = RR_MIN;
	}
	else if (RR_alarm_big_min.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		RR_alarm_big_min.setVisible(false);
		RR_alarm_big_min.invalidate();
		RR_alarm_min.setVisible(true);
		RR_alarm_min.invalidate();
		if(RR_alarm_minVal == -1)
		{
			Unicode::strncpy(RR_alarm_minBuffer, "Off", 3);			
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.resizeToCurrentText();
			RR_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_PAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (!selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(true);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!pressure_alarm_big_max.isVisible() && !pressure_alarm_big_min.isVisible())
	{
		if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
			RR_alarm_big_min.setVisible(false);
			RR_alarm_big_min.invalidate();
			RR_alarm_min.setVisible(true);
			RR_alarm_min.invalidate();
			Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}

		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		// go to max
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		pressure_alarm_big_max.setVisible(true);
		pressure_alarm_big_max.invalidate();
		pressure_alarm_max.setVisible(false);
		pressure_alarm_max.invalidate();
		pressure_alarm_min.setVisible(true);
		pressure_alarm_min.invalidate();
		pressure_alarm_big_min.setVisible(false);
		pressure_alarm_big_min.invalidate();
		Unicode::snprintf(pressure_alarm_big_maxBuffer, PRESSURE_ALARM_BIG_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
		pressure_alarm_big_max.setWildcard1(pressure_alarm_big_maxBuffer);
		pressure_alarm_big_max.invalidate();
		state = PRESSURE_MAX;
	}
	else if (pressure_alarm_big_max.isVisible())
	{
		// go to min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		pressure_alarm_big_max.setVisible(false);
		pressure_alarm_big_max.invalidate();
		pressure_alarm_max.setVisible(true);
		pressure_alarm_max.invalidate();
		pressure_alarm_min.setVisible(false);
		pressure_alarm_min.invalidate();
		pressure_alarm_big_min.setVisible(true);
		pressure_alarm_big_min.invalidate();
		pressure_alarm_big_min.setVisible(true);
		if(pressure_alarm_maxVal == -1)
		{
			Unicode::strncpy(pressure_alarm_maxBuffer, "Off", 3);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.resizeToCurrentText();
			pressure_alarm_max.invalidate();			
		}
		else
		{
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();	
		}
		
		state = PRESSURE_MIN;
	}
	else if (pressure_alarm_big_min.isVisible())
	{
		// close min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		pressure_alarm_big_min.setVisible(false);
		pressure_alarm_big_min.invalidate();
		pressure_alarm_min.setVisible(true);
		pressure_alarm_min.invalidate();
		if(pressure_alarm_minVal == -1)
		{
			Unicode::strncpy(pressure_alarm_minBuffer, "Off", 3);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.resizeToCurrentText();
			pressure_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_VtiAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (!selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(true);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!vti_alarm_big_max.isVisible() && !vti_alarm_big_min.isVisible())
	{
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
			RR_alarm_big_min.setVisible(false);
			RR_alarm_big_min.invalidate();
			RR_alarm_min.setVisible(true);
			RR_alarm_min.invalidate();
			Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}

		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		// go to max
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vti_alarm_big_max.setVisible(true);
		vti_alarm_big_max.invalidate();
		vti_alarm_max.setVisible(false);
		vti_alarm_max.invalidate();
		vti_alarm_min.setVisible(true);
		vti_alarm_min.invalidate();
		vti_alarm_big_min.setVisible(false);
		vti_alarm_big_min.invalidate();
		if(vti_alarm_maxVal == -1)
		{
			Unicode::strncpy(vti_alarm_big_maxBuffer, "Off", 3);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_maxBuffer);
			vti_alarm_big_min.resizeToCurrentText();
			vti_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_big_maxBuffer, VTI_ALARM_BIG_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_maxBuffer);
			vti_alarm_big_min.invalidate();
		}
		
		state = VTI_MAX;
	}
	else if (vti_alarm_big_max.isVisible())
	{
		// go to min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vti_alarm_big_min.setVisible(true);
		vti_alarm_big_min.invalidate();
		vti_alarm_min.setVisible(false);
		vti_alarm_min.invalidate();
		vti_alarm_max.setVisible(true);
		vti_alarm_max.invalidate();
		vti_alarm_big_max.setVisible(false);
		vti_alarm_big_max.invalidate();
		
		if(vti_alarm_maxVal == -1)
		{
			Unicode::strncpy(vti_alarm_maxBuffer, "Off", 3);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.resizeToCurrentText();
			vti_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
		}
		
		if(vti_alarm_minVal == -1)
		{
			Unicode::strncpy(vti_alarm_big_minBuffer, "Off", 3);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_minBuffer);
			vti_alarm_big_min.resizeToCurrentText();
			vti_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_big_minBuffer, VTI_ALARM_BIG_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_minBuffer);
			vti_alarm_big_min.invalidate();
		}
		
		state = VTI_MIN;
	}
	else if (vti_alarm_big_min.isVisible())
	{
		// close min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vti_alarm_big_min.setVisible(false);
		vti_alarm_big_min.invalidate();
		vti_alarm_min.setVisible(true);
		vti_alarm_min.invalidate();
		if(vti_alarm_minVal == -1)
		{
			Unicode::strncpy(vti_alarm_minBuffer, "Off", 3);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.resizeToCurrentText();
			vti_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_VteAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (!selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(true);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!vte_alarm_big_max.isVisible() && !vte_alarm_big_min.isVisible())
	{
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
			RR_alarm_big_min.setVisible(false);
			RR_alarm_big_min.invalidate();
			RR_alarm_min.setVisible(true);
			RR_alarm_min.invalidate();
			Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}

		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		// go to max
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vte_alarm_big_max.setVisible(true);
		vte_alarm_big_max.invalidate();
		vte_alarm_max.setVisible(false);
		vte_alarm_max.invalidate();
		vte_alarm_min.setVisible(true);
		vte_alarm_min.invalidate();
		vte_alarm_big_min.setVisible(false);
		vte_alarm_big_min.invalidate();
		if(vte_alarm_maxVal == -1)
		{
			Unicode::strncpy(vte_alarm_big_maxBuffer, "Off", 3);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_maxBuffer);
			vte_alarm_big_min.resizeToCurrentText();
			vte_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vte_alarm_big_maxBuffer, VTE_ALARM_BIG_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_maxBuffer);
			vte_alarm_big_min.invalidate();
		}
		
		state = VTE_MAX;
	}
	else if (vte_alarm_big_max.isVisible())
	{
		// go to min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vte_alarm_big_min.setVisible(true);
		vte_alarm_big_min.invalidate();
		vte_alarm_min.setVisible(false);
		vte_alarm_min.invalidate();
		vte_alarm_max.setVisible(true);
		vte_alarm_max.invalidate();
		vte_alarm_big_max.setVisible(false);
		vte_alarm_big_max.invalidate();
		if(vte_alarm_maxVal == -1)
		{
			Unicode::strncpy(vte_alarm_maxBuffer, "Off", 3);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.resizeToCurrentText();
			vte_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
		}
		
		if(vte_alarm_minVal == -1)
		{
			Unicode::strncpy(vte_alarm_big_minBuffer, "Off", 3);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_minBuffer);
			vte_alarm_big_min.resizeToCurrentText();
			vte_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vte_alarm_big_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_minBuffer);
			vte_alarm_big_min.invalidate();
		}
		
		state = VTE_MIN;
	}
	else if (vte_alarm_big_min.isVisible())
	{
		// close min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		vte_alarm_big_min.setVisible(false);
		vte_alarm_big_min.invalidate();
		vte_alarm_min.setVisible(true);
		vte_alarm_min.invalidate();
		if(vte_alarm_minVal == -1)
		{
			Unicode::strncpy(vte_alarm_minBuffer, "Off", 3);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.resizeToCurrentText();
			vte_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_MViAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (!selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(true);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!MVi_alarm_big_max.isVisible() && !MVi_alarm_big_min.isVisible())
	{
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
			RR_alarm_big_min.setVisible(false);
			RR_alarm_big_min.invalidate();
			RR_alarm_min.setVisible(true);
			RR_alarm_min.invalidate();
			Unicode::snprintf(RR_alarm_minBuffer, RR_ALARM_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_min.setWildcard1(RR_alarm_minBuffer);
			RR_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		// go to max
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVi_alarm_big_max.setVisible(true);
		MVi_alarm_big_max.invalidate();
		MVi_alarm_max.setVisible(false);
		MVi_alarm_max.invalidate();
		MVi_alarm_min.setVisible(true);
		MVi_alarm_min.invalidate();
		MVi_alarm_big_min.setVisible(false);
		MVi_alarm_big_min.invalidate();
		if(MVi_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVi_alarm_big_maxBuffer, "Off", 3);
			MVi_alarm_big_max.setWildcard1(MVi_alarm_big_maxBuffer);
			MVi_alarm_big_max.resizeToCurrentText();
			MVi_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_big_maxBuffer, MVI_ALARM_BIG_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_big_max.setWildcard1(MVi_alarm_big_maxBuffer);
			MVi_alarm_big_max.invalidate();
		}
		
		state = MVI_MAX;
	}
	else if (MVi_alarm_big_max.isVisible())
	{
		// go to min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVi_alarm_big_min.setVisible(true);
		MVi_alarm_big_min.invalidate();
		MVi_alarm_min.setVisible(false);
		MVi_alarm_min.invalidate();
		MVi_alarm_max.setVisible(true);
		MVi_alarm_max.invalidate();
		MVi_alarm_big_max.setVisible(false);
		MVi_alarm_big_max.invalidate();
		if(MVi_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVi_alarm_maxBuffer, "Off", 3);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.resizeToCurrentText();
			MVi_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE,"%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
		}
		
		if(MVi_alarm_minVal == -1)
		{
			Unicode::strncpy(MVi_alarm_big_minBuffer, "Off", 3);
			MVi_alarm_big_min.setWildcard1(MVi_alarm_big_minBuffer);
			MVi_alarm_big_min.resizeToCurrentText();
			MVi_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_big_minBuffer, MVI_ALARM_BIG_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_big_min.setWildcard1(MVi_alarm_big_minBuffer);
			MVi_alarm_big_min.invalidate();
		}
		
		state = MVI_MIN;
	}
	else if (MVi_alarm_big_min.isVisible())
	{
		// close min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVi_alarm_big_min.setVisible(false);
		MVi_alarm_big_min.invalidate();
		MVi_alarm_min.setVisible(true);
		MVi_alarm_min.invalidate();
		if(MVi_alarm_minVal == -1)
		{
			Unicode::strncpy(MVi_alarm_minBuffer, "Off", 3);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.resizeToCurrentText();
			MVi_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_MVeAlarmbtn()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (!selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(true);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}
	
	if (!MVe_alarm_big_max.isVisible() && !MVe_alarm_big_min.isVisible())
	{
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}

		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		// go to max
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVe_alarm_big_max.setVisible(true);
		MVe_alarm_big_max.invalidate();
		MVe_alarm_max.setVisible(false);
		MVe_alarm_max.invalidate();
		MVe_alarm_min.setVisible(true);
		MVe_alarm_min.invalidate();
		MVe_alarm_big_min.setVisible(false);
		MVe_alarm_big_min.invalidate();
		if(MVe_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVe_alarm_big_maxBuffer, "Off", 3);
			MVe_alarm_big_max.setWildcard1(MVe_alarm_big_maxBuffer);
			MVe_alarm_big_max.resizeToCurrentText();
			MVe_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVe_alarm_big_maxBuffer, MVE_ALARM_BIG_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_big_max.setWildcard1(MVe_alarm_big_maxBuffer);
			MVe_alarm_big_max.invalidate();
		}
		
		state = MVE_MAX;
	}
	else if (MVe_alarm_big_max.isVisible())
	{
		// go to min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVe_alarm_big_min.setVisible(true);
		MVe_alarm_big_min.invalidate();
		MVe_alarm_min.setVisible(false);
		MVe_alarm_min.invalidate();
		MVe_alarm_max.setVisible(true);
		MVe_alarm_max.invalidate();
		MVe_alarm_big_max.setVisible(false);
		MVe_alarm_big_max.invalidate();
		
		if(MVe_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVe_alarm_maxBuffer, "Off", 3);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.resizeToCurrentText();
			MVe_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_max.setWildcard1(MVe_alarm_maxBuffer);
			MVe_alarm_max.invalidate();
		}
		
		if(MVe_alarm_minVal == -1)
		{
			Unicode::strncpy(MVe_alarm_big_minBuffer, "Off", 3);
			MVe_alarm_big_min.setWildcard1(MVe_alarm_big_minBuffer);
			MVe_alarm_big_min.resizeToCurrentText();
			MVe_alarm_big_min.invalidate();			
		}
		else
		{
			Unicode::snprintf(MVe_alarm_big_minBuffer, MVE_ALARM_BIG_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_big_min.setWildcard1(MVe_alarm_big_minBuffer);
			MVe_alarm_big_min.invalidate();
		}
		
		state = MVE_MIN;
	}
	else if (MVe_alarm_big_min.isVisible())
	{
		// close min
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		MVe_alarm_big_min.setVisible(false);
		MVe_alarm_big_min.invalidate();
		MVe_alarm_min.setVisible(true);
		MVe_alarm_min.invalidate();
		if(MVe_alarm_minVal == -1)
		{
			Unicode::strncpy(MVe_alarm_minBuffer, "Off", 3);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.resizeToCurrentText();
			MVe_alarm_min.invalidate();			
		}
		else
		{
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		state = ALARM;
	}
}

void screenView::click_FiO2Alarm()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (!selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(true);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}
	
	if (!FiO2_alarm_big_maxVal.isVisible() && !FiO2_alarm_big_minVal.isVisible())
	{
		if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
		}
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		FiO2_alarm_maxVal.setVisible(false);
		FiO2_alarm_maxVal.invalidate();
		FiO2_alarm_big_maxVal.setVisible(true);
		FiO2_alarm_big_maxVal.invalidate();
		Unicode::snprintf(FiO2_alarm_big_maxValBuffer, FIO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
		FiO2_alarm_big_maxVal.setWildcard1(FiO2_alarm_big_maxValBuffer);
		FiO2_alarm_big_maxVal.invalidate();
		state = FIO2_MAX;
	}
	else if (FiO2_alarm_big_maxVal.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		FiO2_alarm_big_maxVal.setVisible(false);
		FiO2_alarm_big_maxVal.invalidate();
		FiO2_alarm_maxVal.setVisible(true);
		FiO2_alarm_maxVal.invalidate();
		FiO2_alarm_big_minVal.setVisible(true);
		FiO2_alarm_big_minVal.invalidate();
		FiO2_alarm_minVal.setVisible(false);
		FiO2_alarm_minVal.invalidate();
		if(FiO2_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(FiO2_alarm_maxValBuffer, "Off", 3);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.resizeToCurrentText();
			FiO2_alarm_maxVal.invalidate();			
		}
		else
		{
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
		}
		
		if(FiO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(FiO2_alarm_big_minValBuffer, "Off", 3);
			FiO2_alarm_big_minVal.setWildcard1(FiO2_alarm_big_minValBuffer);
			FiO2_alarm_big_minVal.resizeToCurrentText();
			FiO2_alarm_big_minVal.invalidate();	
		}
		else
		{
			Unicode::snprintf(FiO2_alarm_big_minValBuffer, FIO2_ALARM_BIG_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_big_minVal.setWildcard1(FiO2_alarm_big_minValBuffer);
			FiO2_alarm_big_minVal.invalidate();
		}
		
		state = FIO2_MIN;
	}
	else if (FiO2_alarm_big_minVal.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		FiO2_alarm_big_minVal.setVisible(false);
		FiO2_alarm_big_minVal.invalidate();
		FiO2_alarm_minVal.setVisible(true);
		FiO2_alarm_minVal.invalidate();
		if(FiO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(FiO2_alarm_minValBuffer, "Off", 3);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.resizeToCurrentText();
			FiO2_alarm_minVal.invalidate();
		}
		else
		{
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		state = ALARM;
	}
}

void screenView::click_leakAlarm()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (!selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(true);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!Leak_alarm_big_max.isVisible())
	{
		if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
		}
		else if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		Leak_alarm_max.setVisible(false);
		Leak_alarm_max.invalidate();
		Leak_alarm_big_max.setVisible(true);
		Leak_alarm_big_max.invalidate();
		Unicode::snprintf(Leak_alarm_big_maxBuffer, LEAK_ALARM_BIG_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
		Leak_alarm_big_max.setWildcard1(Leak_alarm_big_maxBuffer);
		Leak_alarm_big_max.invalidate();
		state = LEAK_MAX;
	}
	else if (Leak_alarm_big_max.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		Leak_alarm_big_max.setVisible(false);
		Leak_alarm_big_max.invalidate();
		Leak_alarm_max.setVisible(true);
		Leak_alarm_max.invalidate();
		if(Leak_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(Leak_alarm_maxBuffer, "Off", 3);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.resizeToCurrentText();
			Leak_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		
		state = ALARM;
	}
	
}
void screenView::click_lowPEEP()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (!selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(true);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(false);
		selector_SPO2AlarmSetting.invalidate();
	}

	if (!LowPEEP_alarm_big_Off.isVisible() && !LowPEEP_alarm_big_ON.isVisible())
	{
		if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
		}
		else if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		else if (SPO2_alarm_big_maxVal.isVisible() || SPO2_alarm_big_minVal.isVisible())
		{
			SPO2_alarm_big_maxVal.setVisible(false);
			SPO2_alarm_big_maxVal.invalidate();
			SPO2_alarm_maxVal.setVisible(true);
			SPO2_alarm_maxVal.invalidate();
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
			SPO2_alarm_big_minVal.setVisible(false);
			SPO2_alarm_big_minVal.invalidate();
			SPO2_alarm_minVal.setVisible(true);
			SPO2_alarm_minVal.invalidate();
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
			
		LowPEEP_alarm_Off.setVisible(false);
		LowPEEP_alarm_Off.invalidate();
		LowPEEP_alarm_On.setVisible(false);
		LowPEEP_alarm_On.invalidate();
		if(isLowPEEP_alarm)
		{
			LowPEEP_alarm_big_ON.setVisible(true);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else
		{
			LowPEEP_alarm_big_Off.setVisible(true);
			LowPEEP_alarm_big_Off.invalidate();
		}
		state = LOWPEEP;
	}
	else if (LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		LowPEEP_alarm_big_Off.setVisible(false);
		LowPEEP_alarm_big_Off.invalidate();
		LowPEEP_alarm_big_ON.setVisible(false);
		LowPEEP_alarm_big_ON.invalidate();
		if(isLowPEEP_alarm)
		{
			LowPEEP_alarm_On.setVisible(true);
			LowPEEP_alarm_On.invalidate();
		}
		else
		{
			LowPEEP_alarm_Off.setVisible(true);
			LowPEEP_alarm_Off.invalidate();
		}
		state = ALARM;
	}
		
}
void screenView::click_SPO2Alarm()
{
	pressKey = 0;
	if (selector_backAlarmSetting.isVisible())
	{
		selector_backAlarmSetting.setVisible(false);
		selector_backAlarmSetting.invalidate();
	}
	if (selector_RRAlarmSetting.isVisible())
	{
		selector_RRAlarmSetting.setVisible(false);
		selector_RRAlarmSetting.invalidate();
	}
	if (selector_pressureAlarmSetting.isVisible())
	{
		selector_pressureAlarmSetting.setVisible(false);
		selector_pressureAlarmSetting.invalidate();
	}
	if (selector_VtiAlarmSetting.isVisible())
	{
		selector_VtiAlarmSetting.setVisible(false);
		selector_VtiAlarmSetting.invalidate();
	}
	if (selector_VteAlarmSetting.isVisible())
	{
		selector_VteAlarmSetting.setVisible(false);
		selector_VteAlarmSetting.invalidate();
	}
	if (selector_MViAlarmSetting.isVisible())
	{
		selector_MViAlarmSetting.setVisible(false);
		selector_MViAlarmSetting.invalidate();
	}
	if (selector_MVeAlarmSetting.isVisible())
	{
		selector_MVeAlarmSetting.setVisible(false);
		selector_MVeAlarmSetting.invalidate();
	}
	if (selector_FiO2AlarmSetting.isVisible())
	{
		selector_FiO2AlarmSetting.setVisible(false);
		selector_FiO2AlarmSetting.invalidate();
	}
	if (selector_LeakAlarmSetting.isVisible())
	{
		selector_LeakAlarmSetting.setVisible(false);
		selector_LeakAlarmSetting.invalidate();
	}
	if (selector_lowPEEPAlarmSetting.isVisible())
	{
		selector_lowPEEPAlarmSetting.setVisible(false);
		selector_lowPEEPAlarmSetting.invalidate();
	}
	if (selector_ApneaAlarmSetting.isVisible())
	{
		selector_ApneaAlarmSetting.setVisible(false);
		selector_ApneaAlarmSetting.invalidate();
		selector_backApneaAlarmSetting.setVisible(false);
		selector_backApneaAlarmSetting.invalidate();
	}
	if (!selector_SPO2AlarmSetting.isVisible())
	{
		selector_SPO2AlarmSetting.setVisible(true);
		selector_SPO2AlarmSetting.invalidate();
	}
	if (!SPO2_alarm_big_maxVal.isVisible() && !SPO2_alarm_big_minVal.isVisible())
	{
		if (RR_alarm_big_max.isVisible() || RR_alarm_big_min.isVisible())
		{
			RR_alarm_big_max.setVisible(false);
			RR_alarm_big_max.invalidate();
			RR_alarm_max.setVisible(true);
			RR_alarm_max.invalidate();
			Unicode::snprintf(RR_alarm_maxBuffer, RR_ALARM_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_max.setWildcard1(RR_alarm_maxBuffer);
			RR_alarm_max.invalidate();
		}
		if (pressure_alarm_big_max.isVisible() || pressure_alarm_big_min.isVisible())
		{
			pressure_alarm_big_min.setVisible(false);
			pressure_alarm_big_min.invalidate();
			pressure_alarm_min.setVisible(true);
			pressure_alarm_min.invalidate();
			pressure_alarm_big_max.setVisible(false);
			pressure_alarm_big_max.invalidate();
			pressure_alarm_max.setVisible(true);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_maxBuffer, PRESSURE_ALARM_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pressure_alarm_max.invalidate();
			Unicode::snprintf(pressure_alarm_minBuffer, PRESSURE_ALARM_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_min.setWildcard1(pressure_alarm_minBuffer);
			pressure_alarm_min.invalidate();
		}
		else if (FiO2_alarm_big_maxVal.isVisible() || FiO2_alarm_big_minVal.isVisible())
		{
			FiO2_alarm_big_maxVal.setVisible(false);
			FiO2_alarm_big_maxVal.invalidate();
			FiO2_alarm_maxVal.setVisible(true);
			FiO2_alarm_maxVal.invalidate();
			Unicode::snprintf(FiO2_alarm_maxValBuffer, FIO2_ALARM_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_maxVal.setWildcard1(FiO2_alarm_maxValBuffer);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_minVal.setVisible(false);
			FiO2_alarm_big_minVal.invalidate();
			FiO2_alarm_minVal.setVisible(true);
			FiO2_alarm_minVal.invalidate();
			Unicode::snprintf(FiO2_alarm_minValBuffer, FIO2_ALARM_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_minVal.setWildcard1(FiO2_alarm_minValBuffer);
			FiO2_alarm_minVal.invalidate();
		}
		else if (vti_alarm_big_max.isVisible() || vti_alarm_big_min.isVisible())
		{
			vti_alarm_big_min.setVisible(false);
			vti_alarm_big_min.invalidate();
			vti_alarm_min.setVisible(true);
			vti_alarm_min.invalidate();
			vti_alarm_big_max.setVisible(false);
			vti_alarm_big_max.invalidate();
			vti_alarm_max.setVisible(true);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_maxBuffer, VTI_ALARM_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_max.setWildcard1(vti_alarm_maxBuffer);
			vti_alarm_max.invalidate();
			Unicode::snprintf(vti_alarm_minBuffer, VTI_ALARM_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_min.setWildcard1(vti_alarm_minBuffer);
			vti_alarm_min.invalidate();
		}
		else if (vte_alarm_big_max.isVisible() || vte_alarm_big_min.isVisible())
		{
			vte_alarm_big_min.setVisible(false);
			vte_alarm_big_min.invalidate();
			vte_alarm_min.setVisible(true);
			vte_alarm_min.invalidate();
			vte_alarm_big_max.setVisible(false);
			vte_alarm_big_max.invalidate();
			vte_alarm_max.setVisible(true);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_maxBuffer, VTE_ALARM_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_max.setWildcard1(vte_alarm_maxBuffer);
			vte_alarm_max.invalidate();
			Unicode::snprintf(vte_alarm_minBuffer, VTE_ALARM_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_min.setWildcard1(vte_alarm_minBuffer);
			vte_alarm_min.invalidate();
		}
		else if (MVi_alarm_big_max.isVisible() || MVi_alarm_big_min.isVisible())
		{
			MVi_alarm_big_min.setVisible(false);
			MVi_alarm_big_min.invalidate();
			MVi_alarm_min.setVisible(true);
			MVi_alarm_min.invalidate();
			MVi_alarm_big_max.setVisible(false);
			MVi_alarm_big_max.invalidate();
			MVi_alarm_max.setVisible(true);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_maxBuffer, MVI_ALARM_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVi_alarm_minBuffer, MVI_ALARM_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_min.setWildcard1(MVi_alarm_minBuffer);
			MVi_alarm_min.invalidate();
		}
		else if (MVe_alarm_big_max.isVisible() || MVe_alarm_big_min.isVisible())
		{
			MVe_alarm_big_min.setVisible(false);
			MVe_alarm_big_min.invalidate();
			MVe_alarm_min.setVisible(true);
			MVe_alarm_min.invalidate();
			MVe_alarm_big_max.setVisible(false);
			MVe_alarm_big_max.invalidate();
			MVe_alarm_max.setVisible(true);
			MVe_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_maxBuffer, MVE_ALARM_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVi_alarm_max.setWildcard1(MVi_alarm_maxBuffer);
			MVi_alarm_max.invalidate();
			Unicode::snprintf(MVe_alarm_minBuffer, MVE_ALARM_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_min.setWildcard1(MVe_alarm_minBuffer);
			MVe_alarm_min.invalidate();
		}
		else if(LowPEEP_alarm_big_Off.isVisible() || LowPEEP_alarm_big_ON.isVisible())
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			if(isLowPEEP_alarm)
			{
				LowPEEP_alarm_Off.setVisible(false);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(true);
				LowPEEP_alarm_On.invalidate();	
			}
			else
			{
				LowPEEP_alarm_Off.setVisible(true);
				LowPEEP_alarm_Off.invalidate();
				LowPEEP_alarm_On.setVisible(false);
				LowPEEP_alarm_On.invalidate();	
			}			
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else if(Leak_alarm_big_max.isVisible())
		{
			Leak_alarm_big_max.setVisible(false);
			Leak_alarm_big_max.invalidate();
			Leak_alarm_max.setVisible(true);
			Leak_alarm_max.invalidate();
			
			Unicode::snprintf(Leak_alarm_maxBuffer, LEAK_ALARM_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_max.setWildcard1(Leak_alarm_maxBuffer);
			Leak_alarm_max.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		SPO2_alarm_maxVal.setVisible(false);
		SPO2_alarm_maxVal.invalidate();
		SPO2_alarm_big_maxVal.setVisible(true);
		SPO2_alarm_big_maxVal.invalidate();
		if(SPO2_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_big_maxValBuffer, "Off", 3);
			SPO2_alarm_big_maxVal.setWildcard1(SPO2_alarm_big_maxValBuffer);
			SPO2_alarm_big_maxVal.resizeToCurrentText();
			SPO2_alarm_big_maxVal.invalidate();
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_big_maxValBuffer, SPO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_big_maxVal.setWildcard1(SPO2_alarm_big_maxValBuffer);
			SPO2_alarm_big_maxVal.invalidate();
		}
		
		state = SPO2_MAX;
	}
	else if (SPO2_alarm_big_maxVal.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		SPO2_alarm_big_maxVal.setVisible(false);
		SPO2_alarm_big_maxVal.invalidate();
		SPO2_alarm_maxVal.setVisible(true);
		SPO2_alarm_maxVal.invalidate();
		SPO2_alarm_big_minVal.setVisible(true);
		SPO2_alarm_big_minVal.invalidate();
		SPO2_alarm_minVal.setVisible(false);
		SPO2_alarm_minVal.invalidate();
		if(SPO2_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_maxValBuffer, "Off", 3);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.resizeToCurrentText();
			SPO2_alarm_maxVal.invalidate();
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_maxValBuffer, SPO2_ALARM_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_maxVal.setWildcard1(SPO2_alarm_maxValBuffer);
			SPO2_alarm_maxVal.invalidate();
		}
		
		if(SPO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_big_minValBuffer, "Off", 3);
			SPO2_alarm_big_minVal.setWildcard1(SPO2_alarm_big_minValBuffer);
			SPO2_alarm_big_minVal.resizeToCurrentText();
			SPO2_alarm_big_minVal.invalidate();
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_big_minValBuffer, SPO2_ALARM_BIG_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_big_minVal.setWildcard1(SPO2_alarm_big_minValBuffer);
			SPO2_alarm_big_minVal.invalidate();
		}
		
		state = SPO2_MIN;
	}
	else if (SPO2_alarm_big_minVal.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		SPO2_alarm_big_minVal.setVisible(false);
		SPO2_alarm_big_minVal.invalidate();
		SPO2_alarm_minVal.setVisible(true);
		SPO2_alarm_minVal.invalidate();
		if(SPO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_minValBuffer, "Off", 3);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.resizeToCurrentText();
			SPO2_alarm_minVal.invalidate();
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_minValBuffer, SPO2_ALARM_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_minVal.setWildcard1(SPO2_alarm_minValBuffer);
			SPO2_alarm_minVal.invalidate();
		}
		
		state = ALARM;
	}
}

void screenView::click_backApneaAlarm()
{
	selector_backApneaAlarmSetting.setVisible(false);
	selector_backApneaAlarmSetting.invalidate();
	apnea_alarmIntval=-1; // -1 = off
	tmp = key1 = 0;
	encoderCounter=0;
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	state = ALARM;
}
void screenView::click_toggleApnea()
{
	pressKey=0;
	if(!toggleButton_apnea.getState())
	{
		// off
		apnea_alarmIntval=0;
		backupMode_intval = -1; // -1 = off
		tmp = key1 = 0;
		encoderCounter=0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		state = ALARM;
		
		container_backupSetting.setVisible(false);
		container_backupSetting.invalidate();
	}
	else
	{
		// go to handle the value
		backupMode_intval = 0; // (alarm only)
		tmp = key1 = 0;
		encoderCounter=0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		state = APNEA_ALARM_VAL;
		
		container_backupSetting.setVisible(true);
		container_backupSetting.invalidate();
	}
}

void screenView::click_circuitDisAlarm()
{
	pressKey = 0;
	if (selector_previousPageAlarm.isVisible())
	{
		selector_previousPageAlarm.setVisible(false);
		selector_previousPageAlarm.invalidate();
	}
	if (!selector_circuitDisAlarmSetting.isVisible())
	{
		selector_circuitDisAlarmSetting.setVisible(true);
		selector_circuitDisAlarmSetting.invalidate();
	}
	if (selector_pulseRateAlarmSetting.isVisible())
	{
		selector_pulseRateAlarmSetting.setVisible(false);
		selector_pulseRateAlarmSetting.invalidate();
	}
	if (selector_obstructionAlarmSetting.isVisible())
	{
		selector_obstructionAlarmSetting.setVisible(false);
		selector_obstructionAlarmSetting.invalidate();
	}
	if (selector_ventStopedAlarmSetting.isVisible())
	{
		selector_ventStopedAlarmSetting.setVisible(false);
		selector_ventStopedAlarmSetting.invalidate();
	}
	
	
	if (!CircuitDis_alarm_big.isVisible())
	{
		if (pulseRate_alarm_big_max.isVisible() || pulseRate_alarm_big_min.isVisible())
		{
			pulseRate_alarm_big_min.setVisible(false);
			pulseRate_alarm_big_min.invalidate();
			pulseRate_alarm_min.setVisible(true);
			pulseRate_alarm_min.invalidate();
			pulseRate_alarm_big_max.setVisible(false);
			pulseRate_alarm_big_max.invalidate();
			pulseRate_alarm_max.setVisible(true);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_maxBuffer, PULSERATE_ALARM_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_minBuffer, PULSERATE_ALARM_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
			pulseRate_alarm_min.invalidate();
		}
		else if (obstruction_alarm_big_max.isVisible() || obstruction_alarm_big_min.isVisible())
		{
			obstruction_alarm_big_max.setVisible(false);
			obstruction_alarm_big_max.invalidate();
			obstruction_alarm_max.setVisible(true);
			obstruction_alarm_max.invalidate();
			Unicode::snprintf(obstruction_alarm_maxBuffer, OBSTRUCTION_ALARM_MAX_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_max.setWildcard1(obstruction_alarm_maxBuffer);
			obstruction_alarm_max.invalidate();
			obstruction_alarm_big_min.setVisible(false);
			obstruction_alarm_big_min.invalidate();
			obstruction_alarm_min.setVisible(true);
			obstruction_alarm_min.invalidate();
			Unicode::snprintf(obstruction_alarm_minBuffer, OBSTRUCTION_ALARM_MIN_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_min.setWildcard1(obstruction_alarm_minBuffer);
			obstruction_alarm_min.invalidate();
		}
		else if(ventStoped_alarm_big_Off.isVisible() || ventStoped_alarm_big_ON.isVisible())
		{
			ventStoped_alarm_big_Off.setVisible(false);
			ventStoped_alarm_big_Off.invalidate();
			if(isVentStoped_alarm)
			{
				ventStoped_alarm_Off.setVisible(false);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(true);
				ventStoped_alarm_On.invalidate();	
			}
			else
			{
				ventStoped_alarm_Off.setVisible(true);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(false);
				ventStoped_alarm_On.invalidate();	
			}			
			ventStoped_alarm_big_ON.setVisible(false);
			ventStoped_alarm_big_ON.invalidate();
		}
		
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		CircuitDis_alarm.setVisible(false);
		CircuitDis_alarm.invalidate();
		CircuitDis_alarm_big.setVisible(true);
		CircuitDis_alarm_big.invalidate();
		Unicode::snprintf(CircuitDis_alarm_bigBuffer, CIRCUITDIS_ALARM_BIG_SIZE, "%d", (int)circuitDis_intval);
		CircuitDis_alarm_big.setWildcard1(CircuitDis_alarm_bigBuffer);
		CircuitDis_alarm_big.invalidate();
		state = CIRCUIT_ALARM;
	}
	else if (CircuitDis_alarm_big.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		CircuitDis_alarm_big.setVisible(false);
		CircuitDis_alarm_big.invalidate();
		CircuitDis_alarm.setVisible(true);
		CircuitDis_alarm.invalidate();
		
		if(circuitDis_intval == -1)
		{
			Unicode::strncpy(CircuitDis_alarmBuffer, "Off  ", 5);
			CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
			CircuitDis_alarm.resizeToCurrentText();
			CircuitDis_alarm.invalidate();
		}
		else
		{
			Unicode::snprintf(CircuitDis_alarmBuffer, CIRCUITDIS_ALARM_SIZE, "%d", (int)circuitDis_intval);
			CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
			CircuitDis_alarm.invalidate();
		}
		
		state = ALARM_NEXTPAGE;
	}
	
}
void screenView::click_pulsRateAlarm()
{
	pressKey = 0;
	if (selector_previousPageAlarm.isVisible())
	{
		selector_previousPageAlarm.setVisible(false);
		selector_previousPageAlarm.invalidate();
	}
	if (selector_circuitDisAlarmSetting.isVisible())
	{
		selector_circuitDisAlarmSetting.setVisible(false);
		selector_circuitDisAlarmSetting.invalidate();
	}
	if (!selector_pulseRateAlarmSetting.isVisible())
	{
		selector_pulseRateAlarmSetting.setVisible(true);
		selector_pulseRateAlarmSetting.invalidate();
	}
	if (selector_obstructionAlarmSetting.isVisible())
	{
		selector_obstructionAlarmSetting.setVisible(false);
		selector_obstructionAlarmSetting.invalidate();
	}
	if (selector_ventStopedAlarmSetting.isVisible())
	{
		selector_ventStopedAlarmSetting.setVisible(false);
		selector_ventStopedAlarmSetting.invalidate();
	}
	
	
	if (!pulseRate_alarm_big_max.isVisible() && !pulseRate_alarm_big_min.isVisible())
	{
		if (CircuitDis_alarm_big.isVisible())
		{
			CircuitDis_alarm_big.setVisible(false);
			CircuitDis_alarm_big.invalidate();
			CircuitDis_alarm.setVisible(true);
			CircuitDis_alarm.invalidate();
			
			Unicode::snprintf(CircuitDis_alarmBuffer, CIRCUITDIS_ALARM_SIZE, "%d", (int)circuitDis_intval);
			CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
			CircuitDis_alarm.invalidate();
		}
		else if (obstruction_alarm_big_max.isVisible() || obstruction_alarm_big_min.isVisible())
		{
			obstruction_alarm_big_max.setVisible(false);
			obstruction_alarm_big_max.invalidate();
			obstruction_alarm_max.setVisible(true);
			obstruction_alarm_max.invalidate();
			Unicode::snprintf(obstruction_alarm_maxBuffer, OBSTRUCTION_ALARM_MAX_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_max.setWildcard1(obstruction_alarm_maxBuffer);
			obstruction_alarm_max.invalidate();
			obstruction_alarm_big_min.setVisible(false);
			obstruction_alarm_big_min.invalidate();
			obstruction_alarm_min.setVisible(true);
			obstruction_alarm_min.invalidate();
			Unicode::snprintf(obstruction_alarm_minBuffer, OBSTRUCTION_ALARM_MIN_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_min.setWildcard1(obstruction_alarm_minBuffer);
			obstruction_alarm_min.invalidate();
		}
		else if(ventStoped_alarm_big_Off.isVisible() || ventStoped_alarm_big_ON.isVisible())
		{
			ventStoped_alarm_big_Off.setVisible(false);
			ventStoped_alarm_big_Off.invalidate();
			if(isVentStoped_alarm)
			{
				ventStoped_alarm_Off.setVisible(false);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(true);
				ventStoped_alarm_On.invalidate();	
			}
			else
			{
				ventStoped_alarm_Off.setVisible(true);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(false);
				ventStoped_alarm_On.invalidate();	
			}			
			ventStoped_alarm_big_ON.setVisible(false);
			ventStoped_alarm_big_ON.invalidate();
		}
		
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		pulseRate_alarm_max.setVisible(false);
		pulseRate_alarm_max.invalidate();
		pulseRate_alarm_big_max.setVisible(true);
		pulseRate_alarm_big_max.invalidate();
		if(pulseRate_maxIntVal == -1)
		{
			Unicode::strncpy(pulseRate_alarm_big_maxBuffer, "Off", 3);
			pulseRate_alarm_big_max.setWildcard1(pulseRate_alarm_big_maxBuffer);
			pulseRate_alarm_big_max.resizeToCurrentText();
			pulseRate_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_big_maxBuffer, PULSERATE_ALARM_BIG_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_big_max.setWildcard1(pulseRate_alarm_big_maxBuffer);
			pulseRate_alarm_big_max.invalidate();
		}
		
		state = PULSERATE_MAX;
	}
	else if (pulseRate_alarm_big_max.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		pulseRate_alarm_big_max.setVisible(false);
		pulseRate_alarm_big_max.invalidate();
		pulseRate_alarm_max.setVisible(true);
		pulseRate_alarm_max.invalidate();
		pulseRate_alarm_big_min.setVisible(true);
		pulseRate_alarm_big_min.invalidate();
		pulseRate_alarm_min.setVisible(false);
		pulseRate_alarm_min.invalidate();
		if(pulseRate_maxIntVal == -1)
		{
			Unicode::strncpy(pulseRate_alarm_maxBuffer, "Off", 3);
			pulseRate_alarm_max.setWildcard1(pulseRate_alarm_maxBuffer);
			pulseRate_alarm_max.resizeToCurrentText();
			pulseRate_alarm_max.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_maxBuffer, PULSERATE_ALARM_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_max.setWildcard1(pulseRate_alarm_maxBuffer);
			pulseRate_alarm_max.invalidate();	
		}
		
		if(pulseRate_minIntVal == -1)
		{
			Unicode::strncpy(pulseRate_alarm_big_minBuffer, "Off", 3);
			pulseRate_alarm_big_min.setWildcard1(pulseRate_alarm_big_minBuffer);
			pulseRate_alarm_big_min.resizeToCurrentText();
			pulseRate_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_big_minBuffer, PULSERATE_ALARM_BIG_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_big_min.setWildcard1(pulseRate_alarm_big_minBuffer);
			pulseRate_alarm_big_min.invalidate();
		}
		
		state = PULSERATE_MIN;
	}
	else if (pulseRate_alarm_big_min.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		pulseRate_alarm_big_min.setVisible(false);
		pulseRate_alarm_big_min.invalidate();
		pulseRate_alarm_min.setVisible(true);
		pulseRate_alarm_min.invalidate();
		if(pulseRate_minIntVal == -1)
		{
			Unicode::strncpy(pulseRate_alarm_minBuffer, "Off", 3);
			pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
			pulseRate_alarm_min.resizeToCurrentText();
			pulseRate_alarm_min.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_minBuffer, PULSERATE_ALARM_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
			pulseRate_alarm_min.invalidate();
		}
		
		state = ALARM_NEXTPAGE;
	}
}

void screenView::click_obstructionAlarm()
{
	pressKey = 0;
	if (selector_previousPageAlarm.isVisible())
	{
		selector_previousPageAlarm.setVisible(false);
		selector_previousPageAlarm.invalidate();
	}
	if (selector_circuitDisAlarmSetting.isVisible())
	{
		selector_circuitDisAlarmSetting.setVisible(false);
		selector_circuitDisAlarmSetting.invalidate();
	}
	if (selector_pulseRateAlarmSetting.isVisible())
	{
		selector_pulseRateAlarmSetting.setVisible(false);
		selector_pulseRateAlarmSetting.invalidate();
	}
	if (!selector_obstructionAlarmSetting.isVisible())
	{
		selector_obstructionAlarmSetting.setVisible(true);
		selector_obstructionAlarmSetting.invalidate();
	}
	if (selector_ventStopedAlarmSetting.isVisible())
	{
		selector_ventStopedAlarmSetting.setVisible(false);
		selector_ventStopedAlarmSetting.invalidate();
	}
	
	
	if (!obstruction_alarm_big_max.isVisible() && !obstruction_alarm_big_min.isVisible())
	{
		if (CircuitDis_alarm_big.isVisible())
		{
			CircuitDis_alarm_big.setVisible(false);
			CircuitDis_alarm_big.invalidate();
			CircuitDis_alarm.setVisible(true);
			CircuitDis_alarm.invalidate();
			
			Unicode::snprintf(CircuitDis_alarmBuffer, CIRCUITDIS_ALARM_SIZE, "%d", (int)circuitDis_intval);
			CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
			CircuitDis_alarm.invalidate();
		}
		if (pulseRate_alarm_big_max.isVisible() || pulseRate_alarm_big_min.isVisible())
		{
			pulseRate_alarm_big_min.setVisible(false);
			pulseRate_alarm_big_min.invalidate();
			pulseRate_alarm_min.setVisible(true);
			pulseRate_alarm_min.invalidate();
			pulseRate_alarm_big_max.setVisible(false);
			pulseRate_alarm_big_max.invalidate();
			pulseRate_alarm_max.setVisible(true);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_maxBuffer, PULSERATE_ALARM_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_minBuffer, PULSERATE_ALARM_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
			pulseRate_alarm_min.invalidate();
		}
		else if(ventStoped_alarm_big_Off.isVisible() || ventStoped_alarm_big_ON.isVisible())
		{
			ventStoped_alarm_big_Off.setVisible(false);
			ventStoped_alarm_big_Off.invalidate();
			if(isVentStoped_alarm)
			{
				ventStoped_alarm_Off.setVisible(false);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(true);
				ventStoped_alarm_On.invalidate();	
			}
			else
			{
				ventStoped_alarm_Off.setVisible(true);
				ventStoped_alarm_Off.invalidate();
				ventStoped_alarm_On.setVisible(false);
				ventStoped_alarm_On.invalidate();	
			}			
			ventStoped_alarm_big_ON.setVisible(false);
			ventStoped_alarm_big_ON.invalidate();
		}
		
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		obstruction_alarm_max.setVisible(false);
		obstruction_alarm_max.invalidate();
		obstruction_alarm_big_max.setVisible(true);
		obstruction_alarm_big_max.invalidate();
		Unicode::snprintf(obstruction_alarm_big_maxBuffer, OBSTRUCTION_ALARM_BIG_MAX_SIZE, "%d", (int)obstruction_intval);
		obstruction_alarm_big_max.setWildcard1(obstruction_alarm_big_maxBuffer);
		obstruction_alarm_big_max.invalidate();
		state = OBSTRUCTION_ALARM;
	}
	else if (obstruction_alarm_big_max.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		obstruction_alarm_big_max.setVisible(false);
		obstruction_alarm_big_max.invalidate();
		obstruction_alarm_max.setVisible(true);
		obstruction_alarm_max.invalidate();
		obstruction_alarm_big_min.setVisible(true);
		obstruction_alarm_big_min.invalidate();
		obstruction_alarm_min.setVisible(false);
		obstruction_alarm_min.invalidate();
		Unicode::snprintf(obstruction_alarm_maxBuffer, OBSTRUCTION_ALARM_MAX_SIZE, "%d", (int)obstruction_intval);
		obstruction_alarm_max.setWildcard1(obstruction_alarm_maxBuffer);
		obstruction_alarm_max.invalidate();
		state = OBSTRUCTION_ALARM;// todo: min, or sth else 
	}
	else if (obstruction_alarm_big_min.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		obstruction_alarm_big_min.setVisible(false);
		obstruction_alarm_big_min.invalidate();
		obstruction_alarm_min.setVisible(true);
		obstruction_alarm_min.invalidate();
		Unicode::snprintf(obstruction_alarm_minBuffer, OBSTRUCTION_ALARM_MIN_SIZE, "%d", (int)obstruction_intval);
		obstruction_alarm_min.setWildcard1(obstruction_alarm_minBuffer);
		obstruction_alarm_min.invalidate();
		state = ALARM_NEXTPAGE;
	}
}
void screenView::click_ventStopedAlarm()
{
	pressKey = 0;
	if (selector_previousPageAlarm.isVisible())
	{
		selector_previousPageAlarm.setVisible(false);
		selector_previousPageAlarm.invalidate();
	}
	if (selector_circuitDisAlarmSetting.isVisible())
	{
		selector_circuitDisAlarmSetting.setVisible(false);
		selector_circuitDisAlarmSetting.invalidate();
	}
	if (selector_pulseRateAlarmSetting.isVisible())
	{
		selector_pulseRateAlarmSetting.setVisible(false);
		selector_pulseRateAlarmSetting.invalidate();
	}
	if (selector_obstructionAlarmSetting.isVisible())
	{
		selector_obstructionAlarmSetting.setVisible(false);
		selector_obstructionAlarmSetting.invalidate();
	}
	if (!selector_ventStopedAlarmSetting.isVisible())
	{
		selector_ventStopedAlarmSetting.setVisible(true);
		selector_ventStopedAlarmSetting.invalidate();
	}
	
	if (!ventStoped_alarm_big_Off.isVisible() && !ventStoped_alarm_big_ON.isVisible())
	{
		if (CircuitDis_alarm_big.isVisible())
		{
			CircuitDis_alarm_big.setVisible(false);
			CircuitDis_alarm_big.invalidate();
			CircuitDis_alarm.setVisible(true);
			CircuitDis_alarm.invalidate();
			
			Unicode::snprintf(CircuitDis_alarmBuffer, CIRCUITDIS_ALARM_SIZE, "%d", (int)circuitDis_intval);
			CircuitDis_alarm.setWildcard1(CircuitDis_alarmBuffer);
			CircuitDis_alarm.invalidate();
		}
		else if (pulseRate_alarm_big_max.isVisible() || pulseRate_alarm_big_min.isVisible())
		{
			pulseRate_alarm_big_min.setVisible(false);
			pulseRate_alarm_big_min.invalidate();
			pulseRate_alarm_min.setVisible(true);
			pulseRate_alarm_min.invalidate();
			pulseRate_alarm_big_max.setVisible(false);
			pulseRate_alarm_big_max.invalidate();
			pulseRate_alarm_max.setVisible(true);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_maxBuffer, PULSERATE_ALARM_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_max.setWildcard1(pressure_alarm_maxBuffer);
			pulseRate_alarm_max.invalidate();
			Unicode::snprintf(pulseRate_alarm_minBuffer, PULSERATE_ALARM_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_min.setWildcard1(pulseRate_alarm_minBuffer);
			pulseRate_alarm_min.invalidate();
		}
		else if (obstruction_alarm_big_max.isVisible() || obstruction_alarm_big_min.isVisible())
		{
			obstruction_alarm_big_max.setVisible(false);
			obstruction_alarm_big_max.invalidate();
			obstruction_alarm_max.setVisible(true);
			obstruction_alarm_max.invalidate();
			Unicode::snprintf(obstruction_alarm_maxBuffer, OBSTRUCTION_ALARM_MAX_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_max.setWildcard1(obstruction_alarm_maxBuffer);
			obstruction_alarm_max.invalidate();
			obstruction_alarm_big_min.setVisible(false);
			obstruction_alarm_big_min.invalidate();
			obstruction_alarm_min.setVisible(true);
			obstruction_alarm_min.invalidate();
			Unicode::snprintf(obstruction_alarm_minBuffer, OBSTRUCTION_ALARM_MIN_SIZE, "%d", (int)obstruction_intval);
			obstruction_alarm_min.setWildcard1(obstruction_alarm_minBuffer);
			obstruction_alarm_min.invalidate();
		}
		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
			
		ventStoped_alarm_Off.setVisible(false);
		ventStoped_alarm_Off.invalidate();
		ventStoped_alarm_On.setVisible(false);
		ventStoped_alarm_On.invalidate();
		if(isVentStoped_alarm)
		{
			ventStoped_alarm_big_ON.setVisible(true);
			ventStoped_alarm_big_ON.invalidate();
		}
		else
		{
			ventStoped_alarm_big_Off.setVisible(true);
			ventStoped_alarm_big_Off.invalidate();
		}
		state = VENTSTOPED_ALARM;
	}
	else if (ventStoped_alarm_big_Off.isVisible() || ventStoped_alarm_big_ON.isVisible())
	{
		pressKey = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		ventStoped_alarm_big_Off.setVisible(false);
		ventStoped_alarm_big_Off.invalidate();
		ventStoped_alarm_big_ON.setVisible(false);
		ventStoped_alarm_big_ON.invalidate();
		if(isVentStoped_alarm)
		{
			ventStoped_alarm_On.setVisible(true);
			ventStoped_alarm_On.invalidate();
		}
		else
		{
			ventStoped_alarm_Off.setVisible(true);
			ventStoped_alarm_Off.invalidate();
		}
		state = ALARM_NEXTPAGE;
	}
} 
void screenView::click_FiO2FakeAlarm()
{
	pressKey = 0;
	isFiO2Fake_alarm = !isFiO2Fake_alarm;
	
	if(isFiO2Fake_alarm)
	{
		FiO2_val_ventSetting.setColor(Color::getColorFromRGB(16, 16, 16)); //black
		FiO2_val.setColor(Color::getColorFromRGB(16, 16, 16)); //black
		FiO2Fake_alarm_On.setVisible(true);
		FiO2Fake_alarm_On.invalidate();
		FiO2Fake_alarm_Off.setVisible(false);
		FiO2Fake_alarm_Off.invalidate();
	}
	else
	{
		FiO2_val_ventSetting.setColor(Color::getColorFromRGB(82, 82, 82)); //grey
		FiO2_val.setColor(Color::getColorFromRGB(82, 82, 82)); 
		FiO2Fake_alarm_Off.setVisible(true);
		FiO2Fake_alarm_Off.invalidate();
		FiO2Fake_alarm_On.setVisible(false);
		FiO2Fake_alarm_On.invalidate();
	}	
} 
void screenView::startVent()
{
	if (state != SETTING && state != DEVICE && state != ALARM)
	{
		graph_v.clear();
		graph_flow.clear();
		graph_p.clear();
		
		flag_startVent = 1;
		if(isArabic)
		{
			arb_pauseButton.setVisible(true);
			arb_pauseButton.invalidate();
		}
		else
		{
			pauseButton.setVisible(true);
			pauseButton.invalidate();
		}
		arb_startButton.setVisible(false);
		arb_startButton.invalidate();
		startButton.setVisible(false);
		startButton.invalidate();
		
		sendConfig();
	}
}

void screenView::pauseVent()
{
	if (state != SETTING && state != DEVICE && state != ALARM)
	{
		click_confirm();
		
		lastState = MAIN;
		lastButton = STOPVENT_BUTTON;
		showAlert();
	}
} 


void screenView::handleAlarmShowing()
{
	// every alarm checking and showing occures in every 1 second
	if(tickCounter%60 == 0)
	{
		for (int i = 0; i < 6; i++) 
		{
			bool isNewAlarm = true;

			// Check if the alarm is in the list of previous alarms
			for (int j = 0; j < 6; j++) 
			{
				if(alarm_real[i]==0) // for 0, at that same index
				{
					if(alarm_real[i] == previousAlarms[i])
					{
						isNewAlarm = false;
						break;
					}
				}
				else if (alarm_real[i] == previousAlarms[j]) { // not 0
						isNewAlarm = false;
						break; // Alarm is not new, no need to check further
				}
			}
			
			// clear all the buffers of alarm texts
			uint8_t blankStr[] = "                         "; //25 spaces to Create an empty buffer
			if(isNewAlarm && i==0)
			{
				Unicode::strncpy(alarm_value_topBarBuffer, (const char*)blankStr, 25);// Clear the buffer
				Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)blankStr, 25);// Clear the buffer
				alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
				alarm_value_topBar.invalidate();
				alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
				alarm_activeAlram_1.invalidate();
			}
			if(isNewAlarm && i==1)
			{
				Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)blankStr, 25);
				alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
				alarm_activeAlram_2.invalidate();
			}
			if(isNewAlarm && i==2)
			{
				Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)blankStr, 25);
				alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
				alarm_activeAlram_3.invalidate();
			}
			if(isNewAlarm && i==3)
			{
				Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)blankStr, 25);
				alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
				alarm_activeAlram_4.invalidate();
			}
			if(isNewAlarm && i==4)
			{
				Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)blankStr, 25);
				alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
				alarm_activeAlram_5.invalidate();
			}
			if(isNewAlarm && i==5)
			{
				Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)blankStr, 25);
				alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
				alarm_activeAlram_6.invalidate();
			}

			if(alarm_real[i]==0)
			{
				uint8_t str[24] = "No Alarms";
			
				uint8_t str1[24] = "Alarm Disabled";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str1);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 0;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(false);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					
					if(!alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(true);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(false);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(false);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
				}
				else if(i==2)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(false);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
				}
				else if(i==3)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(false);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
				}
				else if(i==4)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(false);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
				}
				else if(i==5)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(false);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
				}
				
			}
			else if(alarm_real[i] == HIGH_P_H)
			{
				uint8_t str[24] = "High Pressure";
			
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
						
					}
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
				}
				else if(i==2)
				{
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}	
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			}
			else if(alarm_real[i]==HIGH_P_M)
			{
				uint8_t str[24] = "High Pressure(m)";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 2;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(false);
							red_activeAlarm_1.invalidate();
						}
						if(!yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(true);
							yellow_activeAlarm_1.invalidate();
						}
					}
					if(!alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(true);
						alarm_imageYellow_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(false);
						alarm_imageRed_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(false);
							red_activeAlarm_2.invalidate();
						}
						if(!yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(true);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(false);
							red_activeAlarm_3.invalidate();
						}
						if(!yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(true);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(false);
							red_activeAlarm_4.invalidate();
						}
						if(!yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(true);
							yellow_activeAlarm_4.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(false);
							red_activeAlarm_5.invalidate();
						}
						if(!yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(true);
							yellow_activeAlarm_5.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(false);
							red_activeAlarm_6.invalidate();
						}
						if(!yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(true);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			
			}
			else if(alarm_real[i]==HIGH_RR_H)
			{
				uint8_t str[24] = "High RR";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==LOW_RR_H)
			{
				uint8_t str[24] = "Low RR";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==HIGH_MVI_H ) //high mvi 
			{
				uint8_t str[24] = "High MVi";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==LOW_MVI_H ) //low mvi 
			{	
				uint8_t str[24] = "Low MVi";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}							
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==HIGH_MVE_H) //high mve
			{
				uint8_t str[24] = "High MVe";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}					
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
					alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
					alarm_activeAlram_2.resizeToCurrentText();
					alarm_activeAlram_2.invalidate();
					if(!red_activeAlarm_2.isVisible())
					{
						red_activeAlarm_2.setVisible(true);
						red_activeAlarm_2.invalidate();
					}
					if(yellow_activeAlarm_2.isVisible())
					{
						yellow_activeAlarm_2.setVisible(false);
						yellow_activeAlarm_2.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
					alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
					alarm_activeAlram_3.resizeToCurrentText();
					alarm_activeAlram_3.invalidate();
					if(!red_activeAlarm_3.isVisible())
					{
						red_activeAlarm_3.setVisible(true);
						red_activeAlarm_3.invalidate();
					}
					if(yellow_activeAlarm_3.isVisible())
					{
						yellow_activeAlarm_3.setVisible(false);
						yellow_activeAlarm_3.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
					alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
					alarm_activeAlram_4.resizeToCurrentText();
					alarm_activeAlram_4.invalidate();
					if(!red_activeAlarm_4.isVisible())
					{
						red_activeAlarm_4.setVisible(true);
						red_activeAlarm_4.invalidate();
					}
					if(yellow_activeAlarm_4.isVisible())
					{
						yellow_activeAlarm_4.setVisible(false);
						yellow_activeAlarm_4.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
					alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
					alarm_activeAlram_5.resizeToCurrentText();
					alarm_activeAlram_5.invalidate();
					if(!red_activeAlarm_5.isVisible())
					{
						red_activeAlarm_5.setVisible(true);
						red_activeAlarm_5.invalidate();
					}
					if(yellow_activeAlarm_5.isVisible())
					{
						yellow_activeAlarm_5.setVisible(false);
						yellow_activeAlarm_5.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
					alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
					alarm_activeAlram_6.resizeToCurrentText();
					alarm_activeAlram_6.invalidate();
					if(!red_activeAlarm_6.isVisible())
					{
						red_activeAlarm_6.setVisible(true);
						red_activeAlarm_6.invalidate();
					}
					if(yellow_activeAlarm_6.isVisible())
					{
						yellow_activeAlarm_6.setVisible(false);
						yellow_activeAlarm_6.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==LOW_MVE_H ) //low mve
			{	
				uint8_t str[24] = "Low MVe";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					
					if(state == ACTIVE_ALARMS)
					{
						if(isNewAlarm)
						{
							HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
							HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
							Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
							time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
							time_activeAlram_1.resizeToCurrentText();
							time_activeAlram_1.invalidate();
						}
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==HIGH_VTI_H)
			{
				uint8_t str[24] = "High VTi";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==HIGH_VTE_H)
			{	
				uint8_t str[24] = "High VTe";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}				
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(!red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(true);
							red_activeAlarm_2.invalidate();
						}
						if(yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(false);
							yellow_activeAlarm_2.invalidate();
						}							
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(!red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(true);
							red_activeAlarm_3.invalidate();
						}
						if(yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(false);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(!red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(true);
							red_activeAlarm_4.invalidate();
						}
						if(yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(false);
							yellow_activeAlarm_4.invalidate();
						}	
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(!red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(true);
							red_activeAlarm_5.invalidate();
						}
						if(yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(false);
							yellow_activeAlarm_5.invalidate();
						}	
					}					
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(!red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(true);
							red_activeAlarm_6.invalidate();
						}
						if(yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(false);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
				
			}
			else if(alarm_real[i]==HIGH_PEEP_M)
			{
				uint8_t str[24] = "High PEEP(m)";
				int size = sizeof(str)/sizeof(str[0]);
				for(int i = 0; i<=25-size;i++)
					strcat((char*)str, " ");
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 2;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(false);
							red_activeAlarm_1.invalidate();
						}
						if(!yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(true);
							yellow_activeAlarm_1.invalidate();
						}
					}
					
					if(!alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(true);
						alarm_imageYellow_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(false);
						alarm_imageRed_bar.invalidate();
					}
				}
				else if(i==1)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
						alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
						alarm_activeAlram_2.resizeToCurrentText();
						alarm_activeAlram_2.invalidate();
						if(red_activeAlarm_2.isVisible())
						{
							red_activeAlarm_2.setVisible(false);
							red_activeAlarm_2.invalidate();
						}
						if(!yellow_activeAlarm_2.isVisible())
						{
							yellow_activeAlarm_2.setVisible(true);
							yellow_activeAlarm_2.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
						alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
						alarm_activeAlram_3.resizeToCurrentText();
						alarm_activeAlram_3.invalidate();
						if(red_activeAlarm_3.isVisible())
						{
							red_activeAlarm_3.setVisible(false);
							red_activeAlarm_3.invalidate();
						}
						if(!yellow_activeAlarm_3.isVisible())
						{
							yellow_activeAlarm_3.setVisible(true);
							yellow_activeAlarm_3.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
						alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
						alarm_activeAlram_4.resizeToCurrentText();
						alarm_activeAlram_4.invalidate();
						if(red_activeAlarm_4.isVisible())
						{
							red_activeAlarm_4.setVisible(false);
							red_activeAlarm_4.invalidate();
						}
						if(!yellow_activeAlarm_4.isVisible())
						{
							yellow_activeAlarm_4.setVisible(true);
							yellow_activeAlarm_4.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
						alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
						alarm_activeAlram_5.resizeToCurrentText();
						alarm_activeAlram_5.invalidate();
						if(red_activeAlarm_5.isVisible())
						{
							red_activeAlarm_5.setVisible(false);
							red_activeAlarm_5.invalidate();
						}
						if(!yellow_activeAlarm_5.isVisible())
						{
							yellow_activeAlarm_5.setVisible(true);
							yellow_activeAlarm_5.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
						alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
						alarm_activeAlram_6.resizeToCurrentText();
						alarm_activeAlram_6.invalidate();
						if(red_activeAlarm_6.isVisible())
						{
							red_activeAlarm_6.setVisible(false);
							red_activeAlarm_6.invalidate();
						}
						if(!yellow_activeAlarm_6.isVisible())
						{
							yellow_activeAlarm_6.setVisible(true);
							yellow_activeAlarm_6.invalidate();
						}
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			}
			else if(alarm_real[i]==LOW_PEEP_M)
			{	
				uint8_t str[24] = "Low PEEP(m)";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 2;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(false);
							red_activeAlarm_1.invalidate();
						}
						if(!yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(true);
							yellow_activeAlarm_1.invalidate();
						}
					}
					
					if(!alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(true);
						alarm_imageYellow_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(false);
						alarm_imageRed_bar.invalidate();
					}
				}
				else if(i==1)
				{
					Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
					alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
					alarm_activeAlram_2.resizeToCurrentText();
					alarm_activeAlram_2.invalidate();
					if(red_activeAlarm_2.isVisible())
					{
						red_activeAlarm_2.setVisible(false);
						red_activeAlarm_2.invalidate();
					}
					if(!yellow_activeAlarm_2.isVisible())
					{
						yellow_activeAlarm_2.setVisible(true);
						yellow_activeAlarm_2.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
					alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
					alarm_activeAlram_3.resizeToCurrentText();
					alarm_activeAlram_3.invalidate();
					if(red_activeAlarm_3.isVisible())
					{
						red_activeAlarm_3.setVisible(false);
						red_activeAlarm_3.invalidate();
					}
					if(!yellow_activeAlarm_3.isVisible())
					{
						yellow_activeAlarm_3.setVisible(true);
						yellow_activeAlarm_3.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
					alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
					alarm_activeAlram_4.resizeToCurrentText();
					alarm_activeAlram_4.invalidate();
					if(red_activeAlarm_4.isVisible())
					{
						red_activeAlarm_4.setVisible(false);
						red_activeAlarm_4.invalidate();
					}
					if(!yellow_activeAlarm_4.isVisible())
					{
						yellow_activeAlarm_4.setVisible(true);
						yellow_activeAlarm_4.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
					alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
					alarm_activeAlram_5.resizeToCurrentText();
					alarm_activeAlram_5.invalidate();
					if(red_activeAlarm_5.isVisible())
					{
						red_activeAlarm_5.setVisible(false);
						red_activeAlarm_5.invalidate();
					}
					if(!yellow_activeAlarm_5.isVisible())
					{
						yellow_activeAlarm_5.setVisible(true);
						yellow_activeAlarm_5.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
					alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
					alarm_activeAlram_6.resizeToCurrentText();
					alarm_activeAlram_6.invalidate();
					if(red_activeAlarm_6.isVisible())
					{
						red_activeAlarm_6.setVisible(false);
						red_activeAlarm_6.invalidate();
					}
					if(!yellow_activeAlarm_6.isVisible())
					{
						yellow_activeAlarm_6.setVisible(true);
						yellow_activeAlarm_6.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			}
		
			
			else if(alarm_real[i]==CRITIC_LOWBAT_H)
			{	
				uint8_t str[24] = "Critical Low Battery";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}
					
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
				}
				else if(i==1)
				{
					Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
					alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
					alarm_activeAlram_2.resizeToCurrentText();
					alarm_activeAlram_2.invalidate();
					if(!red_activeAlarm_2.isVisible())
					{
						red_activeAlarm_2.setVisible(true);
						red_activeAlarm_2.invalidate();
					}
					if(yellow_activeAlarm_2.isVisible())
					{
						yellow_activeAlarm_2.setVisible(false);
						yellow_activeAlarm_2.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
					alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
					alarm_activeAlram_3.resizeToCurrentText();
					alarm_activeAlram_3.invalidate();
					if(!red_activeAlarm_3.isVisible())
					{
						red_activeAlarm_3.setVisible(true);
						red_activeAlarm_3.invalidate();
					}
					if(yellow_activeAlarm_3.isVisible())
					{
						yellow_activeAlarm_3.setVisible(false);
						yellow_activeAlarm_3.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
					alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
					alarm_activeAlram_4.resizeToCurrentText();
					alarm_activeAlram_4.invalidate();
					if(!red_activeAlarm_4.isVisible())
					{
						red_activeAlarm_4.setVisible(true);
						red_activeAlarm_4.invalidate();
					}
					if(yellow_activeAlarm_4.isVisible())
					{
						yellow_activeAlarm_4.setVisible(false);
						yellow_activeAlarm_4.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
					alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
					alarm_activeAlram_5.resizeToCurrentText();
					alarm_activeAlram_5.invalidate();
					if(!red_activeAlarm_5.isVisible())
					{
						red_activeAlarm_5.setVisible(true);
						red_activeAlarm_5.invalidate();
					}
					if(yellow_activeAlarm_5.isVisible())
					{
						yellow_activeAlarm_5.setVisible(false);
						yellow_activeAlarm_5.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
					alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
					alarm_activeAlram_6.resizeToCurrentText();
					alarm_activeAlram_6.invalidate();
					if(!red_activeAlarm_6.isVisible())
					{
						red_activeAlarm_6.setVisible(true);
						red_activeAlarm_6.invalidate();
					}
					if(yellow_activeAlarm_6.isVisible())
					{
						yellow_activeAlarm_6.setVisible(false);
						yellow_activeAlarm_6.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			}
		
			else if(alarm_real[i]==BATT_INOPERABLE_H)
			{	
				uint8_t str[24] = "Battery Inoperable";
				
				if(isMemoryFree && isNewAlarm)
					save_trendAlarm(str);
				
				// write in alarm list
				if(i==0)
				{
					alarmType_intval = 3;
					Unicode::strncpy(alarm_value_topBarBuffer, (const char*)str, 25);
					alarm_value_topBar.setWildcard1(alarm_value_topBarBuffer);
					alarm_value_topBar.resizeToCurrentText();
					alarm_value_topBar.invalidate();
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_1Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_1.setWildcard1(time_activeAlram_1Buffer);
						time_activeAlram_1.resizeToCurrentText();
						time_activeAlram_1.invalidate();
					}
					if(state == ACTIVE_ALARMS)
					{
						Unicode::strncpy(alarm_activeAlram_1Buffer, (const char*)str, 25);
						alarm_activeAlram_1.setWildcard1(alarm_activeAlram_1Buffer);
						alarm_activeAlram_1.resizeToCurrentText();
						alarm_activeAlram_1.invalidate();
						if(!red_activeAlarm_1.isVisible())
						{
							red_activeAlarm_1.setVisible(true);
							red_activeAlarm_1.invalidate();
						}
						if(yellow_activeAlarm_1.isVisible())
						{
							yellow_activeAlarm_1.setVisible(false);
							yellow_activeAlarm_1.invalidate();
						}
					}
					
					if(alarm_imageYellow_bar.isVisible())
					{
						alarm_imageYellow_bar.setVisible(false);
						alarm_imageYellow_bar.invalidate();
					}
					if(alarm_image_bar.isVisible())
					{
						alarm_image_bar.setVisible(false);
						alarm_image_bar.invalidate();
					}
					if(!alarm_imageRed_bar.isVisible())
					{
						alarm_imageRed_bar.setVisible(true);
						alarm_imageRed_bar.invalidate();
					}
				}
				else if(i==1)
				{
					Unicode::strncpy(alarm_activeAlram_2Buffer, (const char*)str, 25);
					alarm_activeAlram_2.setWildcard1(alarm_activeAlram_2Buffer);
					alarm_activeAlram_2.resizeToCurrentText();
					alarm_activeAlram_2.invalidate();
					if(!red_activeAlarm_2.isVisible())
					{
						red_activeAlarm_2.setVisible(true);
						red_activeAlarm_2.invalidate();
					}
					if(yellow_activeAlarm_2.isVisible())
					{
						yellow_activeAlarm_2.setVisible(false);
						yellow_activeAlarm_2.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_2Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_2.setWildcard1(time_activeAlram_2Buffer);
						time_activeAlram_2.resizeToCurrentText();
						time_activeAlram_2.invalidate();
					}
				}
				else if(i==2)
				{
					Unicode::strncpy(alarm_activeAlram_3Buffer, (const char*)str, 25);
					alarm_activeAlram_3.setWildcard1(alarm_activeAlram_3Buffer);
					alarm_activeAlram_3.resizeToCurrentText();
					alarm_activeAlram_3.invalidate();
					if(!red_activeAlarm_3.isVisible())
					{
						red_activeAlarm_3.setVisible(true);
						red_activeAlarm_3.invalidate();
					}
					if(yellow_activeAlarm_3.isVisible())
					{
						yellow_activeAlarm_3.setVisible(false);
						yellow_activeAlarm_3.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_3Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_3.setWildcard1(time_activeAlram_3Buffer);
						time_activeAlram_3.resizeToCurrentText();
						time_activeAlram_3.invalidate();
					}
				}
				else if(i==3)
				{
					Unicode::strncpy(alarm_activeAlram_4Buffer, (const char*)str, 25);
					alarm_activeAlram_4.setWildcard1(alarm_activeAlram_4Buffer);
					alarm_activeAlram_4.resizeToCurrentText();
					alarm_activeAlram_4.invalidate();
					if(!red_activeAlarm_4.isVisible())
					{
						red_activeAlarm_4.setVisible(true);
						red_activeAlarm_4.invalidate();
					}
					if(yellow_activeAlarm_4.isVisible())
					{
						yellow_activeAlarm_4.setVisible(false);
						yellow_activeAlarm_4.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_4Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_4.setWildcard1(time_activeAlram_4Buffer);
						time_activeAlram_4.resizeToCurrentText();
						time_activeAlram_4.invalidate();
					}
				}
				else if(i==4)
				{
					Unicode::strncpy(alarm_activeAlram_5Buffer, (const char*)str, 25);
					alarm_activeAlram_5.setWildcard1(alarm_activeAlram_5Buffer);
					alarm_activeAlram_5.resizeToCurrentText();
					alarm_activeAlram_5.invalidate();
					if(!red_activeAlarm_5.isVisible())
					{
						red_activeAlarm_5.setVisible(true);
						red_activeAlarm_5.invalidate();
					}
					if(yellow_activeAlarm_5.isVisible())
					{
						yellow_activeAlarm_5.setVisible(false);
						yellow_activeAlarm_5.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_5Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_5.setWildcard1(time_activeAlram_5Buffer);
						time_activeAlram_5.resizeToCurrentText();
						time_activeAlram_5.invalidate();
					}
				}
				else if(i==5)
				{
					Unicode::strncpy(alarm_activeAlram_6Buffer, (const char*)str, 25);
					alarm_activeAlram_6.setWildcard1(alarm_activeAlram_6Buffer);
					alarm_activeAlram_6.resizeToCurrentText();
					alarm_activeAlram_6.invalidate();
					if(!red_activeAlarm_6.isVisible())
					{
						red_activeAlarm_6.setVisible(true);
						red_activeAlarm_6.invalidate();
					}
					if(yellow_activeAlarm_6.isVisible())
					{
						yellow_activeAlarm_6.setVisible(false);
						yellow_activeAlarm_6.invalidate();
					}
					if(isNewAlarm)
					{
						HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
						HAL_RTC_GetDate(&hrtc, &RTC_Date, RTC_FORMAT_BIN);
						Unicode::snprintf(time_activeAlram_6Buffer, 8, "%02d:%02d", RTC_Time.Hours, RTC_Time.Minutes);
						time_activeAlram_6.setWildcard1(time_activeAlram_6Buffer);
						time_activeAlram_6.resizeToCurrentText();
						time_activeAlram_6.invalidate();
					}
				}
			}
		
		}	
	 
		for(int i = 0; i < 6; i++)
		{
			previousAlarms[i] = alarm_real[i];
		}
	}
}

void screenView::handleMainScreen()
{
	h = RTC_Time.Hours;
	m = RTC_Time.Minutes;

	// check big values
	if (VT_val_big.isVisible())
		click_VT();
	if (RR_val_big.isVisible())
		click_RR();
	if (Ti_val_big.isVisible())
		click_Ti();
	if (flow_val_big.isVisible())
		click_flow();
	if (FiO2_val_big.isVisible())
		click_FiO2();
	if (sensivity_val_big.isVisible())
		click_sensitivity();
	if (PEEP_val_big.isVisible())
		click_PEEP();
	if (PControl_val_big.isVisible())
		click_PControl();
	if (trigger_val_flow_big.isVisible() || trigger_val_pressure_big.isVisible())
		click_trigger();
	if (riseTime_val_big.isVisible())
		click_riseTime();
	if (PS_val_big.isVisible())
		click_Psupp();
	if (cyclingOff_val_big.isVisible())
		click_cycling();
	if (CPAP_val_big.isVisible())
		click_CPAP();

	switch (monitorState)
	{
	case 0:
	{
		// v and p
		if (graph_v.getY() != graphVPosy || graph_v.getX() != graphVPosx || !graph_p.isVisible())
		{
			if(isArabic)
			{
				txt_mode.setVisible(false);
				txt_mode.invalidate();
				arb_txt_mode.setVisible(true);
				arb_txt_mode.invalidate();
			}
			else
			{
				txt_mode.setVisible(true);
				txt_mode.invalidate();
				arb_txt_mode.setVisible(false);
				arb_txt_mode.invalidate();
			}
			modeTxt_val.setVisible(true);
			modeTxt_val.invalidate();
			
			if(flag_startVent==1)
			{
				if(isArabic)
				{
					arb_pauseButton.setVisible(true);
					arb_pauseButton.invalidate();	
				}
				else
				{
					pauseButton.setVisible(true);
					pauseButton.invalidate();	
				}
			}
			else
			{
				if(isArabic)
				{
					arb_startButton.setVisible(true);
					arb_startButton.invalidate();	
				}
				else
				{
					startButton.setVisible(true);
					startButton.invalidate();	
				}
			}
			
			container_monitoringDatas.setVisible(false);
			container_monitoringDatas.invalidate();

			graph_v.setXY(graphVPosx, graphVPosy);
			graph_v.setVisible(true);
			container_graphVLines.setVisible(true);
			container_graphVLines.setXY(graphLineVPosx, graphLineVPosy);
			container_graphVLines.invalidate();
			graph_v.invalidate();
			
			
			graph_p.setVisible(true);
			graph_p.setY(graphPPosy);
			container_graphPLines.setVisible(true);
			container_graphPLines.setXY(graphLinePPosx, graphLinePPosy);
			container_graphPLines.invalidate();
			graph_p.invalidate();

			configuration_button.setVisible(true);
			configuration_button.invalidate();
			
			PEEP_lineVal.setY(450 - (peep_real * 5.33)-5); 
			Unicode::snprintfFloat(PEEP_lineValBuffer, PEEP_LINEVAL_SIZE, "%.1f", peep_real);
			PEEP_lineVal.setWildcard1(PEEP_lineValBuffer);
			PEEP_lineVal.invalidate();
			PIP_lineVal.setY(449 - (pip_real * 5.33)+5);
			Unicode::snprintfFloat(PIP_lineValBuffer, PIP_LINEVAL_SIZE, "%.1f", pip_real);
			PIP_lineVal.setWildcard1(PIP_lineValBuffer);
			PIP_lineVal.invalidate();
			
			PEEP_line.setY(450 - (peep_real * 5.33)); // default is y=450 => 0 in P_progress
			PIP_line.setY(499 - (pip_real * 5.33));	// default is y=450 => 0 in P_progress
			
			container_pressureMonitor.setVisible(true);
			container_pressureMonitor.invalidate();
			
			container_mainScreen.setVisible(false);
			container_mainScreen.invalidate();
			container_mainScreen.setVisible(true);
			container_mainScreen.invalidate();
		}
		break;
	}
	case 1:
	{
		// flow and p
		if (graph_flow.getY() != graph_v.getY() || !graph_p.isVisible())
		{
			graph_v.setVisible(false);
			graph_v.invalidate();
			container_graphVLines.setVisible(false);
			container_graphVLines.invalidate();
			
			graph_flow.setX(graphFPosx);
			graph_flow.setY(graphVPosy); //v is higher
			graph_flow.setVisible(true);
			container_graphFLines.setVisible(true);
			container_graphFLines.setXY(graphLineFPosx, graph_flow.getY()+9); //TODO
			container_graphFLines.invalidate();
			graph_flow.invalidate();
			
			graph_p.setVisible(true);
			graph_p.setY(graphPPosy);
			container_graphPLines.setVisible(true);
			container_graphPLines.setXY(graphLinePPosx, graphLinePPosy);
			container_graphPLines.invalidate();
			graph_p.invalidate();
			
			
			container_mainScreen.setVisible(false);
			container_mainScreen.invalidate();
			container_mainScreen.setVisible(true);
			container_mainScreen.invalidate();
		}
		break;
	}
	case 2:
	{
		// v and flow and p bar
		if (graph_v.getY() != graphVPosy || graph_v.getX() != graphVPosx || !graph_flow.isVisible() || !graph_v.isVisible())
		{
			//	graph_v.setVisible(false);
			graph_v.moveTo(graphVPosx + 10, graphVPosy); // x=mainPosy2 y=34
			graph_v.setVisible(true);
			container_graphVLines.setVisible(true);
			container_graphVLines.setXY(graphLineVPosx + 10, graphLineVPosy);
			container_graphVLines.invalidate();
			graph_v.invalidate();
			//				graph_flow.setVisible(false);
			graph_flow.moveTo(graphFPosx + 10, graphFPosy); // xmainPosy2, y173
			graph_flow.setVisible(true);
			container_graphFLines.setVisible(true);
			container_graphFLines.setXY(graphLineFPosx + 10, graphLineFPosy);
			container_graphFLines.invalidate();
			graph_flow.invalidate();

			graph_p.setVisible(false);
			container_graphPLines.setVisible(false);
			container_graphPLines.invalidate();
			graph_p.invalidate();
			
		}
		break;
	}
	case 3:
	{
		if (!container_monitoringDatas.isVisible())
		{
			container_monitoringDatas.setVisible(true);
			container_monitoringDatas.invalidate();
			
			configuration_button.setVisible(false);
			configuration_button.invalidate();
			
			RR_container.setVisible(false);
			RR_container.invalidate();
			VT_container.setVisible(false);
			VT_container.invalidate();
			Ti_container.setVisible(false);
			Ti_container.invalidate();
			FiO2_container.setVisible(false);
			FiO2_container.invalidate();
			PEEP_container.setVisible(false);
			PEEP_container.invalidate();
			PControl_container.setVisible(false);
			PControl_container.invalidate();
			flow_container.setVisible(false);
			flow_container.invalidate();
			riseTime_container.setVisible(false);
			riseTime_container.invalidate();
			IE_container.setVisible(false);
			IE_container.invalidate();
			trigger_container.setVisible(false);
			trigger_container.invalidate();
			PS_container.setVisible(false);
			PS_container.invalidate();
			sensitivity_container.setVisible(false);
			sensitivity_container.invalidate();
			cyclingOff_container.setVisible(false);
			cyclingOff_container.invalidate();
			
			arb_txt_mode.setVisible(false);
			arb_txt_mode.invalidate();
			txt_mode.setVisible(false);
			txt_mode.invalidate();
			modeTxt_val.setVisible(false);
			modeTxt_val.invalidate();
			arb_startButton.setVisible(false);
			arb_startButton.invalidate();
			arb_pauseButton.setVisible(false);
			arb_pauseButton.invalidate();
			startButton.setVisible(false);
			startButton.invalidate();
			pauseButton.setVisible(false);
			pauseButton.invalidate();
			confirm_button.setVisible(false);
			confirm_button.invalidate();
			confirm_arbButton.setVisible(false);
			confirm_arbButton.invalidate();
			
			graph_v.setVisible(false);
			container_graphVLines.setVisible(false);
			container_graphVLines.invalidate();
			graph_v.invalidate();

			graph_flow.setVisible(false);
			container_graphFLines.setVisible(false);
			container_graphFLines.invalidate();
			graph_flow.invalidate();

			container_pressureMonitor.setVisible(false);
			container_pressureMonitor.invalidate();
		}

		
		if(tickCounter % 30 == 0) // show 2 times/second
		{
			
			// set monitor values
			Unicode::snprintfFloat(RR_monitoringtxtBuffer, RR_MONITORINGTXT_SIZE, "%.1f", RR_real);
			RR_monitoringtxt.setWildcard1(RR_monitoringtxtBuffer);
			RR_monitoringtxt.invalidate();
			Unicode::snprintfFloat(PEEP_monitoringtxtBuffer, PEEP_MONITORINGTXT_SIZE, "%.1f", peep_real);
			PEEP_monitoringtxt.setWildcard1(PEEP_monitoringtxtBuffer);
			PEEP_monitoringtxt.invalidate();
			Unicode::snprintfFloat(PIP_monitoringtxtBuffer, PIP_MONITORINGTXT_SIZE, "%.1f", pip_real);
			PIP_monitoringtxt.setWildcard1(PIP_monitoringtxtBuffer);
			PIP_monitoringtxt.invalidate();
			Unicode::snprintf(VTi_monitoringtxtBuffer, VTI_MONITORINGTXT_SIZE, "%d", (int)VTi_real);
			VTi_monitoringtxt.setWildcard1(VTi_monitoringtxtBuffer);
			VTi_monitoringtxt.invalidate();
			Unicode::snprintf(VTe_monitoringtxtBuffer, VTE_MONITORINGTXT_SIZE, "%d", (int)VTe_real);
			VTe_monitoringtxt.setWildcard1(VTe_monitoringtxtBuffer);
			VTe_monitoringtxt.invalidate();
			Unicode::snprintfFloat(Ti_monitoringtxtBuffer, TI_MONITORINGTXT_SIZE, "%.1f", Ti_real);
			Ti_monitoringtxt.setWildcard1(Ti_monitoringtxtBuffer);
			Ti_monitoringtxt.invalidate();
			Unicode::snprintfFloat(Te_monitoringtxtBuffer, TE_MONITORINGTXT_SIZE, "%.1f", Te_real);
			Te_monitoringtxt.setWildcard1(Te_monitoringtxtBuffer);
			Te_monitoringtxt.invalidate();
			Unicode::snprintfFloat(PIF_monitoringtxtBuffer, PIF_MONITORINGTXT_SIZE, "%.1f", PIF_real);
			PIF_monitoringtxt.setWildcard1(PIF_monitoringtxtBuffer);
			PIF_monitoringtxt.invalidate();
			Unicode::snprintfFloat(MVi_monitoringtxtBuffer, MVI_MONITORINGTXT_SIZE, "%.1f", MVi_real);
			MVi_monitoringtxt.setWildcard1(MVi_monitoringtxtBuffer);
			MVi_monitoringtxt.invalidate();
			Unicode::snprintfFloat(MVe_monitoringtxtBuffer, MVE_MONITORINGTXT_SIZE, "%.1f", MVe_real);
			MVe_monitoringtxt.setWildcard1(MVe_monitoringtxtBuffer);
			MVe_monitoringtxt.invalidate();
			Unicode::snprintfFloat(AVP_monitoringtxtBuffer, AVP_MONITORINGTXT_SIZE, "%.1f", AVP_real);
			AVP_monitoringtxt.setWildcard1(AVP_monitoringtxtBuffer);
			AVP_monitoringtxt.invalidate();
			Unicode::snprintfFloat(LEAK_monitoringtxtBuffer, LEAK_MONITORINGTXT_SIZE, "%.1f", leak_real);
			LEAK_monitoringtxt.setWildcard1(LEAK_monitoringtxtBuffer);
			LEAK_monitoringtxt.invalidate();
			Unicode::snprintfFloat(IE_monitoringtxtBuffer1, IE_MONITORINGTXTBUFFER1_SIZE, "%.1f", Ti_real);
			IE_monitoringtxt.setWildcard1(IE_monitoringtxtBuffer1);
			Unicode::snprintfFloat(IE_monitoringtxtBuffer2, IE_MONITORINGTXTBUFFER2_SIZE, "%.1f", Te_real);
			IE_monitoringtxt.setWildcard2(IE_monitoringtxtBuffer2);
			IE_monitoringtxt.invalidate();
			Unicode::snprintfFloat(CMPL_monitoringtxtBuffer, CMPL_MONITORINGTXT_SIZE, "%.1f", CMPL_real);
			CMPL_monitoringtxt.setWildcard1(CMPL_monitoringtxtBuffer);
			CMPL_monitoringtxt.invalidate();
			Unicode::snprintfFloat(FIO2_monitoringtxtBuffer, FIO2_MONITORINGTXT_SIZE, "%.1f", FiO2_real);
			FIO2_monitoringtxt.setWildcard1(FIO2_monitoringtxtBuffer);
			FIO2_monitoringtxt.invalidate();
			Unicode::snprintfFloat(IPP_monitoringtxtBuffer, IPP_MONITORINGTXT_SIZE, "%.1f", IPP_real);
			IPP_monitoringtxt.setWildcard1(IPP_monitoringtxtBuffer);
			IPP_monitoringtxt.invalidate();
			Unicode::snprintfFloat(Res_monitoringtxtBuffer, RES_MONITORINGTXT_SIZE, "%.1f", Res_real);
			Res_monitoringtxt.setWildcard1(Res_monitoringtxtBuffer);
			Res_monitoringtxt.invalidate();
			Unicode::snprintf(Patm_monitoringtxtBuffer, PATM_MONITORINGTXT_SIZE, "%d", (int)Patm_real);
			Patm_monitoringtxt.setWildcard1(Patm_monitoringtxtBuffer);
			Patm_monitoringtxt.invalidate();
			Unicode::snprintfFloat(PEF_monitoringtxtBuffer, PEF_MONITORINGTXT_SIZE, "%.1f", PEF_real);
			PEF_monitoringtxt.setWildcard1(PEF_monitoringtxtBuffer);
			PEF_monitoringtxt.invalidate();
			Unicode::snprintf(RSBI_monitoringtxtBuffer, RSBI_MONITORINGTXT_SIZE, "%d", (int)RSBI_real);
			RSBI_monitoringtxt.setWildcard1(RSBI_monitoringtxtBuffer);
			RSBI_monitoringtxt.invalidate();
			Unicode::snprintf(SpontTrig_monitoringtxtBuffer, SPONTTRIG_MONITORINGTXT_SIZE, "%d", (int)SpontTrig_real);
			SpontTrig_monitoringtxt.setWildcard1(SpontTrig_monitoringtxtBuffer);
			SpontTrig_monitoringtxt.invalidate();
			Unicode::snprintf(SpontCylce_monitoringtxtBuffer, SPONTCYLCE_MONITORINGTXT_SIZE, "%d", (int)SpontCycle_real);
			SpontCylce_monitoringtxt.setWildcard1(SpontCylce_monitoringtxtBuffer);
			SpontCylce_monitoringtxt.invalidate();
			Unicode::snprintf(SPO2_monitoringtxtBuffer, SPO2_MONITORINGTXT_SIZE, "%d", (int)SPO2_real);
			SPO2_monitoringtxt.setWildcard1(SPO2_monitoringtxtBuffer);
			SPO2_monitoringtxt.invalidate();
			Unicode::snprintf(PulseRate_monitoringtxtBuffer, PULSERATE_MONITORINGTXT_SIZE, "%d", (int)pulseRate_real);
			PulseRate_monitoringtxt.setWildcard1(PulseRate_monitoringtxtBuffer);
			PulseRate_monitoringtxt.invalidate();
		}
		break;
	}
	}
	if (monitorState == 3)
	{
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_startPause.isVisible())
			{
				selector_startPause.setVisible(false);
				selector_startPause.invalidate();
			}
			if (selector_setting.isVisible())
			{
				selector_setting.setVisible(false);
				selector_setting.invalidate();
			}
			if (selector_monitor.isVisible())
			{
				selector_monitor.setVisible(false);
				selector_monitor.invalidate();
			}
			if (selector_FiO2.isVisible())
			{
				selector_FiO2.setVisible(false);
				selector_FiO2.invalidate();
			}
			if (selector_IE.isVisible())
			{
				selector_IE.setVisible(false);
				selector_IE.invalidate();
			}
			if (selector_PEEP.isVisible())
			{
				selector_PEEP.setVisible(false);
				selector_PEEP.invalidate();
			}
			if (selector_PIP.isVisible())
			{
				selector_PIP.setVisible(false);
				selector_PIP.invalidate();
			}
			if (selector_VT.isVisible())
			{
				selector_VT.setVisible(false);
				selector_VT.invalidate();
			}
			if (selector_RR.isVisible())
			{
				selector_RR.setVisible(false);
				selector_RR.invalidate();
			}
			if (selector_Ti.isVisible())
			{
				selector_Ti.setVisible(false);
				selector_Ti.invalidate();
			}
			if (selector_flow.isVisible())
			{
				selector_flow.setVisible(false);
				selector_flow.invalidate();
			}
			if (selector_cyclingOff.isVisible())
			{
				selector_cyclingOff.setVisible(false);
				selector_cyclingOff.invalidate();
			}
			if (selector_trigger.isVisible())
			{
				selector_trigger.setVisible(false);
				selector_trigger.invalidate();
			}
			if (selector_sensitivity.isVisible())
			{
				selector_sensitivity.setVisible(false);
				selector_sensitivity.invalidate();
			}
			if (selector_PS.isVisible())
			{
				selector_PS.setVisible(false);
				selector_PS.invalidate();
			}
			if (selector_riseTime.isVisible())
			{
				selector_riseTime.setVisible(false);
				selector_riseTime.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_startPause.isVisible())
			{
				selector_startPause.setVisible(false);
				selector_startPause.invalidate();
			}
			if (!selector_setting.isVisible())
			{
				selector_setting.setVisible(true);
				selector_setting.invalidate();
			}
			if (selector_monitor.isVisible())
			{
				selector_monitor.setVisible(false);
				selector_monitor.invalidate();
			}
			if (selector_FiO2.isVisible())
			{
				selector_FiO2.setVisible(false);
				selector_FiO2.invalidate();
			}
			if (selector_IE.isVisible())
			{
				selector_IE.setVisible(false);
				selector_IE.invalidate();
			}
			if (selector_PEEP.isVisible())
			{
				selector_PEEP.setVisible(false);
				selector_PEEP.invalidate();
			}
			if (selector_PIP.isVisible())
			{
				selector_PIP.setVisible(false);
				selector_PIP.invalidate();
			}
			if (selector_VT.isVisible())
			{
				selector_VT.setVisible(false);
				selector_VT.invalidate();
			}
			if (selector_RR.isVisible())
			{
				selector_RR.setVisible(false);
				selector_RR.invalidate();
			}
			if (selector_Ti.isVisible())
			{
				selector_Ti.setVisible(false);
				selector_Ti.invalidate();
			}
			if (selector_flow.isVisible())
			{
				selector_flow.setVisible(false);
				selector_flow.invalidate();
			}
			if (selector_cyclingOff.isVisible())
			{
				selector_cyclingOff.setVisible(false);
				selector_cyclingOff.invalidate();
			}
			if (selector_trigger.isVisible())
			{
				selector_trigger.setVisible(false);
				selector_trigger.invalidate();
			}
			if (selector_sensitivity.isVisible())
			{
				selector_sensitivity.setVisible(false);
				selector_sensitivity.invalidate();
			}
			if (selector_PS.isVisible())
			{
				selector_PS.setVisible(false);
				selector_PS.invalidate();
			}
			if (selector_riseTime.isVisible())
			{
				selector_riseTime.setVisible(false);
				selector_riseTime.invalidate();
			}
			if (pressKey == 1)
			{
				click_setting();
				// code for setting
			}
		}
		else if (key1 == 2)
		{
			if (selector_startPause.isVisible())
			{
				selector_startPause.setVisible(false);
				selector_startPause.invalidate();
			}
			if (selector_setting.isVisible())
			{
				selector_setting.setVisible(false);
				selector_setting.invalidate();
			}
			if (!selector_monitor.isVisible())
			{
				selector_monitor.setVisible(true);
				selector_monitor.invalidate();
			}
			if (selector_FiO2.isVisible())
			{
				selector_FiO2.setVisible(false);
				selector_FiO2.invalidate();
			}
			if (selector_IE.isVisible())
			{
				selector_IE.setVisible(false);
				selector_IE.invalidate();
			}
			if (selector_PEEP.isVisible())
			{
				selector_PEEP.setVisible(false);
				selector_PEEP.invalidate();
			}
			if (selector_PIP.isVisible())
			{
				selector_PIP.setVisible(false);
				selector_PIP.invalidate();
			}
			if (selector_VT.isVisible())
			{
				selector_VT.setVisible(false);
				selector_VT.invalidate();
			}
			if (selector_RR.isVisible())
			{
				selector_RR.setVisible(false);
				selector_RR.invalidate();
			}
			if (selector_Ti.isVisible())
			{
				selector_Ti.setVisible(false);
				selector_Ti.invalidate();
			}
			if (selector_flow.isVisible())
			{
				selector_flow.setVisible(false);
				selector_flow.invalidate();
			}
			if (selector_cyclingOff.isVisible())
			{
				selector_cyclingOff.setVisible(false);
				selector_cyclingOff.invalidate();
			}
			if (selector_trigger.isVisible())
			{
				selector_trigger.setVisible(false);
				selector_trigger.invalidate();
			}
			if (selector_sensitivity.isVisible())
			{
				selector_sensitivity.setVisible(false);
				selector_sensitivity.invalidate();
			}
			if (selector_PS.isVisible())
			{
				selector_PS.setVisible(false);
				selector_PS.invalidate();
			}
			if (selector_riseTime.isVisible())
			{
				selector_riseTime.setVisible(false);
				selector_riseTime.invalidate();
			}
			if (pressKey == 1)
			{
				// code for monitor
				pressKey = 0;
				click_Monitoring();
			}
		}
		else if(key1 > 2)
		{
			key1=0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if(key1 < 0)
		{
			key1=2;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else
	{
		if (mode_int == 1) // cmv_vcv
		{
			if (!VT_container.isVisible() || VT_container.getX() != mainPosx1 || VT_container.getY() != mainPosy1)
			{
				VT_container.setVisible(true);
				VT_container.setXY(mainPosx1, mainPosy1);
				VT_container.invalidate();
				selector_VT.setXY(mainPosx1+5, mainPosy1+4);
				selector_VT.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx2 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx2, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx2+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx2 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx2, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx1 || FiO2_container.getY() != mainPosy3)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx1, mainPosy3);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx1 + 5, mainPosy3+4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (PControl_container.isVisible())
			{
				PControl_container.setVisible(false);
				PControl_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx1 || Ti_container.getY() != mainPosy2)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx1, mainPosy2);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx1+5, mainPosy2+4);
				selector_Ti.invalidate();
			}
			if (trigger_container.isVisible())
			{
				trigger_container.setVisible(false);
				trigger_container.invalidate();
			}
			if (sensitivity_container.isVisible())
			{
				sensitivity_container.setVisible(false);
				sensitivity_container.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (!selector_VT.isVisible())
				{
					selector_VT.setVisible(true);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for VT
					click_VT();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_Ti();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_PEEP();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_FiO2();
				}
			}
			else if (key1 == 9)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 9)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 9;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 2) // cmv_pcv
		{
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx1 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx1, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx1 +5, mainPosy1 +4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1 +5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx1 || FiO2_container.getY() != mainPosy3)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx1, mainPosy3);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx1+5, mainPosy3 +4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (!PControl_container.isVisible() || PControl_container.getX() != mainPosx2 || PControl_container.getY() != mainPosy2)
			{
				PControl_container.setVisible(true);
				PControl_container.setXY(mainPosx2, mainPosy2);
				PControl_container.invalidate();
				selector_PIP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PIP.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx2 || Ti_container.getY() != mainPosy1)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx2, mainPosy1);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx2+5, mainPosy1+4);
				selector_Ti.invalidate();
			}
			if (trigger_container.isVisible())
			{
				trigger_container.setVisible(false);
				trigger_container.invalidate();
			}
			if (sensitivity_container.isVisible())
			{
				sensitivity_container.setVisible(false);
				sensitivity_container.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Ti
					click_Ti();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PEEP
					click_PEEP();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (!selector_PIP.isVisible())
				{
					selector_PIP.setVisible(true);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PIP
					click_PControl();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for FiO2
					click_FiO2();
				}
			}

			else if (key1 == 9)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 9)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 9;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 3) // ac_vcv
		{
			if (!VT_container.isVisible() || VT_container.getX() != mainPosx1 || VT_container.getY() != mainPosy1)
			{
				VT_container.setVisible(true);
				VT_container.setXY(mainPosx1, mainPosy1);
				VT_container.invalidate();
				selector_VT.setXY(mainPosx1+5, mainPosy1+4);
				selector_VT.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx2 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx2, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx2+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (PEEP_container.isVisible())
			{
				PEEP_container.setVisible(false);
				PEEP_container.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx2 || FiO2_container.getY() != mainPosy3)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx2, mainPosy3);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx2+5, mainPosy3+4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (PControl_container.isVisible())
			{
				PControl_container.setVisible(false);
				PControl_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx1 || Ti_container.getY() != mainPosy2)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx1, mainPosy2);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx1+5, mainPosy2+4);
				selector_Ti.invalidate();
			}
			if (!trigger_container.isVisible() || trigger_container.getX() != mainPosx2 || trigger_container.getY() != mainPosy2)
			{
				trigger_container.setVisible(true);
				trigger_container.setXY(mainPosx2, mainPosy2);
				trigger_container.invalidate();
				selector_trigger.setXY(mainPosx2+5, mainPosy2+4);
				selector_trigger.invalidate();
			}
			if (!sensitivity_container.isVisible() || sensitivity_container.getX() != mainPosx1 || sensitivity_container.getY() != mainPosy3)
			{
				sensitivity_container.setVisible(true);
				sensitivity_container.setXY(mainPosx1, mainPosy3);
				sensitivity_container.invalidate();
				selector_sensitivity.setXY(mainPosx1+5, mainPosy3+4);
				selector_sensitivity.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (!selector_VT.isVisible())
				{
					selector_VT.setVisible(true);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for VT
					click_VT();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_Ti();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (!selector_trigger.isVisible())
				{
					selector_trigger.setVisible(true);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_trigger();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (!selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(true);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_sensitivity();
				}
			}
			else if (key1 == 9)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_FiO2();
				}
			}
			else if (key1 == 10)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 10)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 10;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 4) // ac_pcv
		{ 
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx1 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx1, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx1+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (FiO2_container.isVisible())
			{
				FiO2_container.setVisible(true);
				FiO2_container.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (!PControl_container.isVisible() || PControl_container.getX() != mainPosx2 || PControl_container.getY() != mainPosy2)
			{
				PControl_container.setVisible(true);
				PControl_container.setXY(mainPosx2, mainPosy2);
				PControl_container.invalidate();
				selector_PIP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PIP.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx2 || Ti_container.getY() != mainPosy1)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx2, mainPosy1);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx2+5, mainPosy1+4);
				selector_Ti.invalidate();
			}
			if (!trigger_container.isVisible() || trigger_container.getX() != mainPosx1 || trigger_container.getY() != mainPosy3)
			{
				trigger_container.setVisible(true);
				trigger_container.setXY(mainPosx1, mainPosy3);
				trigger_container.invalidate();
				selector_trigger.setXY(mainPosx1+5, mainPosy3+4);
				selector_trigger.invalidate();
			}
			if (!sensitivity_container.isVisible() || sensitivity_container.getX() != mainPosx2 || sensitivity_container.getY() != mainPosy3)
			{
				sensitivity_container.setVisible(true);
				sensitivity_container.setXY(mainPosx2, mainPosy3);
				sensitivity_container.invalidate();
				selector_sensitivity.setXY(mainPosx2+5, mainPosy3+4);
				selector_sensitivity.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(true);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Ti
					click_Ti();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PEEP
					click_PEEP();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (!selector_PIP.isVisible())
				{
					selector_PIP.setVisible(true);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PIP
					click_PControl();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (!selector_trigger.isVisible())
				{
					selector_trigger.setVisible(true);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for trigger
					click_trigger();
				}
			}
			else if (key1 == 9)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (!selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(true);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for sens
					click_sensitivity();
				}
			}
			else if (key1 == 10)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 10)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 10;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 5) // simv_vcv
		{
			if (!VT_container.isVisible() || VT_container.getX() != mainPosx1 || VT_container.getY() != mainPosy1)
			{
				VT_container.setVisible(true);
				VT_container.setXY(mainPosx1, mainPosy1);
				VT_container.invalidate();
				selector_VT.setXY(mainPosx1+5, mainPosy1+4);
				selector_VT.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx2 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx2, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx2+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy3)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy3);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1+5, mainPosy3+4);
				selector_PEEP.invalidate();
			}
			if (FiO2_container.isVisible())
			{
				FiO2_container.setVisible(false);
				FiO2_container.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx1 || Ti_container.getY() != mainPosy2)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx1, mainPosy2);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx1+5, mainPosy2+4);
				selector_Ti.invalidate();
			}
			if (trigger_container.isVisible())
			{
				trigger_container.setVisible(false);
				trigger_container.invalidate();
			}
			if (sensitivity_container.isVisible())
			{
				sensitivity_container.setVisible(false);
				sensitivity_container.invalidate();
			}
			if (!PS_container.isVisible() || PS_container.getX() != mainPosx2 || PS_container.getY() != mainPosy3)
			{
				PS_container.setVisible(true);
				PS_container.setXY(mainPosx2, mainPosy3);
				PS_container.invalidate();
				selector_PS.setXY(mainPosx2+5, mainPosy3+4);
				selector_PS.invalidate();
			}
			if (!riseTime_container.isVisible() || riseTime_container.getX()!= mainPosx2 || riseTime_container.getY()!= mainPosy2)
			{
				riseTime_container.setVisible(true);
				riseTime_container.setXY(mainPosx2, mainPosy2);
				riseTime_container.invalidate();
				selector_riseTime.setXY(mainPosx2+5, mainPosy2+4);
				selector_riseTime.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
				if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (!selector_VT.isVisible())
				{
					selector_VT.setVisible(true);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for VT
					click_VT();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Ti
					click_Ti();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (!selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(true);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_riseTime();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PEEP
					click_PEEP();
				}
			}
			else if (key1 == 9)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (!selector_PS.isVisible())
				{
					selector_PS.setVisible(true);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Psupp
					click_Psupp();
				}
			}
			else if (key1 == 10)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 10)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 10;
				encoderCounter = 40 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, 40 + 1);
			}
		}
		else if (mode_int == 6) // simv_pcv
		{
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx1 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx1, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx1+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (FiO2_container.isVisible())
			{
				FiO2_container.setVisible(true);
				FiO2_container.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (!PControl_container.isVisible() || PControl_container.getX() != mainPosx2 || PControl_container.getY() != mainPosy2)
			{
				PControl_container.setVisible(true);
				PControl_container.setXY(mainPosx2, mainPosy2);
				PControl_container.invalidate();
				selector_PIP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PIP.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx2 || Ti_container.getY() != mainPosy1)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx2, mainPosy1);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx2+5, mainPosy1+4);
				selector_Ti.invalidate();
			}
			if (!trigger_container.isVisible() || trigger_container.getX() != mainPosx1 || trigger_container.getY() != mainPosy3)
			{
				trigger_container.setVisible(true);
				trigger_container.setXY(mainPosx1, mainPosy3);
				trigger_container.invalidate();
				selector_trigger.setXY(mainPosx1+5, mainPosy3+4);
				selector_trigger.invalidate();
			}
			if (!sensitivity_container.isVisible() || sensitivity_container.getX() != mainPosx2 || sensitivity_container.getY() != mainPosy3)
			{
				sensitivity_container.setVisible(true);
				sensitivity_container.setXY(mainPosx2, mainPosy3);
				sensitivity_container.invalidate();
				selector_sensitivity.setXY(mainPosx2+5, mainPosy3+4);
				selector_sensitivity.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(true);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Ti
					click_Ti();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PEEP
					click_PEEP();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (!selector_PIP.isVisible())
				{
					selector_PIP.setVisible(true);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PIP
					click_PControl();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (!selector_trigger.isVisible())
				{
					selector_trigger.setVisible(true);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for trigger
					click_trigger();
				}
			}
			else if (key1 == 9)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (!selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(true);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for sense
					click_sensitivity();
				}
			}
			else if (key1 == 10)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 10)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 10;
				encoderCounter = key1*4+ 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 7) // psv
		{
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx2 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx2, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx2+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (FiO2_container.isVisible())
			{
				FiO2_container.setVisible(false);
				FiO2_container.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (Ti_container.isVisible())
			{
				Ti_container.setVisible(false);
				Ti_container.invalidate();
			}
			if (!trigger_container.isVisible() || trigger_container.getX() != mainPosx1 || trigger_container.getY() != mainPosy3)
			{
				trigger_container.setVisible(true);
				trigger_container.setXY(mainPosx1, mainPosy3);
				trigger_container.invalidate();
				selector_trigger.setXY(mainPosx1+5, mainPosy3+4);
				selector_trigger.invalidate();
			}
			if (!sensitivity_container.isVisible() || sensitivity_container.getX() != mainPosx2 || sensitivity_container.getY() != mainPosy3)
			{
				sensitivity_container.setVisible(true);
				sensitivity_container.setXY(mainPosx2, mainPosy3);
				sensitivity_container.invalidate();
				selector_sensitivity.setXY(mainPosx2+5, mainPosy3+4);
				selector_sensitivity.invalidate();
			}
			if (!PS_container.isVisible() || PS_container.getX() != mainPosx1 || PS_container.getY() != mainPosy1)
			{
				PS_container.setVisible(true);
				PS_container.setXY(mainPosx1, mainPosy1);
				PS_container.invalidate();
				selector_PS.setXY(mainPosx1+5, mainPosy1+4);
				selector_PS.invalidate();
			}
			if (!riseTime_container.isVisible() || riseTime_container.getX() != mainPosx2 || riseTime_container.getY() != mainPosy2)
			{
				riseTime_container.setVisible(true);
				riseTime_container.setXY(mainPosx2, mainPosy2);
				riseTime_container.invalidate();
				selector_riseTime.setXY(mainPosx2+5, mainPosy2+4);
				selector_riseTime.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (!selector_PS.isVisible())
				{
					selector_PS.setVisible(true);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_Psupp();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_RR();
				}
			}
			
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_PEEP();
				}
			}
			
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (!selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(true);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_riseTime();
				}
			}
			
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (!selector_trigger.isVisible())
				{
					selector_trigger.setVisible(true);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_trigger();
				}
			}
			else if (key1 == 9)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (!selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(true);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_sensitivity();
				}
			}
			else if (key1 == 10)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 10)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 10;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 8) // cpap
		{
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (RR_container.isVisible())
			{
				RR_container.setVisible(false);
				RR_container.invalidate();
			}
			if (PEEP_container.isVisible())
			{
				PEEP_container.setVisible(false);
				PEEP_container.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx2 || FiO2_container.getY() != mainPosy2)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx2, mainPosy2);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx2+5, mainPosy2+4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (PControl_container.isVisible())
			{
				PControl_container.setVisible(false);
				PControl_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (Ti_container.isVisible())
			{
				Ti_container.setVisible(false);
				Ti_container.invalidate();
			}
			if (!trigger_container.isVisible() || trigger_container.getX()!= mainPosx1 || trigger_container.getY()!= mainPosy2)
			{
				trigger_container.setVisible(true);
				trigger_container.setXY(mainPosx1, mainPosy2);
				trigger_container.invalidate();
				selector_trigger.setXY(mainPosx1+5, mainPosy2+4);
				selector_trigger.invalidate();
			}
			if (!sensitivity_container.isVisible() || sensitivity_container.getX()!= mainPosx2 || sensitivity_container.getY() != mainPosy1)
			{
				sensitivity_container.setVisible(true);
				sensitivity_container.setXY(mainPosx2, mainPosy1);
				sensitivity_container.invalidate();
				selector_sensitivity.setXY(mainPosx2+5, mainPosy1+4);
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (!CPAP_container.isVisible() || CPAP_container.getX()!= mainPosx1 || CPAP_container.getY()!= mainPosy1)
			{
				CPAP_container.setVisible(true);
				CPAP_container.setXY(mainPosx1, mainPosy1);
				CPAP_container.invalidate();
				selector_CPAP.setXY(mainPosx1+5, mainPosy1+4);
				selector_CPAP.invalidate();
			}
			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (!selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(true);
					selector_CPAP.invalidate();
				}
				if (pressKey == 1)
				{
					click_CPAP();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (!selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(true);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_sensitivity();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (!selector_trigger.isVisible())
				{
					selector_trigger.setVisible(true);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_trigger();
				}
			}
			
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_FiO2();
				}
			}
			else if (key1 == 8)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_CPAP.isVisible())
				{
					selector_CPAP.setVisible(false);
					selector_CPAP.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 8)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 8;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 9) // bipap
		{
			if (VT_container.isVisible())
			{
				VT_container.setVisible(false);
				VT_container.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx1, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx1+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx1 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx1, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx1+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx1 || FiO2_container.getY() != mainPosy3)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx1, mainPosy3);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx1+5, mainPosy3+4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (!PControl_container.isVisible() || PControl_container.getX() != mainPosx2 || PControl_container.getY() != mainPosy2)
			{
				PControl_container.setVisible(true);
				PControl_container.setXY(mainPosx2, mainPosy2);
				PControl_container.invalidate();
				selector_PIP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PIP.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx2 || Ti_container.getY() != mainPosy1)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx2, mainPosy1);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx2+5, mainPosy1+4);
				selector_Ti.invalidate();
			}
			if (trigger_container.isVisible())
			{
				trigger_container.setVisible(false);
				trigger_container.invalidate();
			}
			if (sensitivity_container.isVisible())
			{
				sensitivity_container.setVisible(false);
				sensitivity_container.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}
			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for Ti
					click_Ti();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PEEP
					click_PEEP();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (!selector_PIP.isVisible())
				{
					selector_PIP.setVisible(true);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for PIP
					click_PControl();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for FiO2
					click_FiO2();
				}
			}

			else if (key1 == 9)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 9)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 9;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		else if (mode_int == 10) // CPR
		{
			if (!VT_container.isVisible() || VT_container.getX() != mainPosx1 || VT_container.getY() != mainPosy1)
			{
				VT_container.setVisible(true);
				VT_container.setXY(mainPosx1, mainPosy1);
				VT_container.invalidate();
				selector_VT.setXY(mainPosx1+5, mainPosy1+4);
				selector_VT.invalidate();
			}
			if (!RR_container.isVisible() || RR_container.getX() != mainPosx2 || RR_container.getY() != mainPosy1)
			{
				RR_container.setVisible(true);
				RR_container.setXY(mainPosx2, mainPosy1);
				RR_container.invalidate();
				selector_RR.setXY(mainPosx2+5, mainPosy1+4);
				selector_RR.invalidate();
			}
			if (!PEEP_container.isVisible() || PEEP_container.getX() != mainPosx2 || PEEP_container.getY() != mainPosy2)
			{
				PEEP_container.setVisible(true);
				PEEP_container.setXY(mainPosx2, mainPosy2);
				PEEP_container.invalidate();
				selector_PEEP.setXY(mainPosx2+5, mainPosy2+4);
				selector_PEEP.invalidate();
			}
			if (!FiO2_container.isVisible() || FiO2_container.getX() != mainPosx1 || FiO2_container.getY() != mainPosy3)
			{
				FiO2_container.setVisible(true);
				FiO2_container.setXY(mainPosx1, mainPosy3);
				FiO2_container.invalidate();
				selector_FiO2.setXY(mainPosx1+5, mainPosy3+4);
				selector_FiO2.invalidate();
			}
			if (flow_container.isVisible())
			{
				flow_container.setVisible(false);
				flow_container.invalidate();
			}
			if (PControl_container.isVisible())
			{
				PControl_container.setVisible(false);
				PControl_container.invalidate();
			}
			if (IE_container.isVisible())
			{
				IE_container.setVisible(false);
				IE_container.invalidate();
			}
			if (!Ti_container.isVisible() || Ti_container.getX() != mainPosx1 || Ti_container.getY() != mainPosy2)
			{
				Ti_container.setVisible(true);
				Ti_container.setXY(mainPosx1, mainPosy2);
				Ti_container.invalidate();
				selector_Ti.setXY(mainPosx1+5, mainPosy2+4);
				selector_Ti.invalidate();
			}
			if (trigger_container.isVisible())
			{
				trigger_container.setVisible(false);
				trigger_container.invalidate();
			}
			if (sensitivity_container.isVisible())
			{
				sensitivity_container.setVisible(false);
				sensitivity_container.invalidate();
			}
			if (PS_container.isVisible())
			{
				PS_container.setVisible(false);
				PS_container.invalidate();
			}
			if (riseTime_container.isVisible())
			{
				riseTime_container.setVisible(false);
				riseTime_container.invalidate();
			}
			if (cyclingOff_container.isVisible())
			{
				cyclingOff_container.setVisible(false);
				cyclingOff_container.invalidate();
			}
			if (CPAP_container.isVisible())
			{
				CPAP_container.setVisible(false);
				CPAP_container.invalidate();
			}

			if (key1 == 0)
			{
				pressKey = 0;
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
			}
			else if (key1 == 1)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (!selector_setting.isVisible())
				{
					selector_setting.setVisible(true);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_setting();
					// code for setting
				}
			}
			else if (key1 == 2)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (!selector_monitor.isVisible())
				{
					selector_monitor.setVisible(true);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for monitor
					pressKey = 0;
					click_Monitoring();
				}
			}
			else if (key1 == 3)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (!selector_configuration.isVisible())
				{
					selector_configuration.setVisible(true);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					click_configurationButton();
				}
			}
			
			else if (key1 == 4)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (!selector_VT.isVisible())
				{
					selector_VT.setVisible(true);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for VT
					click_VT();
				}
			}
			else if (key1 == 5)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (!selector_RR.isVisible())
				{
					selector_RR.setVisible(true);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					// code for RR
					click_RR();
				}
			}
			else if (key1 == 6)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (!selector_Ti.isVisible())
				{
					selector_Ti.setVisible(true);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_Ti();
				}
			}
			else if (key1 == 7)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (!selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(true);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_PEEP();
				}
			}
			else if (key1 == 8)
			{
				if (selector_startPause.isVisible())
				{
					selector_startPause.setVisible(false);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (!selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(true);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					click_FiO2();
				}
			}
			else if (key1 == 9)
			{
				if (!selector_startPause.isVisible())
				{
					selector_startPause.setVisible(true);
					selector_startPause.invalidate();
				}
				if (selector_setting.isVisible())
				{
					selector_setting.setVisible(false);
					selector_setting.invalidate();
				}
				if (selector_monitor.isVisible())
				{
					selector_monitor.setVisible(false);
					selector_monitor.invalidate();
				}
				if (selector_configuration.isVisible())
				{
					selector_configuration.setVisible(false);
					selector_configuration.invalidate();
				}
				if (selector_FiO2.isVisible())
				{
					selector_FiO2.setVisible(false);
					selector_FiO2.invalidate();
				}
				if (selector_IE.isVisible())
				{
					selector_IE.setVisible(false);
					selector_IE.invalidate();
				}
				if (selector_PEEP.isVisible())
				{
					selector_PEEP.setVisible(false);
					selector_PEEP.invalidate();
				}
				if (selector_PIP.isVisible())
				{
					selector_PIP.setVisible(false);
					selector_PIP.invalidate();
				}
				if (selector_VT.isVisible())
				{
					selector_VT.setVisible(false);
					selector_VT.invalidate();
				}
				if (selector_RR.isVisible())
				{
					selector_RR.setVisible(false);
					selector_RR.invalidate();
				}
				if (selector_Ti.isVisible())
				{
					selector_Ti.setVisible(false);
					selector_Ti.invalidate();
				}
				if (selector_flow.isVisible())
				{
					selector_flow.setVisible(false);
					selector_flow.invalidate();
				}
				if (selector_cyclingOff.isVisible())
				{
					selector_cyclingOff.setVisible(false);
					selector_cyclingOff.invalidate();
				}
				if (selector_trigger.isVisible())
				{
					selector_trigger.setVisible(false);
					selector_trigger.invalidate();
				}
				if (selector_sensitivity.isVisible())
				{
					selector_sensitivity.setVisible(false);
					selector_sensitivity.invalidate();
				}
				if (selector_PS.isVisible())
				{
					selector_PS.setVisible(false);
					selector_PS.invalidate();
				}
				if (selector_riseTime.isVisible())
				{
					selector_riseTime.setVisible(false);
					selector_riseTime.invalidate();
				}
				if (pressKey == 1)
				{
					pressKey = 0;
					if (startButton.isVisible() || arb_startButton.isVisible())
					{
						// code for start ventilating
						flag_startVent = 1;
						startButton.executeAction();
					}
					else if (pauseButton.isVisible() || arb_pauseButton.isVisible())
					{
						flag_startVent = 0;
						pauseButton.executeAction();
					}
					else if (!pauseButton.isVisible() && !startButton.isVisible() && !arb_pauseButton.isVisible() && !arb_startButton.isVisible())
					{
						// code for confirming values
						click_confirm();
					}
				}
			}
			else if (key1 > 9)
			{
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
			}
			else if (key1 < 0)
			{
				key1 = 9;
				encoderCounter = key1*4 + 1;
				__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
			}
		}
		
	}
}

void screenView::handleSettingScreen()
{
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
	}
	if (key1 == 1)
	{
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (!selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(true);
			selector_backSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_backSetting();
		}
	}
	else if (key1 == 2)
	{
		if (!selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(true);
			selector_ventilationSetting.invalidate();
		}
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_ventSetting();
		}
	}
	else if (key1 == 3)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (!selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(true);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_patientInfo();
		}
	}
	else if (key1 == 4)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (!selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(true);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_trends();
		}
	}
	else if (key1 == 5)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (!selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(true);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_alarm();
		}
	}
	else if (key1 == 6)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (!selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(true);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_device();
		}
	}
	else if (key1 == 7)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (!selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(true);
			selector_deviceInfoSetting.invalidate();
		}
		if (selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(false);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_deviceInfo();
		}
	}
	else if (key1 == 8)
	{
		if (selector_backSetting.isVisible())
		{
			selector_backSetting.setVisible(false);
			selector_backSetting.invalidate();
		}
		if (selector_ventilationSetting.isVisible())
		{
			selector_ventilationSetting.setVisible(false);
			selector_ventilationSetting.invalidate();
		}
		if (selector_patientInfoSetting.isVisible())
		{
			selector_patientInfoSetting.setVisible(false);
			selector_patientInfoSetting.invalidate();
		}
		if (selector_deviceSetting.isVisible())
		{
			selector_deviceSetting.setVisible(false);
			selector_deviceSetting.invalidate();
		}
		if (selector_alarmSetting.isVisible())
		{
			selector_alarmSetting.setVisible(false);
			selector_alarmSetting.invalidate();
		}
		if (selector_trendSetting.isVisible())
		{
			selector_trendSetting.setVisible(false);
			selector_trendSetting.invalidate();
		}
		if (selector_deviceInfoSetting.isVisible())
		{
			selector_deviceInfoSetting.setVisible(false);
			selector_deviceInfoSetting.invalidate();
		}
		if (!selector_circuitSetting.isVisible())
		{
			selector_circuitSetting.setVisible(true);
			selector_circuitSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_circuitSetting();
		}
	}
	else if (key1 > 8)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	if (key1 < 0)
	{
		key1 = 8;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}

void screenView::handlePatientInfoSettingScreen()
{
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_backPatientInfoSetting.isVisible())
		{
			selector_backPatientInfoSetting.setVisible(false);
			selector_backPatientInfoSetting.invalidate();
		}
		if (selector_ageSetting.isVisible())
		{
			selector_ageSetting.setVisible(false);
			selector_ageSetting.invalidate();
		}
		if (selector_heightPatientSetting.isVisible())
		{
			selector_heightPatientSetting.setVisible(false);
			selector_heightPatientSetting.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_backPatientInfoSetting.isVisible())
		{
			selector_backPatientInfoSetting.setVisible(true);
			selector_backPatientInfoSetting.invalidate();
		}
		if (selector_ageSetting.isVisible())
		{
			selector_ageSetting.setVisible(false);
			selector_ageSetting.invalidate();
		}
		if (selector_heightPatientSetting.isVisible())
		{
			selector_heightPatientSetting.setVisible(false);
			selector_heightPatientSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_backPatientInfo();
		}
	}
	else if (key1 == 2)
	{
		if (selector_backPatientInfoSetting.isVisible())
		{
			selector_backPatientInfoSetting.setVisible(false);
			selector_backPatientInfoSetting.invalidate();
		}
		if (!selector_ageSetting.isVisible())
		{
			selector_ageSetting.setVisible(true);
			selector_ageSetting.invalidate();
		}
		if (selector_heightPatientSetting.isVisible())
		{
			selector_heightPatientSetting.setVisible(false);
			selector_heightPatientSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_age();
		}
	}
	else if (key1 == 3)
	{
		if (selector_backPatientInfoSetting.isVisible())
		{
			selector_backPatientInfoSetting.setVisible(false);
			selector_backPatientInfoSetting.invalidate();
		}
		if (selector_ageSetting.isVisible())
		{
			selector_ageSetting.setVisible(false);
			selector_ageSetting.invalidate();
		}
		if (!selector_heightPatientSetting.isVisible())
		{
			selector_heightPatientSetting.setVisible(true);
			selector_heightPatientSetting.invalidate();
		}
		
		if (pressKey == 1)
		{
			click_heightButton();
		}
	}
	else if (key1 > 3)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 3;
		encoderCounter = 12 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 12 + 1);
	}
}
void screenView::handleVentilationSettingScreen()
{
	if (mode_int == 1) // cmv_vcv
	{
		if (!VT_container_ventSetting.isVisible() || VT_container_ventSetting.getX() != settingPosx1 || VT_container_ventSetting.getX() != settingPosy1)
		{
			VT_container_ventSetting.setVisible(true);
			VT_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			VT_container_ventSetting.invalidate();
			selector_VT_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_VT_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx2)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx1 || PEEP_container_ventSetting.getY() != settingPosy2)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx1, settingPosy2-1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx3 || FiO2_container_ventSetting.getY() != settingPosy1)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx3, settingPosy1);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (!TiInspPause_container_ventSetting.isVisible() || TiInspPause_container_ventSetting.getX()!= settingPosx3 || TiInspPause_container_ventSetting.getY()!= settingPosy2)
		{
			TiInspPause_container_ventSetting.setVisible(true);
			TiInspPause_container_ventSetting.setXY(settingPosx3, settingPosy2);
			TiInspPause_container_ventSetting.invalidate();
			selector_TiInspPause_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_TiInspPause_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx2 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx2, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();

			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (trigger_container_ventSetting_1_1.isVisible())
		{
			trigger_container_ventSetting_1_1.setVisible(false);
			trigger_container_ventSetting_1_1.invalidate();
		}
		if (sensitivity_container_ventSetting_1_1.isVisible())
		{
			sensitivity_container_ventSetting_1_1.setVisible(false);
			sensitivity_container_ventSetting_1_1.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (riseTime_container_ventSetting.isVisible())
		{
			riseTime_container_ventSetting.setVisible(false);
			riseTime_container_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible() || FlowShape_container_ventSetting.getX()!=settingPosx4 || FlowShape_container_ventSetting.getY() != settingPosy2)
		{
			FlowShape_container_ventSetting.setVisible(true);
			FlowShape_container_ventSetting.setXY(settingPosx4, settingPosy2);
			FlowShape_container_ventSetting.invalidate();
			selector_flowShape_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_flowShape_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (!selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(true);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_VT_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				// click_TiInspPause_conf();
				click_Ti_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(true);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiInspPause_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (!selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(true);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_flowShape_conf();
			}
		}
		else if (key1 > 9)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 9;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 2) // cmv_pcv
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx1)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx2)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx2 || FiO2_container_ventSetting.getY() != settingPosy2)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx2, settingPosy2);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (!PControl_container_ventSetting.isVisible() || PControl_container_ventSetting.getX() != settingPosx3 || PControl_container_ventSetting.getY() != settingPosy1-1)
		{
			PControl_container_ventSetting.setVisible(true);
			PControl_container_ventSetting.setXY(settingPosx3, settingPosy1-1);
			PControl_container_ventSetting.invalidate();
			selector_PControl_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_PControl_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx1 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx1, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();
			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (trigger_container_ventSetting_1_1.isVisible())
		{
			trigger_container_ventSetting_1_1.setVisible(false);
			trigger_container_ventSetting_1_1.invalidate();
		}
		if (sensitivity_container_ventSetting_1_1.isVisible())
		{
			sensitivity_container_ventSetting_1_1.setVisible(false);
			sensitivity_container_ventSetting_1_1.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX() != settingPosx3 || riseTime_container_ventSetting.getY() != settingPosy2)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx3, settingPosy2);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_riseTime_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (!selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(true);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PControl_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Ti_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTime_conf();
			}
		}
		
		else if (key1 > 8)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 8;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 3) // ac_vcv
	{
		if (!VT_container_ventSetting.isVisible() || VT_container_ventSetting.getX() != settingPosx1)
		{
			VT_container_ventSetting.setVisible(true);
			VT_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			VT_container_ventSetting.invalidate();
			selector_VT_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_VT_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx2)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx3)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx3, settingPosy1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx4 || FiO2_container_ventSetting.getY() != settingPosy1)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx4, settingPosy1);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (!TiInspPause_container_ventSetting.isVisible() || TiInspPause_container_ventSetting.getX()!= settingPosx1 || TiInspPause_container_ventSetting.getY()!= settingPosy3)
		{
			TiInspPause_container_ventSetting.setVisible(true);
			TiInspPause_container_ventSetting.setXY(settingPosx1, settingPosy3);
			TiInspPause_container_ventSetting.invalidate();
			selector_TiInspPause_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_TiInspPause_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx1|| Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx1, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX() != settingPosx2 || trigger_container_ventSetting_1_1.getY() != settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx2, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX() != settingPosx3 || sensitivity_container_ventSetting_1_1.getY() != settingPosy2)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx3, settingPosy2);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_sens_ventSetting.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (riseTime_container_ventSetting.isVisible())
		{
			riseTime_container_ventSetting.setVisible(false);
			riseTime_container_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (!FlowShape_container_ventSetting.isVisible() || FlowShape_container_ventSetting.getX() != settingPosx4 || FlowShape_container_ventSetting.getY() != settingPosy2)
		{
			FlowShape_container_ventSetting.setVisible(true);
			FlowShape_container_ventSetting.setXY(settingPosx4, settingPosy2);
			FlowShape_container_ventSetting.invalidate();
			selector_flowShape_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_flowShape_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (!selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(true);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_VT_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				// click_TiInspPause_conf();
				click_Ti_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (!selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(true);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_flowShape_conf();
			}
		}
		
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(true);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiInspPause_conf();
			}
		}
		
		else if (key1 > 11)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 11;
			encoderCounter = key1 *4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 4) // ac_pcv
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx1)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx2 || PEEP_container_ventSetting.getY() != settingPosy1-1)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx4 || FiO2_container_ventSetting.getY() != settingPosy2)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx4, settingPosy2);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (!PControl_container_ventSetting.isVisible() || PControl_container_ventSetting.getX() != settingPosx3 || PControl_container_ventSetting.getY() != settingPosy1-1)
		{
			PControl_container_ventSetting.setVisible(true);
			PControl_container_ventSetting.setXY(settingPosx3, settingPosy1-1);
			PControl_container_ventSetting.invalidate();
			selector_PControl_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_PControl_ventSetting.invalidate();
		}
		if (!PControlMax_container_ventSetting.isVisible() || PControlMax_container_ventSetting.getX() != settingPosx1 || PControlMax_container_ventSetting.getY() != settingPosy3)
		{
			PControlMax_container_ventSetting.setVisible(true);
			PControlMax_container_ventSetting.setXY(settingPosx1, settingPosy3);
			PControlMax_container_ventSetting.invalidate();
			selector_PControlMax_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_PControlMax_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (!SafetyVT_container_ventSetting.isVisible() || SafetyVT_container_ventSetting.getX() != settingPosx1 || SafetyVT_container_ventSetting.getY() != settingPosy2)
		{
			SafetyVT_container_ventSetting.setVisible(true);
			SafetyVT_container_ventSetting.setXY(settingPosx1, settingPosy2);
			SafetyVT_container_ventSetting.invalidate();
			selector_safetyVT_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_safetyVT_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx2 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx2, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX() != settingPosx3 || trigger_container_ventSetting_1_1.getY() != settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx3, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX() != settingPosx4 || sensitivity_container_ventSetting_1_1.getY() != settingPosy2)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx4, settingPosy2);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_sens_ventSetting.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX() != settingPosx4 || riseTime_container_ventSetting.getY() != settingPosy1)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx4, settingPosy1);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_riseTime_ventSetting.invalidate();
			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (!selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(true);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PControl_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTime_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (!selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(true);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_safetyVT_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Ti_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 12)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(true);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PControlMax_conf();
			}
		}
		else if (key1 > 12)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 12;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 5) // simv_vcv
	{
		if (!VT_container_ventSetting.isVisible() || VT_container_ventSetting.getX() != settingPosx1)
		{
			VT_container_ventSetting.setVisible(true);
			VT_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			VT_container_ventSetting.invalidate();
			selector_VT_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_VT_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx2)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx3|| PEEP_container_ventSetting.getY() != settingPosy1)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx3, settingPosy1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (FiO2_container_ventSetting.isVisible())
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
		}
		if (!TiInspPause_container_ventSetting.isVisible() || TiInspPause_container_ventSetting.getX()!= settingPosx3 || TiInspPause_container_ventSetting.getY()!= settingPosy3)
		{
			TiInspPause_container_ventSetting.setVisible(true);
			TiInspPause_container_ventSetting.setXY(settingPosx3, settingPosy3);
			TiInspPause_container_ventSetting.invalidate();
			selector_TiInspPause_ventSetting.setXY(settingPosx3+6, settingPosy3+4);
			selector_TiInspPause_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx2 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx2, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX()!=settingPosx4 || trigger_container_ventSetting_1_1.getY()!=settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx4, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX()!=settingPosx1 || sensitivity_container_ventSetting_1_1.getY()!=settingPosy3)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx1, settingPosy3);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_sens_ventSetting.invalidate();
		}
		if (!PS_container_ventSetting.isVisible() || PS_container_ventSetting.getX() != settingPosx4 || PS_container_ventSetting.getY() != settingPosy1)
		{
			PS_container_ventSetting.setVisible(true);
			PS_container_ventSetting.setXY(settingPosx4, settingPosy1);
			PS_container_ventSetting.invalidate();
			selector_PS_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_PS_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX() != settingPosx2 || riseTime_container_ventSetting.getY() != settingPosy2)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx3, settingPosy2);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_riseTime_ventSetting.invalidate();
			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if (!cyclingOff_container_ventSetting.isVisible()|| cyclingOff_container_ventSetting.getX() != settingPosx2 || cyclingOff_container_ventSetting.getY() != settingPosy3)
		{
			cyclingOff_container_ventSetting.setVisible(true);
			cyclingOff_container_ventSetting.setXY(settingPosx2, settingPosy3);
			cyclingOff_container_ventSetting.invalidate();
			selector_cyclingOff_ventSetting.setXY(settingPosx2+6, settingPosy3+4);
			selector_cyclingOff_ventSetting.invalidate();
		}
		if (!FlowShape_container_ventSetting.isVisible() || FlowShape_container_ventSetting.getX() != settingPosx1 || FlowShape_container_ventSetting.getY() != settingPosy2)
		{
			FlowShape_container_ventSetting.setVisible(true);
			FlowShape_container_ventSetting.setXY(settingPosx1, settingPosy2);
			FlowShape_container_ventSetting.invalidate();
			selector_flowShape_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_flowShape_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (!selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(true);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_VT_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (!selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(true);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Psupp_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (!selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(true);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_flowShape_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Ti_conf();
			}
		}
		
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTime_conf();
			}
		}
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		
		else if (key1 == 12)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (!selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(true);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_cycling_conf();
			}
		}
		else if (key1 == 13)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(true);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiInspPause_conf();
			}
		}
		else if (key1 > 13)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 12;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 6) // simv_pcv
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx1)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx2)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx2 || FiO2_container_ventSetting.getY() != settingPosy3)
		{
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx2 , settingPosy3);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx2+6, settingPosy3+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (!PControl_container_ventSetting.isVisible() || PControl_container_ventSetting.getX() != settingPosx3 || PControl_container_ventSetting.getY() != settingPosy1-1)
		{
			PControl_container_ventSetting.setVisible(true);
			PControl_container_ventSetting.setXY(settingPosx3, settingPosy1-1);
			PControl_container_ventSetting.invalidate();
			selector_PControl_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_PControl_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx2 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx2, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX() != settingPosx4 || trigger_container_ventSetting_1_1.getY() != settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx4, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX() != settingPosx1 || sensitivity_container_ventSetting_1_1.getY() != settingPosy3)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx1, settingPosy3);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_sens_ventSetting.invalidate();
		}
		if (!PS_container_ventSetting.isVisible() || PS_container_ventSetting.getX() != settingPosx3 || PS_container_ventSetting.getY() != settingPosy2)
		{
			PS_container_ventSetting.setVisible(true);
			PS_container_ventSetting.setXY(settingPosx3, settingPosy2);
			PS_container_ventSetting.invalidate();
			selector_PS_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_PS_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX() != settingPosx4 || riseTime_container_ventSetting.getY() != settingPosy1)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx4, settingPosy1);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_riseTime_ventSetting.invalidate();
			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if (!cyclingOff_container_ventSetting.isVisible() || cyclingOff_container_ventSetting.getX() != settingPosx1 || cyclingOff_container_ventSetting.getY() != settingPosy2)
		{
			cyclingOff_container_ventSetting.setVisible(true);
			cyclingOff_container_ventSetting.setXY(settingPosx1, settingPosy2);
			cyclingOff_container_ventSetting.invalidate();
			selector_cyclingOff_ventSetting.setVisible(true);
			selector_cyclingOff_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_cyclingOff_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_VT_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (!selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(true);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PControl_conf();
			}
		}
		
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTime_conf();
			}
		}
		else if (key1 ==7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (!selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(true);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_safetyVT_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Ti_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (!selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(true);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_Psupp_conf();
			}
		}
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		else if (key1 == 12)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 > 12)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 12;
			encoderCounter = 48 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, 48 + 1);
		}
	}
	else if (mode_int == 7) // psv
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX()!=settingPosx2 || RR_container_ventSetting.getY()!=settingPosy1)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx1 || PEEP_container_ventSetting.getY() != settingPosy2)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx1, settingPosy2);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (FiO2_container_ventSetting.isVisible())
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (!PSMax_container_ventSetting.isVisible()|| PSMax_container_ventSetting.getX()!= settingPosx2 || PSMax_container_ventSetting.getY()!=settingPosy3)
		{
			PSMax_container_ventSetting.setVisible(true);
			PSMax_container_ventSetting.setXY(settingPosx2, settingPosy3);
			PSMax_container_ventSetting.invalidate();
			selector_PSMax_ventSetting.setXY(settingPosx2+6, settingPosy3+4);
			selector_PSMax_ventSetting.invalidate();
		}
		if (!SafetyVT_container_ventSetting.isVisible() || SafetyVT_container_ventSetting.getX()!=settingPosx1 || SafetyVT_container_ventSetting.getY()!=settingPosy3)
		{
			SafetyVT_container_ventSetting.setVisible(true);
			SafetyVT_container_ventSetting.setXY(settingPosx1, settingPosy3);
			SafetyVT_container_ventSetting.invalidate();
			selector_safetyVT_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_safetyVT_ventSetting.invalidate();
		}
		if (Ti_container_ventSetting.isVisible())
		{
			Ti_container_ventSetting.setVisible(false);
			Ti_container_ventSetting.invalidate();
		}
		if (!TiMax_container_ventSetting.isVisible() || TiMax_container_ventSetting.getX() != settingPosx2 || TiMax_container_ventSetting.getY() != settingPosy2)
		{
			TiMax_container_ventSetting.setVisible(true);
			TiMax_container_ventSetting.setXY(settingPosx2, settingPosy2);
			TiMax_container_ventSetting.invalidate();
			selector_TiMax_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_TiMax_ventSetting.invalidate();
		}
		if (!TiMin_container_ventSetting.isVisible() || TiMax_container_ventSetting.getX() != settingPosx3 || TiMax_container_ventSetting.getY() != settingPosy2)
		{
			TiMin_container_ventSetting.setVisible(true);
			TiMin_container_ventSetting.setXY(settingPosx3, settingPosy2);
			TiMin_container_ventSetting.invalidate();
			selector_TiMin_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_TiMin_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX() != settingPosx4 || trigger_container_ventSetting_1_1.getY() != settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx4, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX() != settingPosx1 || sensitivity_container_ventSetting_1_1.getY() != settingPosy3)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx1, settingPosy3);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_sens_ventSetting.invalidate();
		}
		if (!PS_container_ventSetting.isVisible() || PS_container_ventSetting.getX() != settingPosx1 || PS_container_ventSetting.getY() != settingPosy1-1)
		{
			PS_container_ventSetting.setVisible(true);
			PS_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			PS_container_ventSetting.invalidate();
			selector_PS_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_PS_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX() != settingPosx4 || riseTime_container_ventSetting.getY()!=settingPosy1-1)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx4, settingPosy1-1);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_riseTime_ventSetting.invalidate();
		}
		if (!cyclingOff_container_ventSetting.isVisible() || cyclingOff_container_ventSetting.getX() != settingPosx3 || cyclingOff_container_ventSetting.getY() != settingPosy1)
		{
			cyclingOff_container_ventSetting.setVisible(true);
			cyclingOff_container_ventSetting.setXY(settingPosx3, settingPosy1);
			cyclingOff_container_ventSetting.invalidate();
			selector_cyclingOff_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_cyclingOff_ventSetting.invalidate();
			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (!selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(true);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_Psupp_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (!selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(true);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_cycling_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_riseTime_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(true);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_TiMax_ventSetting();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (!selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(true);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_TiMin_ventSetting();
			}
		}
		
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_sensitivity_conf();
			}
		}
		
		else if (key1 == 12)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (!selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(true);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(false);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_safetyVT_conf();
			}
		}
		else if (key1 == 13)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_PSMax_ventSetting.isVisible())
			{
				selector_PSMax_ventSetting.setVisible(true);
				selector_PSMax_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if(pressKey==1)
			{
				click_PSMax_conf();
			}
		}
		
		else if (key1 > 13)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 13;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 8) // cpap
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (RR_container_ventSetting.isVisible())
		{
			RR_container_ventSetting.setVisible(false);
			RR_container_ventSetting.invalidate();
		}
		if (PEEP_container_ventSetting.isVisible())
		{
			PEEP_container_ventSetting.setVisible(false);
			PEEP_container_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx1 || FiO2_container_ventSetting.getY() != settingPosy2)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx1, settingPosy2);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (Ti_container_ventSetting.isVisible())
		{
			Ti_container_ventSetting.setVisible(false);
			Ti_container_ventSetting.invalidate();
		}
		if (TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if (TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX()!=settingPosx2 || trigger_container_ventSetting_1_1.getY()!=settingPosy1-1)
		{
			trigger_container_ventSetting_1_1.setVisible(false);
			trigger_container_ventSetting_1_1.invalidate();
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx2, settingPosy1-1);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX()!=settingPosx3 || sensitivity_container_ventSetting_1_1.getY()!=settingPosy1)
		{
			sensitivity_container_ventSetting_1_1.setVisible(false);
			sensitivity_container_ventSetting_1_1.invalidate();
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx3, settingPosy1);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_sens_ventSetting.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (riseTime_container_ventSetting.isVisible())
		{
			riseTime_container_ventSetting.setVisible(false);
			riseTime_container_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (!CPAP_container_ventSetting.isVisible() || CPAP_container_ventSetting.getX()!=settingPosx1 || CPAP_container_ventSetting.getY()!=settingPosy1-1)
		{
			CPAP_container_ventSetting.setVisible(true);
			CPAP_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			CPAP_container_ventSetting.invalidate();
			selector_CPAP_ventSetting_1.setXY(settingPosx1+6, settingPosy1+4);
			selector_CPAP_ventSetting_1.invalidate();
		}

		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (!selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(true);
				selector_CPAP_ventSetting_1.invalidate();
			}
			if (pressKey == 1)
			{
				click_CPAP_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 > 6)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 6;
			encoderCounter = 24 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, 24 + 1);
		}
	}
	else if (mode_int == 9) // bipap
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx2)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (PEEP_container_ventSetting.isVisible())
		{
			PEEP_container_ventSetting.setVisible(false);
			PEEP_container_ventSetting.invalidate();
		}
		if (!EPAP_container_ventSetting.isVisible() || EPAP_container_ventSetting.getX() != settingPosx1)
		{
			EPAP_container_ventSetting.setVisible(true);
			EPAP_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			EPAP_container_ventSetting.invalidate();
			selector_EPAP_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_EPAP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx1 || FiO2_container_ventSetting.getY() != settingPosy3)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx1, settingPosy3);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (!IPAP_container_ventSetting.isVisible() || IPAP_container_ventSetting.getX() != settingPosx1 || IPAP_container_ventSetting.getY() != settingPosy2)
		{
			IPAP_container_ventSetting.setVisible(true);
			IPAP_container_ventSetting.setXY(settingPosx1, settingPosy2);
			IPAP_container_ventSetting.invalidate();
			selector_IPAP_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_IPAP_ventSetting.invalidate();
		}
		if (!IPAPMax_container_ventSetting.isVisible()|| IPAPMax_container_ventSetting.getX() != settingPosx1 || IPAPMax_container_ventSetting.getY() != settingPosy3)
		{
			IPAPMax_container_ventSetting.setVisible(true);
			IPAPMax_container_ventSetting.setXY(settingPosx1, settingPosy3);
			IPAPMax_container_ventSetting.invalidate();
			selector_IPAPMax_ventSetting.setXY(settingPosx1+6, settingPosy3+4);
			selector_IPAPMax_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (!SafetyVT_container_ventSetting.isVisible() || SafetyVT_container_ventSetting.getX()!=settingPosx4 || SafetyVT_container_ventSetting.getY()!=settingPosy2)
		{
			SafetyVT_container_ventSetting.setVisible(true);
			SafetyVT_container_ventSetting.setXY(settingPosx4, settingPosy2);
			SafetyVT_container_ventSetting.invalidate();
			selector_safetyVT_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_safetyVT_ventSetting.invalidate();
		}
		if (Ti_container_ventSetting.isVisible())
		{
			Ti_container_ventSetting.setVisible(false);
			Ti_container_ventSetting.invalidate();
		}
		if (!TiMax_container_ventSetting.isVisible() || TiMax_container_ventSetting.getX()!=settingPosx3 || TiMax_container_ventSetting.getY()!=settingPosy1)
		{
			TiMax_container_ventSetting.setVisible(true);
			TiMax_container_ventSetting.setXY(settingPosx3, settingPosy1);
			TiMax_container_ventSetting.invalidate();
			selector_TiMax_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_TiMax_ventSetting.invalidate();
		}
		if (!TiMin_container_ventSetting.isVisible()|| TiMin_container_ventSetting.getX()!=settingPosx4 || TiMin_container_ventSetting.getY()!=settingPosy1)
		{
			TiMin_container_ventSetting.setVisible(true);
			TiMin_container_ventSetting.setXY(settingPosx4, settingPosy1);
			TiMin_container_ventSetting.invalidate();
			selector_TiMin_ventSetting.setXY(settingPosx4+6, settingPosy1+4);
			selector_TiMin_ventSetting.invalidate();
		}
		if (!trigger_container_ventSetting_1_1.isVisible() || trigger_container_ventSetting_1_1.getX()!=settingPosx2 || trigger_container_ventSetting_1_1.getY()!=settingPosy2)
		{
			trigger_container_ventSetting_1_1.setVisible(true);
			trigger_container_ventSetting_1_1.setXY(settingPosx2, settingPosy2);
			trigger_container_ventSetting_1_1.invalidate();
			selector_trigger_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_trigger_ventSetting.invalidate();
		}
		if (!sensitivity_container_ventSetting_1_1.isVisible() || sensitivity_container_ventSetting_1_1.getX()!=settingPosx3 || sensitivity_container_ventSetting_1_1.getY()!=settingPosy2)
		{
			sensitivity_container_ventSetting_1_1.setVisible(true);
			sensitivity_container_ventSetting_1_1.setXY(settingPosx3, settingPosy2);
			sensitivity_container_ventSetting_1_1.invalidate();
			selector_sens_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_sens_ventSetting.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (!riseTime_container_ventSetting.isVisible() || riseTime_container_ventSetting.getX()!=settingPosx1 || riseTime_container_ventSetting.getY()!=settingPosy2)
		{
			riseTime_container_ventSetting.setVisible(true);
			riseTime_container_ventSetting.setXY(settingPosx2, settingPosy2);
			riseTime_container_ventSetting.invalidate();
			selector_riseTime_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_riseTime_ventSetting.invalidate();
		}
		if (!cyclingOff_container_ventSetting.isVisible() || cyclingOff_container_ventSetting.getX()!=settingPosx2 || cyclingOff_container_ventSetting.getY()!=settingPosy2)
		{
			cyclingOff_container_ventSetting.setVisible(true);
			cyclingOff_container_ventSetting.setXY(settingPosx2, settingPosy2);
			cyclingOff_container_ventSetting.invalidate();
			selector_cyclingOff_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_cyclingOff_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);	
			CPAP_container_ventSetting.invalidate();
		}
		
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (!selector_EPAP_ventSetting.isVisible())
			{
				selector_EPAP_ventSetting.setVisible(true);
				selector_EPAP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_EPAP_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(true);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiMax_ventSetting();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (!selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(true);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiMin_ventSetting();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (!selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(true);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTime_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (!selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(true);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_trigger_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_IPAP_ventSetting.isVisible())
			{
				selector_IPAP_ventSetting.setVisible(true);
				selector_IPAP_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiMax_ventSetting.isVisible())
			{
				selector_TiMax_ventSetting.setVisible(false);
				selector_TiMax_ventSetting.invalidate();
			}
			if (selector_TiMin_ventSetting.isVisible())
			{
				selector_TiMin_ventSetting.setVisible(false);
				selector_TiMin_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_IPAP_conf();
			}
		}
		else if (key1 == 10)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (!selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(true);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_cycling_conf();
			}
		}
		else if (key1 == 11)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (!selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(true);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_safetyVT_conf();
			}
		}
		else if (key1 == 12)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (!selector_IPAPMax_ventSetting.isVisible())
			{
				selector_IPAPMax_ventSetting.setVisible(true);
				selector_IPAPMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_IPAPMax_conf();
			}
		}
		else if (key1 == 13)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 14)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_PControlMax_ventSetting.isVisible())
			{
				selector_PControlMax_ventSetting.setVisible(false);
				selector_PControlMax_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (!selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(true);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_sensitivity_conf();
			}
		}
		else if (key1 > 14)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 14;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (mode_int == 3300) // HFNC
	{
		if (VT_container_ventSetting.isVisible())
		{
			VT_container_ventSetting.setVisible(false);
			VT_container_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx1 || RR_container_ventSetting.getY() != settingPosy1-1)
		{
			RR_container_ventSetting.setVisible(false);
			RR_container_ventSetting.invalidate();
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (PEEP_container_ventSetting.isVisible())
		{
			PEEP_container_ventSetting.setVisible(false);
			PEEP_container_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx1 || FiO2_container_ventSetting.getY() != settingPosy2)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx1, settingPosy2);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (TiInspPause_container_ventSetting.isVisible())
		{
			TiInspPause_container_ventSetting.setVisible(false);
			TiInspPause_container_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (Ti_container_ventSetting.isVisible())
		{
			Ti_container_ventSetting.setVisible(false);
			Ti_container_ventSetting.invalidate();
		}
		if (trigger_container_ventSetting_1_1.isVisible())
		{
			trigger_container_ventSetting_1_1.setVisible(false);
			trigger_container_ventSetting_1_1.invalidate();
		}
		if (sensitivity_container_ventSetting_1_1.isVisible())
		{
			sensitivity_container_ventSetting_1_1.setVisible(false);
			sensitivity_container_ventSetting_1_1.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (riseTime_container_ventSetting.isVisible())
		{
			riseTime_container_ventSetting.setVisible(false);
			riseTime_container_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible())
		{
			FlowShape_container_ventSetting.setVisible(false);
			FlowShape_container_ventSetting.invalidate();
		}
		
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 > 4)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 4;
			encoderCounter = 16 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, 16 + 1);
		}
	}

	else if (mode_int == 10) // CPR
	{
		if (!VT_container_ventSetting.isVisible() || VT_container_ventSetting.getX() != settingPosx1 || VT_container_ventSetting.getX() != settingPosy1)
		{
			VT_container_ventSetting.setVisible(true);
			VT_container_ventSetting.setXY(settingPosx1, settingPosy1-1);
			VT_container_ventSetting.invalidate();
			selector_VT_ventSetting.setXY(settingPosx1+6, settingPosy1+4);
			selector_VT_ventSetting.invalidate();
		}
		if (!RR_container_ventSetting.isVisible() || RR_container_ventSetting.getX() != settingPosx2)
		{
			RR_container_ventSetting.setVisible(true);
			RR_container_ventSetting.setXY(settingPosx2, settingPosy1-1);
			RR_container_ventSetting.invalidate();
			selector_RR_ventSetting.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_ventSetting.invalidate();
		}
		if (!PEEP_container_ventSetting.isVisible() || PEEP_container_ventSetting.getX() != settingPosx1 || PEEP_container_ventSetting.getY() != settingPosy2)
		{
			PEEP_container_ventSetting.setVisible(true);
			PEEP_container_ventSetting.setXY(settingPosx1, settingPosy2);
			PEEP_container_ventSetting.invalidate();
			selector_PEEP_ventSetting.setXY(settingPosx1+6, settingPosy2+4);
			selector_PEEP_ventSetting.invalidate();
		}
		if (!FiO2_container_ventSetting.isVisible() || FiO2_container_ventSetting.getX() != settingPosx3 || FiO2_container_ventSetting.getY() != settingPosy1)
		{
			FiO2_container_ventSetting.setVisible(false);
			FiO2_container_ventSetting.invalidate();
			FiO2_container_ventSetting.setVisible(true);
			FiO2_container_ventSetting.setXY(settingPosx3, settingPosy1);
			FiO2_container_ventSetting.invalidate();
			selector_FiO2_ventSetting.setXY(settingPosx3+6, settingPosy1+4);
			selector_FiO2_ventSetting.invalidate();
		}
		if (!TiInspPause_container_ventSetting.isVisible() || TiInspPause_container_ventSetting.getX()!= settingPosx3 || TiInspPause_container_ventSetting.getY()!= settingPosy2)
		{
			TiInspPause_container_ventSetting.setVisible(true);
			TiInspPause_container_ventSetting.setXY(settingPosx3, settingPosy2);
			TiInspPause_container_ventSetting.invalidate();
			selector_TiInspPause_ventSetting.setXY(settingPosx3+6, settingPosy2+4);
			selector_TiInspPause_ventSetting.invalidate();
		}
		if (PControl_container_ventSetting.isVisible())
		{
			PControl_container_ventSetting.setVisible(false);
			PControl_container_ventSetting.invalidate();
		}
		if (PControlMax_container_ventSetting.isVisible())
		{
			PControlMax_container_ventSetting.setVisible(false);
			PControlMax_container_ventSetting.invalidate();
		}
		if (IPAP_container_ventSetting.isVisible())
		{
			IPAP_container_ventSetting.setVisible(false);
			IPAP_container_ventSetting.invalidate();
		}
		if (IPAPMax_container_ventSetting.isVisible())
		{
			IPAPMax_container_ventSetting.setVisible(false);
			IPAPMax_container_ventSetting.invalidate();
		}
		if (EPAP_container_ventSetting.isVisible())
		{
			EPAP_container_ventSetting.setVisible(false);
			EPAP_container_ventSetting.invalidate();
		}
		if (PSMax_container_ventSetting.isVisible())
		{
			PSMax_container_ventSetting.setVisible(false);
			PSMax_container_ventSetting.invalidate();
		}
		if (SafetyVT_container_ventSetting.isVisible())
		{
			SafetyVT_container_ventSetting.setVisible(false);
			SafetyVT_container_ventSetting.invalidate();
		}
		if (!Ti_container_ventSetting.isVisible() || Ti_container_ventSetting.getX() != settingPosx2 || Ti_container_ventSetting.getY() != settingPosy2)
		{
			Ti_container_ventSetting.setVisible(true);
			Ti_container_ventSetting.setXY(settingPosx2, settingPosy2);
			Ti_container_ventSetting.invalidate();
			selector_Ti_ventSetting.setXY(settingPosx2+6, settingPosy2+4);
			selector_Ti_ventSetting.invalidate();

			container_ventilationSettingScreen.setVisible(false);
			container_ventilationSettingScreen.invalidate();
			container_ventilationSettingScreen.setVisible(true);
			container_ventilationSettingScreen.invalidate();
		}
		if(TiMax_container_ventSetting.isVisible())
		{
			TiMax_container_ventSetting.setVisible(false);
			TiMax_container_ventSetting.invalidate();
		}
		if(TiMin_container_ventSetting.isVisible())
		{
			TiMin_container_ventSetting.setVisible(false);
			TiMin_container_ventSetting.invalidate();
		}
		if (trigger_container_ventSetting_1_1.isVisible())
		{
			trigger_container_ventSetting_1_1.setVisible(false);
			trigger_container_ventSetting_1_1.invalidate();
		}
		if (sensitivity_container_ventSetting_1_1.isVisible())
		{
			sensitivity_container_ventSetting_1_1.setVisible(false);
			sensitivity_container_ventSetting_1_1.invalidate();
		}
		if (PS_container_ventSetting.isVisible())
		{
			PS_container_ventSetting.setVisible(false);
			PS_container_ventSetting.invalidate();
		}
		if (riseTime_container_ventSetting.isVisible())
		{
			riseTime_container_ventSetting.setVisible(false);
			riseTime_container_ventSetting.invalidate();
		}
		if (cyclingOff_container_ventSetting.isVisible())
		{
			cyclingOff_container_ventSetting.setVisible(false);
			cyclingOff_container_ventSetting.invalidate();
		}
		if (FlowShape_container_ventSetting.isVisible() || FlowShape_container_ventSetting.getX()!=settingPosx4 || FlowShape_container_ventSetting.getY() != settingPosy2)
		{
			FlowShape_container_ventSetting.setVisible(true);
			FlowShape_container_ventSetting.setXY(settingPosx4, settingPosy2);
			FlowShape_container_ventSetting.invalidate();
			selector_flowShape_ventSetting.setXY(settingPosx4+6, settingPosy2+4);
			selector_flowShape_ventSetting.invalidate();
		}
		if (CPAP_container_ventSetting.isVisible())
		{
			CPAP_container_ventSetting.setVisible(false);
			CPAP_container_ventSetting.invalidate();
		}
		
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (selector_CPAP_ventSetting_1.isVisible())
			{
				selector_CPAP_ventSetting_1.setVisible(false);
				selector_CPAP_ventSetting_1.invalidate();
			}
		}
		else if (key1 == 1)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (!selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(true);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			
			if (pressKey == 1)
			{
				click_backVentSetting();
			}
		}
		else if (key1 == 2)
		{
			if (!selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(true);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (!selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(true);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_VT_conf();
			}
		}
		else if (key1 == 4)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (!selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(true);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_RR_conf();
			}
		}
		else if (key1 == 5)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (!selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(true);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_FiO2_conf();
			}
		}
		else if (key1 == 6)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (!selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(true);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEP_conf();
			}
		}
		else if (key1 == 7)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (!selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(true);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				// click_TiInspPause_conf();
				click_Ti_conf();
			}
		}
		else if (key1 == 8)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (!selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(true);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(false);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiInspPause_conf();
			}
		}
		else if (key1 == 9)
		{
			if (selector_modeSetting.isVisible())
			{
				selector_modeSetting.setVisible(false);
				selector_modeSetting.invalidate();
			}
			if (selector_backVentSetting.isVisible())
			{
				selector_backVentSetting.setVisible(false);
				selector_backVentSetting.invalidate();
			}
			if (selector_VT_ventSetting.isVisible())
			{
				selector_VT_ventSetting.setVisible(false);
				selector_VT_ventSetting.invalidate();
			}
			if (selector_RR_ventSetting.isVisible())
			{
				selector_RR_ventSetting.setVisible(false);
				selector_RR_ventSetting.invalidate();
			}
			if (selector_safetyVT_ventSetting.isVisible())
			{
				selector_safetyVT_ventSetting.setVisible(false);
				selector_safetyVT_ventSetting.invalidate();
			}
			if (selector_PEEP_ventSetting.isVisible())
			{
				selector_PEEP_ventSetting.setVisible(false);
				selector_PEEP_ventSetting.invalidate();
			}
			if (selector_PControl_ventSetting.isVisible())
			{
				selector_PControl_ventSetting.setVisible(false);
				selector_PControl_ventSetting.invalidate();
			}
			if (selector_FiO2_ventSetting.isVisible())
			{
				selector_FiO2_ventSetting.setVisible(false);
				selector_FiO2_ventSetting.invalidate();
			}
			if (selector_Ti_ventSetting.isVisible())
			{
				selector_Ti_ventSetting.setVisible(false);
				selector_Ti_ventSetting.invalidate();
			}
			if (selector_TiInspPause_ventSetting.isVisible())
			{
				selector_TiInspPause_ventSetting.setVisible(false);
				selector_TiInspPause_ventSetting.invalidate();
			}
			if (selector_cyclingOff_ventSetting.isVisible())
			{
				selector_cyclingOff_ventSetting.setVisible(false);
				selector_cyclingOff_ventSetting.invalidate();
			}
			if (selector_trigger_ventSetting.isVisible())
			{
				selector_trigger_ventSetting.setVisible(false);
				selector_trigger_ventSetting.invalidate();
			}
			if (selector_sens_ventSetting.isVisible())
			{
				selector_sens_ventSetting.setVisible(false);
				selector_sens_ventSetting.invalidate();
			}
			if (selector_PS_ventSetting.isVisible())
			{
				selector_PS_ventSetting.setVisible(false);
				selector_PS_ventSetting.invalidate();
			}
			if (selector_riseTime_ventSetting.isVisible())
			{
				selector_riseTime_ventSetting.setVisible(false);
				selector_riseTime_ventSetting.invalidate();
			}
			if (!selector_flowShape_ventSetting.isVisible())
			{
				selector_flowShape_ventSetting.setVisible(true);
				selector_flowShape_ventSetting.invalidate();
			}
			if (pressKey == 1)
			{
				click_flowShape_conf();
			}
		}
		else if (key1 > 9)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 9;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	
}
void screenView::handlePEEP()
{
	if (key1 != tmp)
	{
		if(PEEP_tmp_intval == -1 && (PEEP_tmp_intval + (float)(key1 - tmp)) > -1) PEEP_tmp_intval = 3;
		else if(PEEP_tmp_intval == 3 && (PEEP_tmp_intval + (float)(key1 - tmp)) < 3) PEEP_tmp_intval = -1;
		else PEEP_tmp_intval = PEEP_tmp_intval + (float)(key1 - tmp);
		
		if (PEEP_tmp_intval > 20)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = -1;
		}
		else if (PEEP_tmp_intval < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 20;
		}
		if(PEEP_tmp_intval == -1)
		{
			Unicode::strncpy(PEEP_val_bigBuffer, "Off", 3);
			PEEP_val_big.setWildcard1(PEEP_val_bigBuffer);
			PEEP_val_big.resizeToCurrentText();
			PEEP_val_big.invalidate();
		}
		else
		{
			Unicode::snprintf(PEEP_val_bigBuffer, PEEP_VAL_BIG_SIZE, "%d", (int)PEEP_tmp_intval);
			PEEP_val_big.setWildcard1(PEEP_val_bigBuffer);
			PEEP_val_big.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PEEP();
	}
}

void screenView::handlePEEP_CONF()
{
	if (key1 != tmp)
	{
		if(PEEP_tmp_intval == -1 && (PEEP_tmp_intval + (float)(key1 - tmp)) > -1) PEEP_tmp_intval = 3;
		else if(PEEP_tmp_intval == 3 && (PEEP_tmp_intval + (float)(key1 - tmp)) < 3) PEEP_tmp_intval = -1;
		else PEEP_tmp_intval = PEEP_tmp_intval + (float)(key1 - tmp);
		
		if (PEEP_tmp_intval > 20)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = -1;
		}
		else if (PEEP_tmp_intval < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 20;
		}
		if(PEEP_tmp_intval == -1)
		{
			Unicode::strncpy(PEEP_val_big_ventSettingBuffer, "Off", 3);
			PEEP_val_big_ventSetting.setWildcard1(PEEP_val_big_ventSettingBuffer);
			PEEP_val_big_ventSetting.resizeToCurrentText();
			PEEP_val_big_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(PEEP_val_big_ventSettingBuffer, PEEP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
			PEEP_val_big_ventSetting.setWildcard1(PEEP_val_big_ventSettingBuffer);
			PEEP_val_big_ventSetting.invalidate();
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PEEP_conf();
	}
}

void screenView::handlePIP()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > 60)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = PEEP_tmp_intval + 1;
		}
		else if (PControl_tmp_intval < PEEP_tmp_intval + 1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 60;
		}
		Unicode::snprintf(PControl_val_bigBuffer, PCONTROL_VAL_BIG_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_big.setWildcard1(PControl_val_bigBuffer);
		PControl_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PControl();
	}
}

void screenView::handlePControl_CONF()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > 50)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 3;
		}
		else if (PControl_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 50;
		}
		Unicode::snprintf(PControl_val_big_ventSettingBuffer, PCONTROL_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_big_ventSetting.setWildcard1(PControl_val_big_ventSettingBuffer);
		PControl_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PControl_conf();
	}
}
void screenView::handlePControlMax_CONF()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > 50)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 3;
		}
		else if (PControl_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 50;
		}
		Unicode::snprintf(PControlMax_val_big_ventSettingBuffer, PCONTROLMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		PControlMax_val_big_ventSetting.setWildcard1(PControlMax_val_big_ventSettingBuffer);
		PControlMax_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PControlMax_conf();
	}
}

void screenView::handleIPAP_CONF()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > IPAPMax_intval-1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 3;
		}
		else if (PControl_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = IPAPMax_intval-1;
		}
		Unicode::snprintf(IPAP_val_big_ventSettingBuffer, IPAP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAP_val_big_ventSetting.setWildcard1(IPAP_val_big_ventSettingBuffer);
		IPAP_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_IPAP_conf();
	}
}
void screenView::handleIPAPMax_CONF()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > 50)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = IPAP_intval + 1;
		}
		else if (PControl_tmp_intval < IPAP_intval + 1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 50;
		}
		Unicode::snprintf(IPAPMax_val_big_ventSettingBuffer, IPAPMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PControl_tmp_intval);
		IPAPMax_val_big_ventSetting.setWildcard1(IPAPMax_val_big_ventSettingBuffer);
		IPAPMax_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_IPAPMax_conf();
	}
}
void screenView::handleEPAP_CONF()
{
	if (key1 != tmp)
	{
		PEEP_tmp_intval = PEEP_tmp_intval + (float)(key1 - tmp);
		if (PEEP_tmp_intval > 20)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 3;
		}
		else if (PEEP_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 20;
		}
		Unicode::snprintf(EPAP_val_big_ventSettingBuffer, EPAP_VAL_BIG_VENTSETTING_SIZE, "%d", (int)PEEP_tmp_intval);
		EPAP_val_big_ventSetting.setWildcard1(EPAP_val_big_ventSettingBuffer);
		EPAP_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_EPAP_conf();
	}
}
void screenView::handleRR()
{
	if (key1 != tmp)
	{
		float tmpval;
		if(RR_tmp_intval == 0 && (RR_tmp_intval + (float)(key1 - tmp)) > 0) tmpval = patientType_intval==1? 2:5;
		else if(patientType_intval==1 && RR_tmp_intval == 2 && (RR_tmp_intval + (float)(key1 - tmp)) < 2) tmpval = 0;
		else if(patientType_intval==2 && RR_tmp_intval == 5 && (RR_tmp_intval + (float)(key1 - tmp)) < 5) tmpval = 0;
		else tmpval = RR_tmp_intval + (float)(key1 - tmp);
		
		if ((tmpval>80&&patientType_intval==1) || (tmpval>50&&patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				tmpval = RR_tmp_intval = patientType_intval==1? 80:50;
			}
		}
		else if (tmpval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = patientType_intval==1 ? 80:50;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				RR_tmp_intval = tmpval = 0;
			}
		}
		else if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			RR_tmp_intval = tmpval;
		
		if(RR_tmp_intval == 0)
		{
			Unicode::strncpy(RR_val_bigBuffer, "Off", 3);
			RR_val_big.setWildcard1(RR_val_bigBuffer);
			RR_val_big.resizeToCurrentText();
			RR_val_big.invalidate();				
		}
		else
		{
			Unicode::snprintf(RR_val_bigBuffer, RR_VAL_BIG_SIZE, "%d", (int)RR_tmp_intval);
			RR_val_big.setWildcard1(RR_val_bigBuffer);
			RR_val_big.invalidate();	
		}
		

		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_RR();
	}
}

void screenView::handleRR_CONF()
{
	if (key1 != tmp)
	{
		float tmpval;
		if(RR_tmp_intval == 0 && (RR_tmp_intval + (float)(key1 - tmp)) > 0) tmpval = patientType_intval==1? 2:5;
		else if(patientType_intval==1 && RR_tmp_intval == 2 && (RR_tmp_intval + (float)(key1 - tmp)) < 2) tmpval = 0;
		else if(patientType_intval==2 && RR_tmp_intval == 5 && (RR_tmp_intval + (float)(key1 - tmp)) < 5) tmpval = 0;
		else tmpval = RR_tmp_intval + (float)(key1 - tmp);
		
		if ((tmpval>80&&patientType_intval==1) || (tmpval>50&&patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				RR_tmp_intval = tmpval = patientType_intval==1? 80:50; 
			}
		}
		else if (tmpval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = patientType_intval==1 ? 80:50;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				RR_tmp_intval = tmpval = 0;
			}
		}
		else if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
				RR_tmp_intval = tmpval;
		
		if(RR_tmp_intval == 0)
		{
			Unicode::strncpy(RR_val_big_ventSettingBuffer, "Off", 3);
			RR_val_big_ventSetting.setWildcard1(RR_val_big_ventSettingBuffer);
			RR_val_big_ventSetting.resizeToCurrentText();
			RR_val_big_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_val_big_ventSettingBuffer, RR_VAL_BIG_VENTSETTING_SIZE, "%d", (int)RR_tmp_intval);
			RR_val_big_ventSetting.setWildcard1(RR_val_big_ventSettingBuffer);
			RR_val_big_ventSetting.invalidate();
		}
		
		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		RR_intval = RR_tmp_intval;
		click_RR_conf();
	}
}

void screenView::handleVT()
{
	if (key1 != tmp)
	{
		VT_tmp_intval = VT_tmp_intval + (key1 - tmp) * 10;
		if ((VT_tmp_intval > 2500 && patientType_intval==1) || (VT_tmp_intval > 350 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 100:50;
		}
		else if ((VT_tmp_intval < 100 && patientType_intval==1) || (VT_tmp_intval < 50 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 2500:350;
		}
		Unicode::snprintf(VT_val_bigBuffer, VT_VAL_BIG_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_big.setWildcard1(VT_val_bigBuffer);
		VT_val_big.invalidate();
		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_VT();
	}
}

void screenView::handleVT_CONF()
{
	if (key1 != tmp)
	{
		VT_tmp_intval = VT_tmp_intval + (key1 - tmp) * 10;
		if ((VT_tmp_intval > 2500 && patientType_intval==1) || (VT_tmp_intval > 350 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 100:50;
		}
		else if ((VT_tmp_intval < 100 && patientType_intval==1) || (VT_tmp_intval < 50 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 2500:350;
		}
		Unicode::snprintf(VT_val_big_ventSettingBuffer, VT_VAL_BIG_VENTSETTING_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_big_ventSetting.setWildcard1(VT_val_big_ventSettingBuffer);
		VT_val_big_ventSetting.invalidate();
		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_VT_conf();
	}
}

void screenView::handleIE()
{
	if (key1 != tmp)
	{
		SafetyVT_tmp_intval = SafetyVT_tmp_intval + (float)(key1 - tmp);
		if (SafetyVT_tmp_intval > 4)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SafetyVT_tmp_intval = 1;
		}
		else if (SafetyVT_tmp_intval < 1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SafetyVT_tmp_intval = 4;
		}
		Unicode::snprintf(IE_val_bigBuffer, IE_VAL_BIG_SIZE, "%d", (int)SafetyVT_tmp_intval);
		IE_val_big.setWildcard1(IE_val_bigBuffer);
		IE_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_IE();
	}
}

void screenView::handleSafetyVT_CONF()
{
	if (key1 != tmp)
	{
		SafetyVT_tmp_intval = SafetyVT_tmp_intval + (float)(key1 - tmp)*10;
		if (SafetyVT_tmp_intval > 1000)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SafetyVT_tmp_intval = 100;
		}
		else if (SafetyVT_tmp_intval < 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SafetyVT_tmp_intval = 1000;
		}
		Unicode::snprintf(SafetyVT_val_big_ventSettingBuffer, SAFETYVT_VAL_BIG_VENTSETTING_SIZE, "%d", (int)SafetyVT_tmp_intval);
		SafetyVT_val_big_ventSetting.setWildcard1(SafetyVT_val_big_ventSettingBuffer);
		SafetyVT_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_safetyVT_conf();
	}
}
void screenView::handleFiO2()
{
	if(!isFiO2Fake_alarm) 
	{
		pressKey = 0;
		return;
	}
	
	if (key1 != tmp)
	{
		FiO2_tmp_intval = FiO2_tmp_intval + (key1 - tmp);
		if (FiO2_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_tmp_intval = 21;
		}
		else if (FiO2_tmp_intval < 21)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_tmp_intval = 100;
		}
		Unicode::snprintf(FiO2_val_bigBuffer, FIO2_VAL_BIG_SIZE, "%d", (int)FiO2_tmp_intval);
		FiO2_val_big.setWildcard1(FiO2_val_bigBuffer);
		FiO2_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_FiO2();
	}
}

void screenView::handleFiO2_CONF()
{
	if(!isFiO2Fake_alarm) 
	{
		pressKey = 0;
		return;
	}
	
	if (key1 != tmp)
	{
		FiO2_tmp_intval = FiO2_tmp_intval + (key1 - tmp);
		if (FiO2_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_tmp_intval = 21;
		}
		else if (FiO2_tmp_intval < 21)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_tmp_intval = 100;
		}
		Unicode::snprintf(FiO2_val_big_ventSettingBuffer, FIO2_VAL_BIG_VENTSETTING_SIZE, "%d", (int)FiO2_tmp_intval);
		FiO2_val_big_ventSetting.setWildcard1(FiO2_val_big_ventSettingBuffer);
		FiO2_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_FiO2_conf();
	}
}

void screenView::handleTi()
{
	if (key1 != tmp)
	{
		float tmpval = Ti_tmp_intval + (float)(key1 - tmp) * 0.1;
		if (tmpval > 5)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0.1;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 5;
			}
		}
		else if (tmpval < 0.1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 5;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 0.1;
			}
		}
		else if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			Ti_tmp_intval = tmpval;
		
		Unicode::snprintfFloat(Ti_val_bigBuffer, TI_VAL_BIG_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val_big.setWildcard1(Ti_val_bigBuffer);
		Ti_val_big.invalidate();
		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_Ti();
	}
}

void screenView::handleTi_CONF()
{
	if (key1 != tmp)
	{
		float tmpval = Ti_tmp_intval + (float)(key1 - tmp) * 0.1;
		if (tmpval > 5)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0.1;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 5;
			}
		}
		else if (tmpval < 0.1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 5;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 0.1;
			}
		}
		else if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			Ti_tmp_intval = tmpval;
		
		Unicode::snprintfFloat(Ti_val_big_ventSettingBuffer, TI_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val_big_ventSetting.setWildcard1(Ti_val_big_ventSettingBuffer);
		Ti_val_big_ventSetting.invalidate();
		// change related things like: MV, Te, IE (in hint box)
		Unicode::snprintfFloat(MV_hint_valBuffer, MV_HINT_VAL_SIZE, "%.2f", ((float)VT_intval / 1000) * RR_tmp_intval);
		MV_hint_val.setWildcard1(MV_hint_valBuffer);
		MV_hint_val.invalidate();
		float i = 0;
		float e = 0;
		if (Ti_tmp_intval <= (60 / RR_tmp_intval) - Ti_tmp_intval)
		{
			i = 1;
			e = ((60 / RR_tmp_intval) - Ti_tmp_intval) / Ti_tmp_intval;
		}
		else
		{
			i = Ti_tmp_intval / ((60 / RR_tmp_intval) - Ti_tmp_intval);
			e = 1;
		}
		Unicode::snprintfFloat(Te_hint_valBuffer, TE_HINT_VAL_SIZE, "%.2f", ((60 / RR_tmp_intval) - Ti_tmp_intval));
		Te_hint_val.setWildcard1(Te_hint_valBuffer);
		Te_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer1, IE_HINT_VALBUFFER1_SIZE, "%.1f", i);
		IE_hint_val.setWildcard1(IE_hint_valBuffer1);
		IE_hint_val.invalidate();
		Unicode::snprintfFloat(IE_hint_valBuffer2, IE_HINT_VALBUFFER2_SIZE, "%.1f", e);
		IE_hint_val.setWildcard2(IE_hint_valBuffer2);
		IE_hint_val.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_Ti_conf();
	}
}
void screenView::handleTiMax_CONF()
{
	if (key1 != tmp)
	{
		float tmpval = Ti_max_intval + (float)(key1 - tmp) * 0.1;
		if (tmpval > 5)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0.1;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_max_intval = tmpval;
			}
			else
			{
				Ti_max_intval = tmpval = 5;
			}
		}
		else if (tmpval < 0.1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 5;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_max_intval = tmpval;
			}
			else
			{
				Ti_max_intval = tmpval = 0.1;
			}
		}
		else if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			Ti_max_intval = tmpval;
		
		Unicode::snprintfFloat(TiMax_val_big_ventSettingBuffer, TIMAX_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_max_intval);
		TiMax_val_big_ventSetting.setWildcard1(TiMax_val_big_ventSettingBuffer);
		TiMax_val_big_ventSetting.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_TiMax_ventSetting();
	}
}
void screenView::handleTiMin_CONF()
{
	if (key1 != tmp)
	{
		float tmpval = Ti_min_intval + (float)(key1 - tmp) * 0.1;
		if (tmpval > 5)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0.1;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_min_intval = tmpval;
			}
			else
			{
				Ti_min_intval = tmpval = 5;
			}
		}
		else if (tmpval < 0.1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 5;
			if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			{
				Ti_min_intval = tmpval;
			}
			else
			{
				Ti_min_intval = tmpval = 0.1;
			}
		}
		else if (((60 / RR_tmp_intval) - tmpval) / tmpval < 10 && ((60 / RR_tmp_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / RR_tmp_intval) - tmpval) < 10 && tmpval / ((60 / RR_tmp_intval) - tmpval) > 0)
			Ti_min_intval = tmpval;
		
		Unicode::snprintfFloat(TiMin_val_big_ventSettingBuffer, TIMIN_VAL_BIG_VENTSETTING_SIZE, "%.1f", Ti_min_intval);
		TiMin_val_big_ventSetting.setWildcard1(TiMin_val_big_ventSettingBuffer);
		TiMin_val_big_ventSetting.invalidate();

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_TiMin_ventSetting();
	}
}
void screenView::handleFlow()
{
	if (key1 != tmp)
	{
		TiInspPause_tmp_intval = TiInspPause_tmp_intval + (float)(key1 - tmp);
		if (TiInspPause_tmp_intval > 120)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			TiInspPause_tmp_intval = 10;
		}
		else if (TiInspPause_tmp_intval < 10)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			TiInspPause_tmp_intval = 120;
		}
		Unicode::snprintf(flow_val_bigBuffer, FLOW_VAL_BIG_SIZE, "%d", (int)TiInspPause_tmp_intval);
		flow_val_big.setWildcard1(flow_val_bigBuffer);
		flow_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_flow();
	}
}
void screenView::handleTiInspPause_CONF()
{
	if (key1 != tmp)
	{
		TiInspPause_tmp_intval = TiInspPause_tmp_intval + (float)(key1 - tmp)*0.1;
		if (TiInspPause_tmp_intval > 4)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			TiInspPause_tmp_intval = 0;
		}
		else if (TiInspPause_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			TiInspPause_tmp_intval = 4;
		}
		Unicode::snprintfFloat(TiInspPause_val_big_ventSettingBuffer, TIINSPPAUSE_VAL_BIG_VENTSETTING_SIZE, "%0.1f", TiInspPause_tmp_intval);
		TiInspPause_val_big_ventSetting.setWildcard1(TiInspPause_val_big_ventSettingBuffer);
		TiInspPause_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_TiInspPause_conf();
	}
}

void screenView::handleFlowShape_CONF()
{
	if (key1 != tmp)
	{
		flowShape_tmp_intval = flowShape_tmp_intval + (float)(key1 - tmp)*25;
		if (flowShape_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			flowShape_tmp_intval = 25;
		}
		else if (flowShape_tmp_intval < 25)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			flowShape_tmp_intval = 100;
		}
		Unicode::snprintf(FlowShape_val_big_ventSettingBuffer, FLOWSHAPE_VAL_BIG_VENTSETTING_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_big_ventSetting.setWildcard1(FlowShape_val_big_ventSettingBuffer);
		FlowShape_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_flowShape_conf();
	}
}


void screenView::handleCPAP()
{
	if (key1 != tmp)
	{
		CPAP_tmp_intval = CPAP_tmp_intval + (float)(key1 - tmp);
		if (CPAP_tmp_intval > 30)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			CPAP_tmp_intval= 0;
		}
		else if (CPAP_tmp_intval< 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			CPAP_tmp_intval= 30;
		}
		Unicode::snprintf(CPAP_val_bigBuffer, CPAP_VAL_BIG_SIZE, "%d", (int)CPAP_tmp_intval);
		CPAP_val_big.setWildcard1(CPAP_val_bigBuffer);
		CPAP_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_CPAP();
	}
}

void screenView::handleCPAP_CONF()
{
	if (key1 != tmp)
	{
		CPAP_tmp_intval = CPAP_tmp_intval + (float)(key1 - tmp);
		if (CPAP_tmp_intval > 20)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			CPAP_tmp_intval = 3;
		}
		else if (CPAP_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			CPAP_tmp_intval = 20;
		}
		Unicode::snprintf(CPAP_val_big_ventSetting_1Buffer, CPAP_VAL_BIG_VENTSETTING_1_SIZE, "%d", (int)CPAP_tmp_intval);
		CPAP_val_big_ventSetting_1.setWildcard1(CPAP_val_big_ventSetting_1Buffer);
		CPAP_val_big_ventSetting_1.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_CPAP_conf();
	}
}
void screenView::handlePsupp()
{
	if (key1 != tmp)
	{
		Psupp_tmp_intval = Psupp_tmp_intval + (float)(key1 - tmp);
		if (Psupp_tmp_intval > 35)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 0;
		}
		else if (Psupp_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 35;
		}
		Unicode::snprintf(PS_val_bigBuffer, PS_VAL_BIG_SIZE, "%d", (int)Psupp_tmp_intval);
		PS_val_big.setWildcard1(PS_val_bigBuffer);
		PS_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_Psupp();
	}
}
void screenView::handlePsupp_CONF()
{
	if (key1 != tmp)
	{
		Psupp_tmp_intval = Psupp_tmp_intval + (float)(key1 - tmp);
		if (Psupp_tmp_intval > 35)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 0;
		}
		else if (Psupp_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 35;
		}
		Unicode::snprintf(PS_val_big_ventSettingBuffer, PS_VAL_BIG_VENTSETTING_SIZE, "%d", (int)Psupp_tmp_intval);
		PS_val_big_ventSetting.setWildcard1(PS_val_big_ventSettingBuffer);
		PS_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_Psupp_conf();
	}
}

void screenView::handlePSMax_CONF()
{
	if (key1 != tmp)
	{
		Psupp_tmp_intval = Psupp_tmp_intval + (float)(key1 - tmp);
		if (Psupp_tmp_intval > 35)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 0;
		}
		else if (Psupp_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Psupp_tmp_intval = 35;
		}
		Unicode::snprintf(PSMax_val_big_ventSettingBuffer, PSMAX_VAL_BIG_VENTSETTING_SIZE, "%d", (int)Psupp_tmp_intval);
		PSMax_val_big_ventSetting.setWildcard1(PSMax_val_big_ventSettingBuffer);
		PSMax_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_PSMax_conf();
	}
}


void screenView::handleSens()
{
	if (key1 != tmp)
	{
		if(sens_tmp_intval == -1 && (sens_tmp_intval + ((float)(key1 - tmp)) * 0.1) > -1) sens_tmp_intval = 0.5;
		else if(sens_tmp_intval == 0.5 && (sens_tmp_intval + ((float)(key1 - tmp)) * 0.1) < 0.5) sens_tmp_intval = -1;
		else sens_tmp_intval = sens_tmp_intval + ((float)(key1 - tmp)) * 0.1;
		
		if (sens_tmp_intval > 15)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			sens_tmp_intval = -1;
		}
		else if (sens_tmp_intval < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			sens_tmp_intval = 15;
		}
		if(sens_tmp_intval == -1)
		{
			Unicode::strncpy(sensivity_val_bigBuffer, "Off", 3);
			sensivity_val_big.setWildcard1(sensivity_val_bigBuffer);
			sensivity_val_big.resizeToCurrentText();
			sensivity_val_big.invalidate();
		}
		else
		{
			Unicode::snprintfFloat(sensivity_val_bigBuffer, SENSIVITY_VAL_BIG_SIZE, "%.1f", sens_tmp_intval);
			sensivity_val_big.setWildcard1(sensivity_val_bigBuffer);
			sensivity_val_big.invalidate();
		}

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_sensitivity();
	}
}

void screenView::handleSens_CONF()
{
	if (key1 != tmp)
	{
		if(sens_tmp_intval == -1 && (sens_tmp_intval + ((float)(key1 - tmp)) * 0.1) > -1) sens_tmp_intval = 0.5;
		else if(sens_tmp_intval == 0.5 && (sens_tmp_intval + ((float)(key1 - tmp)) * 0.1) < 0.5) sens_tmp_intval = -1;
		else sens_tmp_intval = sens_tmp_intval + ((float)(key1 - tmp)) * 0.1;
		
		if (sens_tmp_intval > 15)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			sens_tmp_intval = -1;
		}
		else if (sens_tmp_intval < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			sens_tmp_intval = 15;
		}
		if(sens_tmp_intval == -1)
		{
			Unicode::strncpy(sensivity_val_big_ventSettingBuffer, "Off", 5);
			sensivity_val_big_ventSetting.setWildcard1(sensivity_val_big_ventSettingBuffer);
			sensivity_val_big_ventSetting.resizeToCurrentText();
			sensivity_val_big_ventSetting.invalidate();
		}
		else
		{
			Unicode::snprintfFloat(sensivity_val_big_ventSettingBuffer, SENSIVITY_VAL_BIG_VENTSETTING_SIZE, "%.1f", sens_tmp_intval);
			sensivity_val_big_ventSetting.setWildcard1(sensivity_val_big_ventSettingBuffer);
			sensivity_val_big_ventSetting.invalidate();
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_sensitivity_conf();
	}
}
void screenView::handleRisetime()
{
	if (key1 != tmp)
	{
		riseTime_tmp_intval = riseTime_tmp_intval + (float)(key1 - tmp) * 50;
		if (riseTime_tmp_intval > 900)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 200;
		}
		else if (riseTime_tmp_intval < 200)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 900;
		}
		Unicode::snprintf(riseTime_val_bigBuffer, RISETIME_VAL_BIG_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_big.setWildcard1(riseTime_val_bigBuffer);
		riseTime_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_riseTime();
	}
}
void screenView::handleRisetime_CONF()
{
	if (key1 != tmp)
	{
		riseTime_tmp_intval = riseTime_tmp_intval + (float)(key1 - tmp) * 50;
		if (riseTime_tmp_intval > 900)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 200;
		}
		else if (riseTime_tmp_intval < 200)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 900;
		}
		Unicode::snprintf(riseTime_val_big_ventSettingBuffer, RISETIME_VAL_BIG_VENTSETTING_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_big_ventSetting.setWildcard1(riseTime_val_big_ventSettingBuffer);
		riseTime_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_riseTime_conf();
	}
}

void screenView::handleTrigger()
{
	if (key1 == 0)
	{
//		if (!trigger_val_flow_big.isVisible())
//		{
//			trigger_val_flow.setVisible(false);
//			trigger_val_flow.invalidate();
//			trigger_val_flow_big.setVisible(true);
//			trigger_val_flow_big.invalidate();
//		}
//		if (trigger_val_pressure_big.isVisible())
//		{
//			trigger_val_pressure_big.setVisible(false);
//			trigger_val_pressure_big.invalidate();
//		}
//		if (pressKey == 1)
//		{
//			click_trigger();
//		}
	}
	else if (key1 == 1)
	{
		if (trigger_val_flow_big.isVisible())
		{
			trigger_val_flow_big.setVisible(false);
			trigger_val_flow_big.invalidate();
		}
		if (!trigger_val_pressure_big.isVisible())
		{
			trigger_val_pressure.setVisible(false);
			trigger_val_pressure.invalidate();
			trigger_val_pressure_big.setVisible(true);
			trigger_val_pressure_big.invalidate();
		}
		if (pressKey == 1)
		{
			click_trigger();
		}
	}
	// key1 values change for always being in "Pressure"
	else if (key1 > 1)
	{
		key1 = 1;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
	else if (key1 < 1)
	{
		key1 = 1;
		encoderCounter = 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 4 + 1);
	}
}
void screenView::handleTrigger_CONF()
{
	if (key1 == 0)
	{
		
//		if (!trigger_val_flow_big_ventSetting.isVisible())
//		{
//			trigger_val_flow_ventSetting.setVisible(false);
//			trigger_val_flow_ventSetting.invalidate();
//			trigger_val_flow_big_ventSetting.setVisible(true);
//			trigger_val_flow_big_ventSetting.invalidate();
//		}
//		if (trigger_val_pressure_big_ventSetting.isVisible())
//		{
//			trigger_val_pressure_big_ventSetting.setVisible(false);
//			trigger_val_pressure_big_ventSetting.invalidate();
//		}
//		if (pressKey == 1)
//		{
//			click_trigger_conf();
//		}
	}
	else if (key1 == 1)
	{
		if (trigger_val_flow_big_ventSetting.isVisible())
		{
			trigger_val_flow_big_ventSetting.setVisible(false);
			trigger_val_flow_big_ventSetting.invalidate();
		}
		if (!trigger_val_pressure_big_ventSetting.isVisible())
		{
			trigger_val_pressure_ventSetting.setVisible(false);
			trigger_val_pressure_ventSetting.invalidate();
			trigger_val_pressure_big_ventSetting.setVisible(true);
			trigger_val_pressure_big_ventSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_trigger_conf();
		}
	}
	// key1 values change for always being in "Pressure"
	else if (key1 > 1)
	{
		key1 = 1;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
	else if (key1 < 1)
	{
		key1 = 1;
		encoderCounter = 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 4 + 1);
	}
}
void screenView::handleCycling()
{
	if (key1 != tmp)
	{
		cyclingOff_tmp_intval = cyclingOff_tmp_intval + (float)(key1 - tmp);
		if (cyclingOff_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			cyclingOff_tmp_intval = 0;
		}
		else if (cyclingOff_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			cyclingOff_tmp_intval = 100;
		}
		Unicode::snprintf(cyclingOff_val_bigBuffer, CYCLINGOFF_VAL_BIG_SIZE, "%d", (int)cyclingOff_tmp_intval);
		cyclingOff_val_big.setWildcard1(cyclingOff_val_bigBuffer);
		cyclingOff_val_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_cycling();
	}
}
void screenView::handleCycling_CONF()
{
	if (key1 != tmp)
	{
		cyclingOff_tmp_intval = cyclingOff_tmp_intval + (float)(key1 - tmp);
		if (cyclingOff_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			cyclingOff_tmp_intval = 0;
		}
		else if (cyclingOff_tmp_intval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			cyclingOff_tmp_intval = 100;
		}
		Unicode::snprintf(cyclingOff_val_big_ventSettingBuffer, CYCLINGOFF_VAL_BIG_VENTSETTING_SIZE, "%d", (int)cyclingOff_tmp_intval);
		cyclingOff_val_big_ventSetting.setWildcard1(cyclingOff_val_big_ventSettingBuffer);
		cyclingOff_val_big_ventSetting.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_cycling_conf();
	}
}
void screenView::handleChooseMode()
{
	if(circuitType_intval==1)
	{
		if(key1 == 8) //for CPR
			key1 = 9;
		
		if (key1 == 0)
		{
			if (!CMVVCV_big_txt.isVisible())
			{
				CMVVCV_txt.setVisible(false);
				CMVVCV_txt.invalidate();
				CMVVCV_big_txt.setVisible(true);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (HFNC_big_txt.isVisible())
			{
				HFNC_big_txt.setVisible(false);
				HFNC_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 1)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (!CMVPCV_big_txt.isVisible())
			{
				CMVPCV_txt.setVisible(false);
				CMVPCV_txt.invalidate();
				CMVPCV_big_txt.setVisible(true);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 2)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (!ACVCV_big_txt.isVisible())
			{
				ACVCV_txt.setVisible(false);
				ACVCV_txt.invalidate();
				ACVCV_big_txt.setVisible(true);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 3)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (!ACPCV_big_txt.isVisible())
			{
				ACPCV_txt.setVisible(false);
				ACPCV_txt.invalidate();
				ACPCV_big_txt.setVisible(true);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 4)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (!SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_txt.setVisible(false);
				SIMVVCV_txt.invalidate();
				SIMVVCV_big_txt.setVisible(true);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}

		else if (key1 == 5)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (!SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_txt.setVisible(false);
				SIMVPCV_txt.invalidate();
				SIMVPCV_big_txt.setVisible(true);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 6)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (!PSV_big_txt.isVisible())
			{
				PSV_txt.setVisible(false);
				PSV_txt.invalidate();
				PSV_big_txt.setVisible(true);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 7)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (!CPAP_big_txt.isVisible())
			{
				CPAP_txt.setVisible(false);
				CPAP_txt.invalidate();
				CPAP_big_txt.setVisible(true);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		
		else if (key1 == 9) //CPR
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (!CPR_big_txt.isVisible())
			{
				CPR_txt.setVisible(false);
				CPR_txt.invalidate();
				CPR_big_txt.setVisible(true);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 > 9)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 9;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if(circuitType_intval==2)
	{
		if (key1 == 6)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (!PSV_big_txt.isVisible())
			{
				PSV_txt.setVisible(false);
				PSV_txt.invalidate();
				PSV_big_txt.setVisible(true);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 7)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (!CPAP_big_txt.isVisible())
			{
				CPAP_txt.setVisible(false);
				CPAP_txt.invalidate();
				CPAP_big_txt.setVisible(true);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 8)
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (!BiPAP_big_txt.isVisible())
			{
				BiPAP_txt.setVisible(false);
				BiPAP_txt.invalidate();
				BiPAP_big_txt.setVisible(true);
				BiPAP_big_txt.invalidate();
			}
			if (HFNC_big_txt.isVisible())
			{
				HFNC_big_txt.setVisible(false);
				HFNC_big_txt.invalidate();
			}
			if (CPR_big_txt.isVisible())
			{
				CPR_big_txt.setVisible(false);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 == 9) //CPR
		{
			if (CMVVCV_big_txt.isVisible())
			{
				CMVVCV_big_txt.setVisible(false);
				CMVVCV_big_txt.invalidate();
			}
			if (CMVPCV_big_txt.isVisible())
			{
				CMVPCV_big_txt.setVisible(false);
				CMVPCV_big_txt.invalidate();
			}
			if (ACVCV_big_txt.isVisible())
			{
				ACVCV_big_txt.setVisible(false);
				ACVCV_big_txt.invalidate();
			}
			if (ACPCV_big_txt.isVisible())
			{
				ACPCV_big_txt.setVisible(false);
				ACPCV_big_txt.invalidate();
			}
			if (SIMVVCV_big_txt.isVisible())
			{
				SIMVVCV_big_txt.setVisible(false);
				SIMVVCV_big_txt.invalidate();
			}
			if (SIMVPCV_big_txt.isVisible())
			{
				SIMVPCV_big_txt.setVisible(false);
				SIMVPCV_big_txt.invalidate();
			}
			if (PSV_big_txt.isVisible())
			{
				PSV_big_txt.setVisible(false);
				PSV_big_txt.invalidate();
			}
			if (CPAP_big_txt.isVisible())
			{
				CPAP_big_txt.setVisible(false);
				CPAP_big_txt.invalidate();
			}
			if (BiPAP_big_txt.isVisible())
			{
				BiPAP_big_txt.setVisible(false);
				BiPAP_big_txt.invalidate();
			}
			if (HFNC_big_txt.isVisible())
			{
				HFNC_big_txt.setVisible(false);
				HFNC_big_txt.invalidate();
			}
			if (!CPR_big_txt.isVisible())
			{
				CPR_txt.setVisible(false);
				CPR_txt.invalidate();
				CPR_big_txt.setVisible(true);
				CPR_big_txt.invalidate();
			}
			if (pressKey == 1)
			{
				click_mode();
			}
		}
		else if (key1 > 9)
		{
			key1 = 6;
			encoderCounter = key1*4 +1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
		else if (key1 < 6)
		{
			key1 = 9;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (key1 == 1020)
	{
		if (CMVVCV_big_txt.isVisible())
		{
			CMVVCV_big_txt.setVisible(false);
			CMVVCV_big_txt.invalidate();
		}
		if (CMVPCV_big_txt.isVisible())
		{
			CMVPCV_big_txt.setVisible(false);
			CMVPCV_big_txt.invalidate();
		}
		if (ACVCV_big_txt.isVisible())
		{
			ACVCV_big_txt.setVisible(false);
			ACVCV_big_txt.invalidate();
		}
		if (ACPCV_big_txt.isVisible())
		{
			ACPCV_big_txt.setVisible(false);
			ACPCV_big_txt.invalidate();
		}
		if (SIMVVCV_big_txt.isVisible())
		{
			SIMVVCV_big_txt.setVisible(false);
			SIMVVCV_big_txt.invalidate();
		}
		if (SIMVPCV_big_txt.isVisible())
		{
			SIMVPCV_big_txt.setVisible(false);
			SIMVPCV_big_txt.invalidate();
		}
		if (PSV_big_txt.isVisible())
		{
			PSV_big_txt.setVisible(false);
			PSV_big_txt.invalidate();
		}
		if (CPAP_big_txt.isVisible())
		{
			CPAP_big_txt.setVisible(false);
			CPAP_big_txt.invalidate();
		}
		if (BiPAP_big_txt.isVisible())
		{
			BiPAP_big_txt.setVisible(false);
			BiPAP_big_txt.invalidate();
		}
		if (!HFNC_big_txt.isVisible())
		{
			HFNC_txt.setVisible(false);
			HFNC_txt.invalidate();
			HFNC_big_txt.setVisible(true);
			HFNC_big_txt.invalidate();
		}
		if (pressKey == 1)
		{
			click_mode();
		}
	}
	
	
}

void screenView::handleAge()
{
	if (key1 == 0)
	{
		if (selector_ageAdultSetting.isVisible())
		{
			selector_ageAdultSetting.setVisible(false);
			selector_ageAdultSetting.invalidate();
		}
		if (selector_ageChildSetting.isVisible())
		{
			selector_ageChildSetting.setVisible(false);
			selector_ageChildSetting.invalidate();
		}
		if (pressKey == 1)
		{
			if (adult_image.isVisible())
				click_adult();
			else if (child_image.isVisible())
				click_pediatric();
		}
	}
	if (key1 == 1)
	{
		if (!selector_ageAdultSetting.isVisible())
		{
			selector_ageAdultSetting.setVisible(true);
			selector_ageAdultSetting.invalidate();
		}
		if (selector_ageChildSetting.isVisible())
		{
			selector_ageChildSetting.setVisible(false);
			selector_ageChildSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_adult();
		}
	}
	else if (key1 == 2)
	{
		if (selector_ageAdultSetting.isVisible())
		{
			selector_ageAdultSetting.setVisible(false);
			selector_ageAdultSetting.invalidate();
		}
		if (!selector_ageChildSetting.isVisible())
		{
			selector_ageChildSetting.setVisible(true);
			selector_ageChildSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_pediatric();
		}
	}
	else if (key1 > 2)
	{
		key1 = 1;
		encoderCounter = 4;
		__HAL_TIM_SET_COUNTER(&htim3, 4);
	}
	else if (key1 < 0)
	{
		key1 = 2;
		encoderCounter = 8;
		__HAL_TIM_SET_COUNTER(&htim3, 8);
	}
}

void screenView::handleWeight()
{
	if (key1 != tmp)
	{
		weight_tmp_intval = weight_tmp_intval + (float)(key1 - tmp)*2;
		if ((weight_tmp_intval > 100 && patientType_intval==1) || (weight_tmp_intval > 10 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			weight_tmp_intval = patientType_intval==1? 12:2;
		}
		else if ((weight_tmp_intval < 12 && patientType_intval==1) || (weight_tmp_intval < 2 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			weight_tmp_intval = patientType_intval==1? 100:10;
		}
		Unicode::snprintf(weight_bigValBuffer, WEIGHT_BIGVAL_SIZE, "%d", (int)weight_tmp_intval);
		weight_bigVal.setWildcard1(weight_bigValBuffer);
		weight_bigVal.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		click_heightButton();
	}
}
void screenView::handleDeviceSetting()
{
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
			selectorAudioSlider.setVisible(false);
			selectorAudioSlider.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
			selectorBrightnessSlider.setVisible(false);
			selectorBrightnessSlider.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
			digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			digitalClock_setting.invalidate();
			selector_hours.setVisible(false);
			selector_hours.invalidate();
			selector_minutes.setVisible(false);
			selector_minutes.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
			day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			day_setting.invalidate();
			month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			month_setting.invalidate();
			year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			year_setting.invalidate();
			selector_day.setVisible(false);
			selector_day.invalidate();
			selector_month.setVisible(false);
			selector_month.invalidate();
			selector_year.setVisible(false);
			selector_year.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
			selector_languageEnglish.setVisible(false);
			selector_languageEnglish.invalidate();
			selector_languageArabic.setVisible(false);
			selector_languageArabic.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(true);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_backDeviceS();
		}
	}
	else if (key1 == 2)
	{
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (!selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(true);
			selector_audioSetting.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_audio();
		}
	}
	else if (key1 == 3)
	{
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (!selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(true);
			selector_brightnessSetting.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_brightness();
		}
	}

	else if (key1 == 4)
	{
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (!selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(true);
			selector_timeSetting.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_time();
		}
	}
	else if (key1 == 5)
	{
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (selector_timeSetting.isVisible())
		{
			selector_timeSetting.setVisible(false);
			selector_timeSetting.invalidate();
		}
		if (!selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(true);
			selector_dateSetting.invalidate();
		}
		if (selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(false);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_date();
		}
	}
	else if (key1 == 6)
	{
		if (selector_backDeviceSetting.isVisible())
		{
			selector_backDeviceSetting.setVisible(false);
			selector_backDeviceSetting.invalidate();
		}
		if (selector_audioSetting.isVisible())
		{
			selector_audioSetting.setVisible(false);
			selector_audioSetting.invalidate();
		}
		if (selector_brightnessSetting.isVisible())
		{
			selector_brightnessSetting.setVisible(false);
			selector_brightnessSetting.invalidate();
		}
		if (selector_dateSetting.isVisible())
		{
			selector_dateSetting.setVisible(false);
			selector_dateSetting.invalidate();
			day_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			day_setting.invalidate();
			month_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			month_setting.invalidate();
			year_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
			year_setting.invalidate();
			selector_day.setVisible(false);
			selector_day.invalidate();
			selector_month.setVisible(false);
			selector_month.invalidate();
			selector_year.setVisible(false);
			selector_year.invalidate();
		}
		if (!selector_languageSetting.isVisible())
		{
			selector_languageSetting.setVisible(true);
			selector_languageSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_language();
		}
	}
	else if (key1 > 6)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 6;
		encoderCounter = 25;
		__HAL_TIM_SET_COUNTER(&htim3, 25);
	}
}

void screenView::handleDeviceInfo()
{
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_backDeviceInfo.isVisible())
		{
			selector_backDeviceInfo.setVisible(false);
			selector_backDeviceInfo.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_backDeviceInfo.isVisible())
		{
			selector_backDeviceInfo.setVisible(true);
			selector_backDeviceInfo.invalidate();
		}
		if (pressKey == 1)
		{
			click_backDeviceInfo();
		}
	}
	if (key1 > 1)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 1;
		encoderCounter = 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, 5);
	}
}

void screenView::handleBackup()
{
	if(backupMode_intval==0)
	{
		if (key1 == 0)
		{
			pressKey = 0;
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			// disable big values
			if(apneaTime_backupModeBigVal.isVisible())
			{
				apneaTime_backupModeBigVal.setVisible(false);
				apneaTime_backupModeBigVal.invalidate();
				apneaTime_backupModeVal.setVisible(true);
				apneaTime_backupModeVal.invalidate();
			}
			else if(PC_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible())
			{
				PC_backupMode_bigVal.setVisible(false);
				PC_backupMode_bigVal.invalidate();
				VC_backupMode_bigVal.setVisible(false);
				VC_backupMode_bigVal.invalidate();
				if(backupMode_intval==1)
				{
					VC_backupMode_val.setVisible(true);
					VC_backupMode_val.invalidate();
				}
				else 
				{
					PC_backupMode_val.setVisible(true);
					PC_backupMode_val.invalidate();
				}
			}
		}
		else if (key1 == 1)
		{
			if (!selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(true);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			// other
			if (pressKey == 1)
			{
				click_backBackupScreen();
			}
		}
		else if (key1 == 2)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(!selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(true);
				selector_backupMode.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_backupModes();
			}
		}
		else if (key1 == 3)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(!selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(true);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_backupApnea();
			}
		}
		else if (key1 == 4)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(!selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(true);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_apneaDetection();
			}
		}
		if (key1 > 4)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 4;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}

	}
	else if(backupMode_intval==1 || backupMode_intval==2)
	{
		if (key1 == 0)
		{
			pressKey = 0;
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(false);
				selector_backupConfig.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			// disable big values
			if(apneaTime_backupModeBigVal.isVisible())
			{
				apneaTime_backupModeBigVal.setVisible(false);
				apneaTime_backupModeBigVal.invalidate();
				apneaTime_backupModeVal.setVisible(true);
				apneaTime_backupModeVal.invalidate();
			}
			else if(PC_backupMode_bigVal.isVisible() || VC_backupMode_bigVal.isVisible())
			{
				PC_backupMode_bigVal.setVisible(false);
				PC_backupMode_bigVal.invalidate();
				VC_backupMode_bigVal.setVisible(false);
				VC_backupMode_bigVal.invalidate();
				if(backupMode_intval==1)
				{
					VC_backupMode_val.setVisible(true);
					VC_backupMode_val.invalidate();
				}
				else 
				{
					PC_backupMode_val.setVisible(true);
					PC_backupMode_val.invalidate();
				}
			}
		}
		else if (key1 == 1)
		{
			if (!selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(true);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(false);
				selector_backupConfig.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			// other
			if (pressKey == 1)
			{
				click_backBackupScreen();
			}
		}
		else if (key1 == 2)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(!selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(true);
				selector_backupMode.invalidate();
			}
			if(selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(false);
				selector_backupConfig.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_backupModes();
			}
		}
		else if (key1 == 3)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(!selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(true);
				selector_backupConfig.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_backupConfigs();
			}
		}
		
		else if (key1 == 4)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(false);
				selector_backupConfig.invalidate();
			}
			if(!selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(true);
				selector_backupApnea.invalidate();
			}
			if(selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(false);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_backupApnea();
			}
		}
		else if (key1 == 5)
		{
			if(selector_backBackupScreen.isVisible())
			{
				selector_backBackupScreen.setVisible(false);
				selector_backBackupScreen.invalidate();
			}
			if(selector_backupMode.isVisible())
			{
				selector_backupMode.setVisible(false);
				selector_backupMode.invalidate();
			}
			if(selector_backupConfig.isVisible())
			{
				selector_backupConfig.setVisible(false);
				selector_backupConfig.invalidate();
			}
			if(selector_backupApnea.isVisible())
			{
				selector_backupApnea.setVisible(false);
				selector_backupApnea.invalidate();
			}
			if(!selector_apneaDetection.isVisible())
			{
				selector_apneaDetection.setVisible(true);
				selector_apneaDetection.invalidate();
			}
			if(pressKey==1)
			{
				click_apneaDetection();
			}
		}
		if (key1 > 5)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 5;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
}


void screenView::handleBackupChooseModes()
{
	if(key1==0)
	{
		if(!AlarmOnly_backupMode_bigVal.isVisible())
		{
			AlarmOnly_backupMode_bigVal.setVisible(true);
			AlarmOnly_backupMode_bigVal.invalidate();
			AlarmOnly_backupMode_val.setVisible(false);
			AlarmOnly_backupMode_val.invalidate();
		}
		else if(VC_backupMode_bigVal.isVisible())
		{
			VC_backupMode_bigVal.setVisible(false);
			VC_backupMode_bigVal.invalidate();
		}
		if(PC_backupMode_bigVal.isVisible())
		{
			PC_backupMode_bigVal.setVisible(false);
			PC_backupMode_bigVal.invalidate();
		}
		backupMode_intval = 0;
		if(pressKey==1)
		{
			pressKey=0;
			click_backupModes();
			
			state = BACKUP;
		}
	}
	else if(key1==1)
	{
		if(AlarmOnly_backupMode_bigVal.isVisible())
		{
			AlarmOnly_backupMode_bigVal.setVisible(false);
			AlarmOnly_backupMode_bigVal.invalidate();
		}
		else if(!VC_backupMode_bigVal.isVisible())
		{
			VC_backupMode_bigVal.setVisible(true);
			VC_backupMode_bigVal.invalidate();
			VC_backupMode_val.setVisible(false);
			VC_backupMode_val.invalidate();
		}
		if(PC_backupMode_bigVal.isVisible())
		{
			PC_backupMode_bigVal.setVisible(false);
			PC_backupMode_bigVal.invalidate();
		}
		backupMode_intval = 1;
		if(pressKey==1)
		{
			pressKey=0;
			click_backupModes();
			
			state = BACKUP;
		}
	}
	else if(key1==2)
	{
		if(AlarmOnly_backupMode_bigVal.isVisible())
		{
			AlarmOnly_backupMode_bigVal.setVisible(false);
			AlarmOnly_backupMode_bigVal.invalidate();
		}
		else if(VC_backupMode_bigVal.isVisible())
		{
			VC_backupMode_bigVal.setVisible(false);
			VC_backupMode_bigVal.invalidate();
		}
		if(!PC_backupMode_bigVal.isVisible())
		{
			PC_backupMode_bigVal.setVisible(true);
			PC_backupMode_bigVal.invalidate();
			PC_backupMode_val.setVisible(false);
			PC_backupMode_val.invalidate();
		}
		backupMode_intval = 2;
		if(pressKey==1)
		{
			pressKey=0;
			click_backupModes();
			
			state = BACKUP;
		}
	}
	
	else if(key1 > 2)
	{
		key1=0;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
	else if(key1 < 0)
	{
		key1=2;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}

void screenView::handleRRBackup()
{
	if (key1 != tmp)
	{
		float tmpval;
		if(RR_tmp_intval == 0 && (RR_tmp_intval + (float)(key1 - tmp)) > 0) tmpval = patientType_intval==1? 2:5;
		else if(patientType_intval==1 && RR_tmp_intval == 2 && (RR_tmp_intval + (float)(key1 - tmp)) < 2) tmpval = 0;
		else if(patientType_intval==2 && RR_tmp_intval == 5 && (RR_tmp_intval + (float)(key1 - tmp)) < 5) tmpval = 0;
		else tmpval = RR_tmp_intval + (float)(key1 - tmp);
		
		if ((tmpval>80&&patientType_intval==1) || (tmpval>50&&patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				RR_tmp_intval = tmpval = patientType_intval==1? 80:50; 
			}
		}
		else if (tmpval < 0)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = patientType_intval==1 ? 80:50;
			if (((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval < 10 && ((60 / tmpval) - Ti_tmp_intval) / Ti_tmp_intval > 0 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) < 10 && Ti_tmp_intval / ((60 / tmpval) - Ti_tmp_intval) > 0)
			{
				RR_tmp_intval = tmpval;
			}
			else
			{
				RR_tmp_intval = tmpval = 0;
			}
		}
		else if (((60 / tmpval) - backup_Ti_intval) / backup_Ti_intval < 10 && ((60 / tmpval) - backup_Ti_intval) / backup_Ti_intval > 0 && backup_Ti_intval / ((60 / tmpval) - backup_Ti_intval) < 10 && backup_Ti_intval / ((60 / tmpval) - backup_Ti_intval) > 0)
			RR_tmp_intval = tmpval;
		
		if(RR_tmp_intval == 0)
		{
			Unicode::strncpy(RR_val_big_backupScreenBuffer, "Off", 3);
			RR_val_big_backupScreen.setWildcard1(RR_val_big_backupScreenBuffer);
			RR_val_big_backupScreen.resizeToCurrentText();
			RR_val_big_backupScreen.invalidate();
		}
		else
		{
			Unicode::snprintf(RR_val_big_backupScreenBuffer, RR_VAL_BIG_VENTSETTING_SIZE, "%d", (int)RR_tmp_intval);
			RR_val_big_backupScreen.setWildcard1(RR_val_big_backupScreenBuffer);
			RR_val_big_backupScreen.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		click_RRBackupScreen();
	}
}
void screenView::handleVTBackup()
{
	if (key1 != tmp)
	{
		VT_tmp_intval = VT_tmp_intval + (key1 - tmp) * 10;
		if ((VT_tmp_intval > 2500 && patientType_intval==1) || (VT_tmp_intval > 350 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 100:50;
		}
		else if ((VT_tmp_intval < 100 && patientType_intval==1) || (VT_tmp_intval < 50 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			VT_tmp_intval = patientType_intval==1? 2500:350;
		}
		Unicode::snprintf(VT_val_big_backupScreenBuffer, VT_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)VT_tmp_intval);
		VT_val_big_backupScreen.setWildcard1(VT_val_big_backupScreenBuffer);
		VT_val_big_backupScreen.invalidate();
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_VTBackupScreen();
	}

}
void screenView::handleTiBackup()
{
	if (key1 != tmp)
	{
		float tmpval = Ti_tmp_intval + (float)(key1 - tmp) * 0.1;
		if (tmpval > 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 0.3;
			if (((60 / backup_RR_intval) - tmpval) / tmpval < 10 && ((60 / backup_RR_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / backup_RR_intval) - tmpval) < 10 && tmpval / ((60 / backup_RR_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 3;
			}
		}
		else if (tmpval < 0.3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			tmpval = 3;
			if (((60 / backup_RR_intval) - tmpval) / tmpval < 10 && ((60 / backup_RR_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / backup_RR_intval) - tmpval) < 10 && tmpval / ((60 / backup_RR_intval) - tmpval) > 0)
			{
				Ti_tmp_intval = tmpval;
			}
			else
			{
				Ti_tmp_intval = tmpval = 0.3;
			}
		}
		else if (((60 / backup_RR_intval) - tmpval) / tmpval < 10 && ((60 / backup_RR_intval) - tmpval) / tmpval > 0 && tmpval / ((60 / backup_RR_intval) - tmpval) < 10 && tmpval / ((60 / backup_RR_intval) - tmpval) > 0)
			Ti_tmp_intval = tmpval;
		
		Unicode::snprintfFloat(Ti_val_big_backupScreenBuffer, TI_VAL_BIG_BACKUPSCREEN_SIZE, "%.1f", Ti_tmp_intval);
		Ti_val_big_backupScreen.setWildcard1(Ti_val_big_backupScreenBuffer);
		Ti_val_big_backupScreen.invalidate();
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_TiBackupScreen();
	}

}
void screenView::handlePEEPBackup()
{
	if (key1 != tmp)
	{
		PEEP_tmp_intval = PEEP_tmp_intval + (float)(key1 - tmp);
		if (PEEP_tmp_intval > 20)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 3;
		}
		else if (PEEP_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PEEP_tmp_intval = 20;
		}
		Unicode::snprintf(PEEP_val_big_backupScreenBuffer, PEEP_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)PEEP_tmp_intval);
		PEEP_val_big_backupScreen.setWildcard1(PEEP_val_big_backupScreenBuffer);
		PEEP_val_big_backupScreen.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PEEPBackupScreen();
	}
}
void screenView::handlePControlBackup()
{
	if (key1 != tmp)
	{
		PControl_tmp_intval = PControl_tmp_intval + (float)(key1 - tmp);
		if (PControl_tmp_intval > 50)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 3;
		}
		else if (PControl_tmp_intval < 3)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			PControl_tmp_intval = 50;
		}
		Unicode::snprintf(PControl_val_big_backupScreenBuffer, PCONTROL_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)PControl_tmp_intval);
		PControl_val_big_backupScreen.setWildcard1(PControl_val_big_backupScreenBuffer);
		PControl_val_big_backupScreen.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_PControlBackupScreen();
	}
}
void screenView::handleFlowShapeBackup()
{
	if (key1 != tmp)
	{
		flowShape_tmp_intval = flowShape_tmp_intval + (float)(key1 - tmp)*25;
		if (flowShape_tmp_intval > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			flowShape_tmp_intval = 25;
		}
		else if (flowShape_tmp_intval < 25)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			flowShape_tmp_intval = 100;
		}
		Unicode::snprintf(FlowShape_val_big_backupScreenBuffer, FLOWSHAPE_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)flowShape_tmp_intval);
		FlowShape_val_big_backupScreen.setWildcard1(FlowShape_val_big_backupScreenBuffer);
		FlowShape_val_big_backupScreen.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_flowShapeBackupScreen();
	}
}
void screenView::handleRiseTimeBackup()
{
	if (key1 != tmp)
	{
		riseTime_tmp_intval = riseTime_tmp_intval + (float)(key1 - tmp) * 50;
		if (riseTime_tmp_intval > 900)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 200;
		}
		else if (riseTime_tmp_intval < 200)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			riseTime_tmp_intval = 900;
		}
		Unicode::snprintf(riseTime_val_big_backupScreenBuffer, RISETIME_VAL_BIG_BACKUPSCREEN_SIZE, "%d", (int)riseTime_tmp_intval);
		riseTime_val_big_backupScreen.setWildcard1(riseTime_val_big_backupScreenBuffer);
		riseTime_val_big_backupScreen.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		click_riseTimeBackupScreen();
	}
}
void screenView::handleApneaDetection()
{
	if(key1==0)
	{
		if(!noBreath_backupMode_bigVal.isVisible())
		{
			noBreath_backupMode_bigVal.setVisible(true);
			noBreath_backupMode_bigVal.invalidate();
			noBreath_backupMode_val.setVisible(false);
			noBreath_backupMode_val.invalidate();
		}
		if(noSpontBreath_backupMode_bigVal.isVisible())
		{
			noSpontBreath_backupMode_bigVal.setVisible(false);
			noSpontBreath_backupMode_bigVal.invalidate();
		}
		
		apneaDetection_intval = 1;
		if(pressKey==1)
		{
			pressKey=0;
			click_apneaDetection();
			
			state = BACKUP;
		}
	}
	else if(key1==1)
	{
		if(noBreath_backupMode_bigVal.isVisible())
		{
			noBreath_backupMode_bigVal.setVisible(false);
			noBreath_backupMode_bigVal.invalidate();
		}
		if(!noSpontBreath_backupMode_bigVal.isVisible())
		{
			noSpontBreath_backupMode_bigVal.setVisible(true);
			noSpontBreath_backupMode_bigVal.invalidate();
			noSpontBreath_backupMode_val.setVisible(false);
			noSpontBreath_backupMode_val.invalidate();
		}
		
		apneaDetection_intval = 2;
		if(pressKey==1)
		{
			pressKey=0;
			click_apneaDetection();
			
			state = BACKUP;
		}
	}
	else if(key1 > 1)
	{
		key1=0;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
	else if(key1 < 0)
	{
		key1=1;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}
void screenView::handleBackupApneaTime()
{
	if (key1 != tmp)
	{
		apnea_backupIntval = apnea_backupIntval + (float)(key1 - tmp);
		if ((apnea_backupIntval > 60 && patientType_intval==1) || (apnea_backupIntval > 30 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			apnea_backupIntval = patientType_intval==1 ? 15:5;
		}
		else if ((apnea_backupIntval < 15 && patientType_intval==1) || (apnea_backupIntval < 5 && patientType_intval==2))
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			apnea_backupIntval = patientType_intval==1 ? 60:30;
		}
		Unicode::snprintf(apneaTime_backupModeValBuffer, APNEATIME_BACKUPMODEVAL_SIZE, "%d", (int)apnea_backupIntval);
		apneaTime_backupModeVal.setWildcard1(apneaTime_backupModeValBuffer);
		apneaTime_backupModeVal.invalidate();
		Unicode::snprintf(apneaTime_backupModeBigValBuffer, APNEATIME_BACKUPMODEBIGVAL_SIZE, "%d", (int)apnea_backupIntval);
		apneaTime_backupModeBigVal.setWildcard1(apneaTime_backupModeBigValBuffer);
		apneaTime_backupModeBigVal.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_backupApnea();
	}
}
void screenView::handleBackupConfigScreen()
{
	if (backupMode_intval == 1) // ac_vcv
	{
		if (!VT_container_backupScreen.isVisible() || VT_container_backupScreen.getX() != settingPosx1 || VT_container_backupScreen.getY() != settingPosy1-1)
		{
			VT_container_backupScreen.setVisible(false);
			VT_container_backupScreen.setXY(settingPosx1, settingPosy1-1);
			VT_container_backupScreen.invalidate();
			selector_VT_backupScreen.setXY(settingPosx1+6, settingPosy1+4);
			selector_VT_backupScreen.invalidate();
			VT_container_backupScreen.setVisible(true);
			VT_container_backupScreen.invalidate();
			
			container_backupConfig.setVisible(false);
			container_backupConfig.invalidate();
			container_backupConfig.setVisible(true);
			container_backupConfig.invalidate();
		}
		if (!RR_container_backupScreen.isVisible() || RR_container_backupScreen.getX() != settingPosx2 || RR_container_backupScreen.getY() != settingPosy1-1)
		{
			RR_container_backupScreen.setVisible(false);
			RR_container_backupScreen.setXY(settingPosx2, settingPosy1-1);
			RR_container_backupScreen.invalidate();
			selector_RR_backupScreen.setXY(settingPosx2+6, settingPosy1+4);
			selector_RR_backupScreen.invalidate();
			RR_container_backupScreen.setVisible(true);
			RR_container_backupScreen.invalidate();
		}
		if (!PEEP_container_backupScreen.isVisible() || PEEP_container_backupScreen.getX() != settingPosx3 || PEEP_container_backupScreen.getY() != settingPosy1)
		{
			PEEP_container_backupScreen.setVisible(false);
			PEEP_container_backupScreen.setXY(settingPosx3, settingPosy1);
			PEEP_container_backupScreen.invalidate();
			selector_PEEP__backupScreen.setXY(settingPosx3+6, settingPosy1+4);
			selector_PEEP__backupScreen.invalidate();
			PEEP_container_backupScreen.setVisible(true);
			PEEP_container_backupScreen.invalidate();
			
			container_backupConfig.setVisible(false);
			container_backupConfig.invalidate();
			container_backupConfig.setVisible(true);
			container_backupConfig.invalidate();
		}
		if (PControl_container_backupScreen.isVisible())
		{
			PControl_container_backupScreen.setVisible(false);
			PControl_container_backupScreen.invalidate();
		}
		if (!Ti_container_backupScreen.isVisible() || Ti_container_backupScreen.getX() != settingPosx1 || Ti_container_backupScreen.getY() != settingPosy2)
		{
			Ti_container_backupScreen.setVisible(false);
			Ti_container_backupScreen.setXY(settingPosx1, settingPosy2);
			Ti_container_backupScreen.invalidate();
			selector_Ti_backupScreen.setXY(settingPosx1+6, settingPosy2+4);
			selector_Ti_backupScreen.invalidate();
			Ti_container_backupScreen.setVisible(true);
			selector_Ti_backupScreen.invalidate();
			
			container_backupConfig.setVisible(false);
			container_backupConfig.invalidate();
			container_backupConfig.setVisible(true);
			container_backupConfig.invalidate();
		}
		if (riseTime_container_backupScreen.isVisible())
		{
			riseTime_container_backupScreen.setVisible(false);
			riseTime_container_backupScreen.invalidate();
		}
		if (!FlowShape_container_backupScreen.isVisible() || FlowShape_container_backupScreen.getX() != settingPosx2 || FlowShape_container_backupScreen.getY() != settingPosy2)
		{
			FlowShape_container_backupScreen.setVisible(false);
			FlowShape_container_backupScreen.setXY(settingPosx2, settingPosy2);
			FlowShape_container_backupScreen.invalidate();
			selector_flowShape_backupScreen.setXY(settingPosx2+6, settingPosy2+4);
			selector_flowShape_backupScreen.invalidate();
			FlowShape_container_backupScreen.setVisible(true);
			FlowShape_container_backupScreen.invalidate();
			
			container_backupConfig.setVisible(false);
			container_backupConfig.invalidate();
			container_backupConfig.setVisible(true);
			container_backupConfig.invalidate();
			
			click_backBackupModeScreen();
			click_backupConfigs();
		}
		
		if (key1 == 0)
		{
			if (!selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(true);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_backBackupScreen();
			}
		}
		
		else if (key1 == 1)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (!selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(true);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_VTBackupScreen();
			}
		}
		else if (key1 == 2)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (!selector_RR_backupScreen.isVisible())
			{

			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_RRBackupScreen();
			}
		}
		else if (key1 == 3)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (!selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(true);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEPBackupScreen();
			}
		}
		else if (key1 == 4)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (!selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(true);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiBackupScreen();
			}
		}
		else if (key1 == 5)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (!selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(true);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_flowShapeBackupScreen();
			}
		}
		
		else if (key1 > 5)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 5;
			encoderCounter = key1*4 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	else if (backupMode_intval == 2) // ac_pcv
	{
		if (VT_container_backupScreen.isVisible())
		{
			VT_container_backupScreen.setVisible(false);
			VT_container_backupScreen.invalidate();
		}
		if (!RR_container_backupScreen.isVisible() || RR_container_backupScreen.getX() != settingPosx1 || RR_container_backupScreen.getY() != settingPosy1-1)
		{
			RR_container_backupScreen.setVisible(false);
			RR_container_backupScreen.setXY(settingPosx1, settingPosy1-1);
			RR_container_backupScreen.invalidate();
			selector_RR_backupScreen.setXY(settingPosx1+6, settingPosy1+4);
			selector_RR_backupScreen.invalidate();
			RR_container_backupScreen.setVisible(true);
			RR_container_backupScreen.invalidate();
		}
		if (!PEEP_container_backupScreen.isVisible() || PEEP_container_backupScreen.getX() != settingPosx2 || PEEP_container_backupScreen.getY() != settingPosy1-1)
		{
			PEEP_container_backupScreen.setVisible(false);
			PEEP_container_backupScreen.setXY(settingPosx2, settingPosy1-1);
			PEEP_container_backupScreen.invalidate();
			selector_PEEP__backupScreen.setXY(settingPosx2+6, settingPosy1+4);
			selector_PEEP__backupScreen.invalidate();
			PEEP_container_backupScreen.setVisible(true);
			PEEP_container_backupScreen.invalidate();
		}
		if (!PControl_container_backupScreen.isVisible() || PControl_container_backupScreen.getX() != settingPosx3 || PControl_container_backupScreen.getY() != settingPosy1-1)
		{
			PControl_container_backupScreen.setVisible(false);
			PControl_container_backupScreen.setXY(settingPosx3, settingPosy1-1);
			PControl_container_backupScreen.invalidate();
			selector_PControl_backupScreen.setXY(settingPosx3+6, settingPosy1+4);
			selector_PControl_backupScreen.invalidate();
			PControl_container_backupScreen.setVisible(true);
			PControl_container_backupScreen.invalidate();
		}
		if (!Ti_container_backupScreen.isVisible() || Ti_container_backupScreen.getX() != settingPosx1 || Ti_container_backupScreen.getY() != settingPosy2)
		{
			Ti_container_backupScreen.setVisible(false);
			Ti_container_backupScreen.setXY(settingPosx1, settingPosy2);
			Ti_container_backupScreen.invalidate();
			selector_Ti_backupScreen.setXY(settingPosx1+6, settingPosy2+4);
			selector_Ti_backupScreen.invalidate();
			Ti_container_backupScreen.setVisible(true);
			Ti_container_backupScreen.invalidate();
		}
		if (!riseTime_container_backupScreen.isVisible() || riseTime_container_backupScreen.getX() != settingPosx4 || riseTime_container_backupScreen.getY() != settingPosy1)
		{
			riseTime_container_backupScreen.setVisible(false);
			riseTime_container_backupScreen.setXY(settingPosx4, settingPosy1);
			riseTime_container_backupScreen.invalidate();
			selector_riseTime__backupScreen.setXY(settingPosx4+6, settingPosy1+4);
			selector_riseTime__backupScreen.invalidate();
			riseTime_container_backupScreen.setVisible(true);
			riseTime_container_backupScreen.invalidate();
			
			click_backBackupModeScreen();
			click_backupConfigs();
		}
		if (FlowShape_container_backupScreen.isVisible())
		{
			FlowShape_container_backupScreen.setVisible(false);
			FlowShape_container_backupScreen.invalidate();
		}
		if (key1 == 0)
		{
			if (!selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(true);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_backBackupScreen();
			}
		}
		else if (key1 == 1)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (!selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(true);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_RRBackupScreen();
			}
		}
		else if (key1 == 2)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (!selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(true);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_PEEPBackupScreen();
			}
		}
		else if (key1 == 3)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (!selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(true);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_PControlBackupScreen();
			}
		}
		else if (key1 == 4)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(false);
				selector_Ti_backupScreen.invalidate();
			}
			if (!selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(true);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_riseTimeBackupScreen();
			}
		}
		else if (key1 == 5)
		{
			if (selector_backBackupModesScreen.isVisible())
			{
				selector_backBackupModesScreen.setVisible(false);
				selector_backBackupModesScreen.invalidate();
			}
			if (selector_VT_backupScreen.isVisible())
			{
				selector_VT_backupScreen.setVisible(false);
				selector_VT_backupScreen.invalidate();
			}
			if (selector_RR_backupScreen.isVisible())
			{
				selector_RR_backupScreen.setVisible(false);
				selector_RR_backupScreen.invalidate();
			}
			if (selector_PEEP__backupScreen.isVisible())
			{
				selector_PEEP__backupScreen.setVisible(false);
				selector_PEEP__backupScreen.invalidate();
			}
			if (selector_PControl_backupScreen.isVisible())
			{
				selector_PControl_backupScreen.setVisible(false);
				selector_PControl_backupScreen.invalidate();
			}
			if (!selector_Ti_backupScreen.isVisible())
			{
				selector_Ti_backupScreen.setVisible(true);
				selector_Ti_backupScreen.invalidate();
			}
			if (selector_riseTime__backupScreen.isVisible())
			{
				selector_riseTime__backupScreen.setVisible(false);
				selector_riseTime__backupScreen.invalidate();
			}
			if (selector_flowShape_backupScreen.isVisible())
			{
				selector_flowShape_backupScreen.setVisible(false);
				selector_flowShape_backupScreen.invalidate();
			}
			if (pressKey == 1)
			{
				click_TiBackupScreen();
			}
		}
		else if (key1 > 6)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		else if (key1 < 0)
		{
			key1 = 6;
			encoderCounter = key1*4  + 1;
			__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
		}
	}
	
}
void screenView::handleAudio()
{
	if (key1 != tmp)
	{
		int a = audio_slider.getValue() + (key1 - tmp) * 5;
		audio_slider.setValue(a);
		audio_sound = a;

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		selectorAudioSlider.setVisible(false);
		selectorAudioSlider.invalidate();
		state = DEVICE;
	}
}

void screenView::handleBrightness()
{
	if (key1 != tmp)
	{
		brightness_slider.setValue(brightness_slider.getValue() + (key1 - tmp) * 5);

		__HAL_TIM_SET_COUNTER(&htim3, 0);
		tmp = key1 = 0;
		encoderCounter = 0;
	}
	if (pressKey == 1)
	{
		// save and exit
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		selectorBrightnessSlider.setVisible(false);
		selectorBrightnessSlider.invalidate();
		state = DEVICE;
	}
	if(brightness_slider.getValue()>=20)
		TIM15->CCR1 = brightness_slider.getValue();
}

void screenView::handleActiveAlarams()
{
	if(key1==0)
	{
		if(selector_backActiveAlarmsScreen.isVisible())
		{
			selector_backActiveAlarmsScreen.setVisible(false);
			selector_backActiveAlarmsScreen.invalidate();
		}
	}
	else if(key1==1)
	{
		if(!selector_backActiveAlarmsScreen.isVisible())
		{
			selector_backActiveAlarmsScreen.setVisible(true);
			selector_backActiveAlarmsScreen.invalidate();
		}
	}
	else if(key1>1)
	{
		key1=0;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3 ,encoderCounter);
	}
	else if(key1<0)
	{
		key1=1;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3 ,encoderCounter);
	}
}
void screenView::handleAlarm()
{
	// change real values
	if(tickCounter % 30==0)
	{
		Unicode::snprintf(RR_alarm_realBuffer, RR_ALARM_REAL_SIZE, "%d", (int)RR_real);
		RR_alarm_real.setWildcard1(RR_alarm_realBuffer);
		if((int)RR_real > RR_alarm_maxVal || (int)RR_real < RR_alarm_minVal)	RR_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else RR_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		RR_alarm_real.invalidate();
		
		Unicode::snprintf(pressure_alarm_realBuffer, PRESSURE_ALARM_REAL_SIZE, "%d", (int)pressure_real);
		pressure_alarm_real.setWildcard1(pressure_alarm_realBuffer);
		if((int)pressure_real > pressure_alarm_maxVal || (int)pressure_real < pressure_alarm_minVal)	pressure_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else pressure_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		pressure_alarm_real.invalidate();
		
		Unicode::snprintf(vti_alarm_realBuffer, VTI_ALARM_REAL_SIZE, "%d", (int)VTi_real);
		vti_alarm_real.setWildcard1(vti_alarm_realBuffer);
		if((int)VTi_real > vti_alarm_maxVal || (int)VTi_real < vti_alarm_minVal)	vti_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else vti_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		vti_alarm_real.invalidate();
		
		Unicode::snprintf(vte_alarm_realBuffer, VTE_ALARM_REAL_SIZE, "%d", (int)VTe_real);
		vte_alarm_real.setWildcard1(vte_alarm_realBuffer);
		if((int)VTe_real > vte_alarm_maxVal || (int)VTe_real < vte_alarm_minVal)	vte_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else vte_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		vte_alarm_real.invalidate();
		
		Unicode::snprintfFloat(MVi_alarm_realBuffer, MVI_ALARM_REAL_SIZE, "%.1f", MVi_real);
		MVi_alarm_real.setWildcard1(MVi_alarm_realBuffer);
		if(MVi_real > MVi_alarm_maxVal || (int)MVi_real < MVi_alarm_minVal)	MVi_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else MVi_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		MVi_alarm_real.invalidate();
		
		Unicode::snprintfFloat(MVe_alarm_realBuffer, MVE_ALARM_REAL_SIZE, "%.1f", MVe_real);
		MVe_alarm_real.setWildcard1(MVe_alarm_realBuffer);
		if(MVe_real > MVe_alarm_maxVal || (int)MVe_real < MVe_alarm_minVal)	MVe_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else MVe_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		MVe_alarm_real.invalidate();
		
		Unicode::snprintf(FiO2_alarm_realBuffer, FIO2_ALARM_REAL_SIZE, "%d", (int)FiO2_real);
		FiO2_alarm_real.setWildcard1(FiO2_alarm_realBuffer);
		if((int)FiO2_real > FiO2_alarm_maxIntVal || (int)FiO2_real < FiO2_alarm_minIntVal)	FiO2_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else FiO2_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		FiO2_alarm_real.invalidate();
		
		Unicode::snprintf(Leak_alarm_realBuffer, LEAK_ALARM_REAL_SIZE, "%d", (int)leak_real);
		Leak_alarm_real.setWildcard1(Leak_alarm_realBuffer);
		if((int)leak_real > Leak_alarm_maxIntVal)	Leak_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else Leak_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		Leak_alarm_real.invalidate();
		
		Unicode::snprintf(SPO2_alarm_realBuffer, SPO2_ALARM_REAL_SIZE, "%d", (int)SPO2_real);
		SPO2_alarm_real.setWildcard1(SPO2_alarm_realBuffer);
		if((int)SPO2_real > SPO2_alarm_maxIntVal)	SPO2_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else SPO2_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		SPO2_alarm_real.invalidate();
	}
	
	
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(true);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_backAlarmSc();
		}
	}
	else if (key1 == 2)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (!selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(true);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			RR_alarm_max.setVisible(false);
			RR_alarm_max.invalidate();
			RR_alarm_big_max.setVisible(true);
			Unicode::snprintf(RR_alarm_big_maxBuffer, RR_ALARM_BIG_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_big_max.setWildcard1(RR_alarm_big_maxBuffer);
			RR_alarm_big_max.invalidate();
			state = RR_MAX;
		}
	}
	else if (key1 == 3)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (!selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(true);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			pressure_alarm_max.setVisible(false);
			pressure_alarm_max.invalidate();
			pressure_alarm_big_max.setVisible(true);
			Unicode::snprintf(pressure_alarm_big_maxBuffer, PRESSURE_ALARM_BIG_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
			pressure_alarm_big_max.setWildcard1(pressure_alarm_big_maxBuffer);
			pressure_alarm_big_max.invalidate();
			state = PRESSURE_MAX;
		}
	}
	else if (key1 == 4)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (!selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(true);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			vti_alarm_max.setVisible(false);
			vti_alarm_max.invalidate();
			vti_alarm_big_min.setVisible(true);
			Unicode::snprintf(vti_alarm_big_maxBuffer, VTI_ALARM_BIG_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_maxBuffer);
			vti_alarm_big_min.invalidate();
			state = VTI_MAX;
		}
	}
	else if (key1 == 5)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (!selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(true);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			vte_alarm_max.setVisible(false);
			vte_alarm_max.invalidate();
			vte_alarm_big_min.setVisible(true);
			Unicode::snprintf(vte_alarm_big_maxBuffer, VTE_ALARM_BIG_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_maxBuffer);
			vte_alarm_big_min.invalidate();
			state = VTE_MAX;
		}
	}
	else if (key1 == 6)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (!selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(true);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			FiO2_alarm_maxVal.setVisible(false);
			FiO2_alarm_maxVal.invalidate();
			FiO2_alarm_big_maxVal.setVisible(true);
			Unicode::snprintf(FiO2_alarm_big_maxValBuffer, FIO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_big_maxVal.setWildcard1(FiO2_alarm_big_maxValBuffer);
			FiO2_alarm_big_maxVal.invalidate();
			state = FIO2_ALARM;
		}
	}
	
	else if (key1 == 7)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (!selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(true);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			MVi_alarm_max.setVisible(false);
			MVi_alarm_max.invalidate();
			MVi_alarm_big_max.setVisible(true);
			Unicode::snprintf(MVi_alarm_big_maxBuffer, MVI_ALARM_BIG_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_big_max.setWildcard1(MVi_alarm_big_maxBuffer);
			MVi_alarm_big_max.invalidate();
			state = MVI_MAX;
		}
	}
	else if (key1 == 8)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (!selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(true);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			MVe_alarm_max.setVisible(false);
			MVe_alarm_max.invalidate();
			MVe_alarm_big_max.setVisible(true);
			Unicode::snprintf(MVe_alarm_big_maxBuffer, MVE_ALARM_BIG_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVe_alarm_big_max.setWildcard1(MVe_alarm_big_maxBuffer);
			MVe_alarm_big_max.invalidate();
			state = MVE_MAX;
		}
	}

	else if (key1 == 9)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (!selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(true);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			state = LEAK_MAX;
		}
	}
	
	
	else if (key1 == 10)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (!selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(true);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			state = LOWPEEP;
		}
	}
	else if (key1 == 11)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(false);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (!selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(true);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			state = SPO2_MAX;
		}
	}
	else if (key1 == 12)
	{
		if (selector_backAlarmSetting.isVisible())
		{
			selector_backAlarmSetting.setVisible(false);
			selector_backAlarmSetting.invalidate();
		}
		if (selector_RRAlarmSetting.isVisible())
		{
			selector_RRAlarmSetting.setVisible(false);
			selector_RRAlarmSetting.invalidate();
		}
		if (selector_VtiAlarmSetting.isVisible())
		{
			selector_VtiAlarmSetting.setVisible(false);
			selector_VtiAlarmSetting.invalidate();
		}
		if (selector_VteAlarmSetting.isVisible())
		{
			selector_VteAlarmSetting.setVisible(false);
			selector_VteAlarmSetting.invalidate();
		}
		if (selector_MViAlarmSetting.isVisible())
		{
			selector_MViAlarmSetting.setVisible(false);
			selector_MViAlarmSetting.invalidate();
		}
		if (selector_MVeAlarmSetting.isVisible())
		{
			selector_MVeAlarmSetting.setVisible(false);
			selector_MVeAlarmSetting.invalidate();
		}
		if (selector_pressureAlarmSetting.isVisible())
		{
			selector_pressureAlarmSetting.setVisible(false);
			selector_pressureAlarmSetting.invalidate();
		}
		if (selector_FiO2AlarmSetting.isVisible())
		{
			selector_FiO2AlarmSetting.setVisible(false);
			selector_FiO2AlarmSetting.invalidate();
		}
		if (selector_LeakAlarmSetting.isVisible())
		{
			selector_LeakAlarmSetting.setVisible(false);
			selector_LeakAlarmSetting.invalidate();
		}
		if (selector_lowPEEPAlarmSetting.isVisible())
		{
			selector_lowPEEPAlarmSetting.setVisible(false);
			selector_lowPEEPAlarmSetting.invalidate();
		}
		if (!selector_ApneaAlarmSetting.isVisible())
		{
			selector_ApneaAlarmSetting.setVisible(true);
			selector_ApneaAlarmSetting.invalidate();
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_SPO2AlarmSetting.isVisible())
		{
			selector_SPO2AlarmSetting.setVisible(false);
			selector_SPO2AlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			state = APNEA_ALARM;
		}
	}
	
	else if (key1 > 12)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 12;
		encoderCounter = key1 * 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}

void screenView::handleAlarmNextPage()
{
	// change real values
	if(tickCounter%30==0)
	{
		Unicode::snprintf(CircuitDis_alarm_realBuffer, CIRCUITDIS_ALARM_REAL_SIZE, "%d", (int)circuitDis_real);
		CircuitDis_alarm_real.setWildcard1(CircuitDis_alarm_realBuffer);
		if((int)circuitDis_real > circuitDis_intval)	CircuitDis_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else CircuitDis_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		CircuitDis_alarm_real.invalidate();
		
		Unicode::snprintf(pulseRate_alarm_realBuffer, PULSERATE_ALARM_REAL_SIZE, "%d", (int)pulseRate_real);
		pulseRate_alarm_real.setWildcard1(pulseRate_alarm_realBuffer);
		if((int)pulseRate_real > pulseRate_maxIntVal || (int)pulseRate_real < pulseRate_minIntVal)	pulseRate_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else pulseRate_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		pulseRate_alarm_real.invalidate();
		
		Unicode::snprintf(obstruction_alarm_realBuffer, OBSTRUCTION_ALARM_REAL_SIZE, "%d", (int)obstruction_real);
		obstruction_alarm_real.setWildcard1(obstruction_alarm_realBuffer);
		if((int)obstruction_real > obstruction_intval || (int)obstruction_real < obstruction_intval)	obstruction_alarm_real.setColor(Color::getColorFromRGB(220, 10, 10)); //red
		else obstruction_alarm_real.setColor(Color::getColorFromRGB(255, 255, 255)); //white
		obstruction_alarm_real.invalidate();
		
	}
	
	
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(true);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_previousPageAlarm();
		}
	}
	else if (key1 == 2)
	{
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (!selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(true);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_circuitDisAlarm();
		}
	}
	else if (key1 == 3)
	{
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (!selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(true);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_pulsRateAlarm();
		}
	}
	else if (key1 == 4)
	{
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (!selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(true);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_FiO2FakeAlarm();
		}
	}
	else if (key1 == 5)
	{
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (!selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(true);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(false);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_obstructionAlarm();
		}
	}
	else if (key1 == 6)
	{
		if (selector_previousPageAlarm.isVisible())
		{
			selector_previousPageAlarm.setVisible(false);
			selector_previousPageAlarm.invalidate();
		}
		if (selector_pulseRateAlarmSetting.isVisible())
		{
			selector_pulseRateAlarmSetting.setVisible(false);
			selector_pulseRateAlarmSetting.invalidate();
		}
		if (selector_circuitDisAlarmSetting.isVisible())
		{
			selector_circuitDisAlarmSetting.setVisible(false);
			selector_circuitDisAlarmSetting.invalidate();
		}
		if (selector_obstructionAlarmSetting.isVisible())
		{
			selector_obstructionAlarmSetting.setVisible(false);
			selector_obstructionAlarmSetting.invalidate();
		}
		if (!selector_ventStopedAlarmSetting.isVisible())
		{
			selector_ventStopedAlarmSetting.setVisible(true);
			selector_ventStopedAlarmSetting.invalidate();
		}
		if (selector_FiO2FakeAlarmSetting.isVisible())
		{
			selector_FiO2FakeAlarmSetting.setVisible(false);
			selector_FiO2FakeAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_ventStopedAlarm();
		}
	}
	
	else if (key1 > 6)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 6;
		encoderCounter = key1 * 4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}


void screenView::handleCircuitDisAlarm()
{
	if (key1 != tmp)
	{
		circuitDis_intval = circuitDis_intval  + (int)(key1 - tmp);
		if (circuitDis_intval>90)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			circuitDis_intval = 5;
		}
		else if (circuitDis_intval < 5)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			circuitDis_intval = 90;
		}
		Unicode::snprintf(CircuitDis_alarm_bigBuffer, CIRCUITDIS_ALARM_BIG_SIZE, "%d", (int)circuitDis_intval);
		CircuitDis_alarm_big.setWildcard1(CircuitDis_alarm_bigBuffer);
		CircuitDis_alarm_big.invalidate();
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_circuitDisAlarm();
	}
}

void screenView::handleHRMaxAlarm()
{
	if (key1 != tmp)
	{
		if (pulseRate_maxIntVal == -1 && ((pulseRate_maxIntVal + (float)(key1 - tmp)) > -1)) pulseRate_maxIntVal = 21;
		else if (pulseRate_maxIntVal == 21 && ((pulseRate_maxIntVal + (float)(key1 - tmp)) < 21)) pulseRate_maxIntVal = -1;
		else pulseRate_maxIntVal = pulseRate_maxIntVal + (float)(key1 - tmp);
		
		if (pulseRate_maxIntVal > 250)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pulseRate_maxIntVal = -1;
		} 
		else if (pulseRate_maxIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pulseRate_maxIntVal = 250;
		}
		
		if(pulseRate_maxIntVal==-1)
		{
			Unicode::strncpy(pulseRate_alarm_big_maxBuffer, "Off", 3);
			pulseRate_alarm_big_max.setWildcard1(pulseRate_alarm_big_maxBuffer);
			pulseRate_alarm_big_max.resizeToCurrentText();
			pulseRate_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_big_maxBuffer, PULSERATE_ALARM_BIG_MAX_SIZE, "%d", (int)pulseRate_maxIntVal);
			pulseRate_alarm_big_max.setWildcard1(pulseRate_alarm_big_maxBuffer);
			pulseRate_alarm_big_max.invalidate();				
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_pulsRateAlarm();
	}
}
void screenView::handleHRMinAlarm()
{
	if (key1 != tmp)
	{
		if (pulseRate_minIntVal == -1 && ((pulseRate_minIntVal + (float)(key1 - tmp)) > -1)) pulseRate_minIntVal = 20; 
		else if (pulseRate_minIntVal == 20 && ((pulseRate_minIntVal + (float)(key1 - tmp)) < 20)) pulseRate_minIntVal = -1; 
		else pulseRate_minIntVal = pulseRate_minIntVal + (float)(key1 - tmp);
		
		if (pulseRate_minIntVal > 249)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pulseRate_minIntVal = -1;
		}
		else if (pulseRate_minIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pulseRate_minIntVal = 249;
		}
		
		if(pulseRate_minIntVal == -1)
		{
			Unicode::strncpy(pulseRate_alarm_big_minBuffer, "Off  ", 3);
			pulseRate_alarm_big_min.setWildcard1(pulseRate_alarm_big_minBuffer);
			pulseRate_alarm_big_min.resizeToCurrentText();
			pulseRate_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(pulseRate_alarm_big_minBuffer, PULSERATE_ALARM_BIG_MIN_SIZE, "%d", (int)pulseRate_minIntVal);
			pulseRate_alarm_big_min.setWildcard1(pulseRate_alarm_big_minBuffer);
			pulseRate_alarm_big_min.invalidate();
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_pulsRateAlarm();
	}
}
void screenView::handleObstructionAlarm()
{
	
}
void screenView::handleFiO2FakeAlarm()
{
	if (key1 != tmp)
	{
		isFiO2Fake_alarm = !isFiO2Fake_alarm;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		
		if(isFiO2Fake_alarm)
		{
			FiO2Fake_alarm_big_Off.setVisible(false);
			FiO2Fake_alarm_big_Off.invalidate();
			FiO2Fake_alarm_big_ON.setVisible(true);
			FiO2Fake_alarm_big_ON.invalidate();
		}
		else
		{
			FiO2Fake_alarm_big_Off.setVisible(true);
			FiO2Fake_alarm_big_Off.invalidate();
			FiO2Fake_alarm_big_ON.setVisible(false);
			FiO2Fake_alarm_big_ON.invalidate();
		}
	}
	if (pressKey == 1)
	{
		click_FiO2FakeAlarm();
	}
}
void screenView::handleVentStopedAlarm()
{
	if (key1 != tmp)
	{
		isVentStoped_alarm = !isVentStoped_alarm;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		
		if(isVentStoped_alarm)
		{
			ventStoped_alarm_big_Off.setVisible(false);
			ventStoped_alarm_big_Off.invalidate();
			ventStoped_alarm_big_ON.setVisible(true);
			ventStoped_alarm_big_ON.invalidate();
		}
		else
		{
			ventStoped_alarm_big_Off.setVisible(true);
			ventStoped_alarm_big_Off.invalidate();
			ventStoped_alarm_big_ON.setVisible(false);
			ventStoped_alarm_big_ON.invalidate();
		}
	}
	if (pressKey == 1)
	{
		click_ventStopedAlarm();
	}
}
void screenView::handleTrends()
{
	if (isAlarmTrend)
	{
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
		}
		if (key1 == 1)
		{
			if (!selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(true);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_backTrendsScreen();
			}
		}
		if (key1 == 2)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (!selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(true);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				isLoading = true;
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
				container_dataRecords.setVisible(false);
				container_dataRecords.invalidate();
				pressKey = 0;
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
				radioButtonGroupRecords.setSelected(radioButton_alarmRecords);
				text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_dataRecords.invalidate();
				arb_text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_dataRecords.invalidate();
				text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_alarmRecords.invalidate();
				arb_text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_alarmRecords.invalidate();
				// click_alarmRecords();
			}
		}
		if (key1 == 3)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (!selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(true);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				isLoading = true;
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
				container_dataRecords.setVisible(true);
				container_dataRecords.invalidate();
				pressKey = 0;
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
				radioButtonGroupRecords.setSelected(radioButton_dataRecords);
				text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_alarmRecords.invalidate();
				arb_text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_alarmRecords.invalidate();
				text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_dataRecords.invalidate();
				arb_text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_dataRecords.invalidate();
			}
		}
		if (key1 == 4)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (!selector_previous.isVisible())
			{
				selector_previous.setVisible(true);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_previous();
			}
		}
		if (key1 == 5)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (!selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(true);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_previous2x();
			}
		}
		if (key1 == 6)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (!selector_next.isVisible())
			{
				selector_next.setVisible(true);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_next();
			}
		}
		if (key1 == 7)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (!selector_next2x.isVisible())
			{
				selector_next2x.setVisible(true);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_next2x();
			}
		}
		if (key1 > 7)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		if (key1 < 0)
		{
			key1 = 7;
			encoderCounter = 28 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, 28 + 1);
		}
	}
	else
	{
		if (key1 == 0)
		{
			pressKey = 0;
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
		}
		if (key1 == 1)
		{
			if (!selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(true);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_backTrendsScreen();
			}
		}
		if (key1 == 2)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (!selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(true);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				isLoading = true;
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
				container_dataRecords.setVisible(false);
				container_dataRecords.invalidate();
				pressKey = 0;
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
				radioButtonGroupRecords.setSelected(radioButton_alarmRecords);
				text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_dataRecords.invalidate();
				arb_text_dataRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_dataRecords.invalidate();
				text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_alarmRecords.invalidate();
				arb_text_alarmRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_alarmRecords.invalidate();
			}
		}
		if (key1 == 3)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (!selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(true);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				isLoading = true;
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
				container_dataRecords.setVisible(true);
				container_dataRecords.invalidate();
				pressKey = 0;
				key1 = 0;
				encoderCounter = 0;
				__HAL_TIM_SET_COUNTER(&htim3, 0);
				radioButtonGroupRecords.setSelected(radioButton_dataRecords);
				text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_alarmRecords.invalidate();
				arb_text_alarmRecords.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_alarmRecords.invalidate();
				text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				text_dataRecords.invalidate();
				arb_text_dataRecords.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
				arb_text_dataRecords.invalidate();
				isAlarmTrend = false;
			}
		}
		if (key1 == 4)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (!selector_previous.isVisible())
			{
				selector_previous.setVisible(true);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_previous();
			}
		}
		if (key1 == 5)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (!selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(true);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_previous2x();
			}
		}
		if (key1 == 6)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (!selector_next.isVisible())
			{
				selector_next.setVisible(true);
				selector_next.invalidate();
			}
			if (selector_next2x.isVisible())
			{
				selector_next2x.setVisible(false);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_next();
			}
		}
		if (key1 == 7)
		{
			if (selector_backTrends.isVisible())
			{
				selector_backTrends.setVisible(false);
				selector_backTrends.invalidate();
			}
			if (selector_alarmRecords.isVisible())
			{
				selector_alarmRecords.setVisible(false);
				selector_alarmRecords.invalidate();
			}
			if (selector_dataRecords.isVisible())
			{
				selector_dataRecords.setVisible(false);
				selector_dataRecords.invalidate();
			}
			if (selector_previous.isVisible())
			{
				selector_previous.setVisible(false);
				selector_previous.invalidate();
			}
			if (selector_previous2x.isVisible())
			{
				selector_previous2x.setVisible(false);
				selector_previous2x.invalidate();
			}
			if (selector_next.isVisible())
			{
				selector_next.setVisible(false);
				selector_next.invalidate();
			}
			if (!selector_next2x.isVisible())
			{
				selector_next2x.setVisible(true);
				selector_next2x.invalidate();
			}
			if (pressKey == 1)
			{
				click_next2x();
			}
		}
		if (key1 > 7)
		{
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
		}
		if (key1 < 0)
		{
			key1 = 7;
			encoderCounter = 28 + 1;
			__HAL_TIM_SET_COUNTER(&htim3, 28 + 1);
		}
	}
}
void screenView::handleRRMax()
{
	if (key1 != tmp)
	{
		if (RR_alarm_maxVal == -1 && ((RR_alarm_maxVal + (float)(key1 - tmp)) > -1)) RR_alarm_maxVal = 3; 
		else if (RR_alarm_maxVal == 3 && ((RR_alarm_maxVal + (float)(key1 - tmp)) < 3)) RR_alarm_maxVal = -1; 
		else RR_alarm_maxVal = RR_alarm_maxVal + (float)(key1 - tmp);
		
		if (RR_alarm_maxVal > 99)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			RR_alarm_maxVal = -1;
		}
		else if (RR_alarm_maxVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			RR_alarm_maxVal = 99;
		}
		
		if(RR_alarm_maxVal == -1)
		{
			Unicode::strncpy(RR_alarm_big_maxBuffer, "Off", 3);
			RR_alarm_big_max.setWildcard1(RR_alarm_big_maxBuffer);
			RR_alarm_big_max.resizeToCurrentText();
			RR_alarm_big_max.invalidate();
		}	
		else
		{
			Unicode::snprintf(RR_alarm_big_maxBuffer, RR_ALARM_BIG_MAX_SIZE, "%d", (int)RR_alarm_maxVal);
			RR_alarm_big_max.setWildcard1(RR_alarm_big_maxBuffer);
			RR_alarm_big_max.invalidate();				
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_RRAlarmbtn();
	}
}

void screenView::handleRRMin()
{
	if (key1 != tmp)
	{
		if (RR_alarm_minVal == -1 && ((RR_alarm_minVal + (float)(key1 - tmp)) > -1)) RR_alarm_minVal = 2;
		else if (RR_alarm_minVal == 2 && ((RR_alarm_minVal + (float)(key1 - tmp)) < 2)) RR_alarm_minVal = -1;
		else RR_alarm_minVal = RR_alarm_minVal + (float)(key1 - tmp);
		
		if (RR_alarm_minVal > 98)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			RR_alarm_minVal = -1;
		}
		else if (RR_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			RR_alarm_minVal = 98;
		}
		
		if(RR_alarm_minVal == -1)
		{
			Unicode::strncpy(RR_alarm_big_minBuffer, "Off", 3);
			RR_alarm_big_min.setWildcard1(RR_alarm_big_minBuffer);
			RR_alarm_big_min.resizeToCurrentText();
			RR_alarm_big_min.invalidate();			
		}
		else
		{
			Unicode::snprintf(RR_alarm_big_minBuffer, RR_ALARM_BIG_MIN_SIZE, "%d", (int)RR_alarm_minVal);
			RR_alarm_big_min.setWildcard1(RR_alarm_big_minBuffer);
			RR_alarm_big_min.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_RRAlarmbtn();
	}
}

void screenView::handlePressureMax()
{
	if (key1 != tmp)
	{
		pressure_alarm_maxVal = pressure_alarm_maxVal + (float)(key1 - tmp);
		
		if (pressure_alarm_maxVal > 80)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pressure_alarm_maxVal = 10;
		}
		else if (pressure_alarm_maxVal < 10)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pressure_alarm_maxVal = 80;
		}
		
		Unicode::snprintf(pressure_alarm_big_maxBuffer, PRESSURE_ALARM_BIG_MAX_SIZE, "%d", (int)pressure_alarm_maxVal);
		pressure_alarm_big_max.setWildcard1(pressure_alarm_big_maxBuffer);
		pressure_alarm_big_max.invalidate();			
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go to min
		click_PAlarmbtn();
	}
}

void screenView::handlePressureMin()
{
	if (key1 != tmp)
	{
		if(pressure_alarm_minVal == -1 && (pressure_alarm_minVal + (float)(key1 - tmp)) > -1) pressure_alarm_minVal = 2;
		else if(pressure_alarm_minVal == 2 && (pressure_alarm_minVal + (float)(key1 - tmp)) < 2) pressure_alarm_minVal = -1;
		else pressure_alarm_minVal = pressure_alarm_minVal + (float)(key1 - tmp);
		
		if (pressure_alarm_minVal > 79)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pressure_alarm_minVal = -1;
		}
		else if (pressure_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			pressure_alarm_minVal = 79;
		}
		
		if(pressure_alarm_minVal == -1)
		{
			Unicode::strncpy(pressure_alarm_big_minBuffer, "Off", 3);
			pressure_alarm_big_min.setWildcard1(pressure_alarm_big_minBuffer);
			pressure_alarm_big_min.resizeToCurrentText();
			pressure_alarm_big_min.invalidate();			
		}
		else
		{
			Unicode::snprintf(pressure_alarm_big_minBuffer, PRESSURE_ALARM_BIG_MIN_SIZE, "%d", (int)pressure_alarm_minVal);
			pressure_alarm_big_min.setWildcard1(pressure_alarm_big_minBuffer);
			pressure_alarm_big_min.invalidate();	
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go back
		click_PAlarmbtn();
	}
}

void screenView::handleVtiMax()
{
	if (key1 != tmp)
	{
		if (vti_alarm_maxVal == -1 && (vti_alarm_maxVal + (float)(key1 - tmp)*10) > -1) vti_alarm_maxVal = 60;
		else if (vti_alarm_maxVal == 60 && (vti_alarm_maxVal + (float)(key1 - tmp)*10) < 60) vti_alarm_maxVal = -1;
		else vti_alarm_maxVal = vti_alarm_maxVal + (float)(key1 - tmp)*10;
		
		if (vti_alarm_maxVal > 3000)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vti_alarm_maxVal = -1;
		}
		else if (vti_alarm_maxVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vti_alarm_maxVal = 3000;
		}
		
		if(vti_alarm_maxVal == -1)
		{
			Unicode::strncpy(vti_alarm_big_maxBuffer, "Off", 3);
			vti_alarm_big_max.setWildcard1(vti_alarm_big_maxBuffer);
			vti_alarm_big_max.resizeToCurrentText();
			vti_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_big_maxBuffer, VTI_ALARM_BIG_MAX_SIZE, "%d", (int)vti_alarm_maxVal);
			vti_alarm_big_max.setWildcard1(vti_alarm_big_maxBuffer);
			vti_alarm_big_max.invalidate();
		}
				
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go to min
		click_VtiAlarmbtn();
	}
}

void screenView::handleVtiMin()
{
	if (key1 != tmp)
	{
		if (vti_alarm_minVal == -1 && (vti_alarm_minVal + (float)(key1 - tmp)*10) > -1) vti_alarm_minVal = 50;
		else if (vti_alarm_minVal == 50 && (vti_alarm_minVal + (float)(key1 - tmp)*10) < 50) vti_alarm_minVal = -1;
		else vti_alarm_minVal = vti_alarm_minVal + (float)(key1 - tmp)*10;
		
		if (vti_alarm_minVal > 2990)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vti_alarm_minVal = -1;
		}
		else if (vti_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vti_alarm_minVal = 2990;
		}
		if(vti_alarm_minVal == -1)
		{
			Unicode::strncpy(vti_alarm_big_minBuffer, "Off", 3);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_minBuffer);
			vti_alarm_big_min.resizeToCurrentText();
			vti_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(vti_alarm_big_minBuffer, VTI_ALARM_BIG_MIN_SIZE, "%d", (int)vti_alarm_minVal);
			vti_alarm_big_min.setWildcard1(vti_alarm_big_minBuffer);
			vti_alarm_big_min.invalidate();
		}
			
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_VtiAlarmbtn();
	}
}

void screenView::handleVteMax()
{
	if (key1 != tmp)
	{
		if(vte_alarm_maxVal == -1 && (vte_alarm_maxVal + (float)(key1 - tmp)*10) > -1) vte_alarm_maxVal = 60;
		else if(vte_alarm_maxVal == 60 && (vte_alarm_maxVal + (float)(key1 - tmp)*10) < 60) vte_alarm_maxVal = -1;
		else vte_alarm_maxVal = vte_alarm_maxVal + (float)(key1 - tmp)*10;
		
		if (vte_alarm_maxVal > 3000)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vte_alarm_maxVal = 60;
		}
		else if (vte_alarm_maxVal < 60)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vte_alarm_maxVal = 3000;
		}
		if (vte_alarm_maxVal == -1)
		{
			Unicode::strncpy(vte_alarm_big_maxBuffer, "Off", 3);
			vte_alarm_big_max.setWildcard1(vte_alarm_big_maxBuffer);
			vte_alarm_big_max.resizeToCurrentText();
			vte_alarm_big_max.invalidate();	
		}
		else
		{
			Unicode::snprintf(vte_alarm_big_maxBuffer, VTE_ALARM_BIG_MAX_SIZE, "%d", (int)vte_alarm_maxVal);
			vte_alarm_big_max.setWildcard1(vte_alarm_big_maxBuffer);
			vte_alarm_big_max.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go to min
		click_VteAlarmbtn();
	}
}

void screenView::handleVteMin()
{
	if (key1 != tmp)
	{
		if(vte_alarm_minVal == -1 && (vte_alarm_minVal + (float)(key1 - tmp)*10) > -1) vte_alarm_minVal = 50;
		else if(vte_alarm_minVal == 50 && (vte_alarm_minVal + (float)(key1 - tmp)*10) < 50) vte_alarm_minVal = -1;
		else vte_alarm_minVal = vte_alarm_minVal + (float)(key1 - tmp)*10;
		
		if (vte_alarm_minVal > 2990)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vte_alarm_minVal = -1;
		}
		else if (vte_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			vte_alarm_minVal = 2990;
		}
		if(vte_alarm_minVal == -1)
		{
			Unicode::strncpy(vte_alarm_big_minBuffer, "Off", 3);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_minBuffer);
			vte_alarm_big_min.resizeToCurrentText();
			vte_alarm_big_min.invalidate();			
		}
		else 
		{
			Unicode::snprintf(vte_alarm_big_minBuffer, VTE_ALARM_BIG_MIN_SIZE, "%d", (int)vte_alarm_minVal);
			vte_alarm_big_min.setWildcard1(vte_alarm_big_minBuffer);
			vte_alarm_big_min.invalidate();
		}
			
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go back
		click_VteAlarmbtn();
	}
}

void screenView::handleMViMax()
{
	if (key1 != tmp)
	{
		if (MVi_alarm_maxVal == -1 && (MVi_alarm_maxVal + (float)(key1 - tmp)) > -1) MVi_alarm_maxVal = 0.3;
		else if (MVi_alarm_maxVal == 0.3 && (MVi_alarm_maxVal + (float)(key1 - tmp)) < 0.3) MVi_alarm_maxVal = -1;
		else MVi_alarm_maxVal = MVi_alarm_maxVal + (float)(key1 - tmp);
		
		if (MVi_alarm_maxVal > 60)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVi_alarm_maxVal = -1;
		}
		else if (MVi_alarm_maxVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVi_alarm_maxVal = 60;
		}
		if(MVi_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVi_alarm_big_maxBuffer, "Off", 3);
			MVi_alarm_big_max.setWildcard1(MVi_alarm_big_maxBuffer);
			MVi_alarm_big_max.resizeToCurrentText();
			MVi_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_big_maxBuffer, MVI_ALARM_BIG_MAX_SIZE, "%d", (int)MVi_alarm_maxVal);
			MVi_alarm_big_max.setWildcard1(MVi_alarm_big_maxBuffer);
			MVi_alarm_big_max.invalidate();
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go to min
		click_MViAlarmbtn();
	}
}

void screenView::handleMViMin()
{
	if (key1 != tmp)
	{
		if (MVi_alarm_minVal == -1 && (MVi_alarm_minVal + (float)(key1 - tmp)) > -1) MVi_alarm_minVal = 0.2;
		else if (MVi_alarm_minVal == 0.2 && (MVi_alarm_minVal + (float)(key1 - tmp)) < 0.2) MVi_alarm_minVal = -1;
		else MVi_alarm_minVal = MVi_alarm_minVal + (float)(key1 - tmp);
		
		if (MVi_alarm_minVal > 59.9)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVi_alarm_minVal = -1;
		}
		else if (MVi_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVi_alarm_minVal = 59.9;
		}
		if (MVi_alarm_minVal == -1)
		{
			Unicode::strncpy(MVi_alarm_big_minBuffer, "Off", 3);
			MVi_alarm_big_min.setWildcard1(MVi_alarm_big_minBuffer);
			MVi_alarm_big_min.resizeToCurrentText();
			MVi_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(MVi_alarm_big_minBuffer, MVI_ALARM_BIG_MIN_SIZE, "%d", (int)MVi_alarm_minVal);
			MVi_alarm_big_min.setWildcard1(MVi_alarm_big_minBuffer);
			MVi_alarm_big_min.invalidate();
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go back
		click_MViAlarmbtn();
	}
}

void screenView::handleMVeMax()
{
	if (key1 != tmp)
	{
		if (MVe_alarm_maxVal == -1 && (MVe_alarm_maxVal + (float)(key1 - tmp)) > -1) MVe_alarm_maxVal = 0.3;
		else if (MVe_alarm_maxVal == 0.3 && (MVe_alarm_maxVal + (float)(key1 - tmp)) < 0.3) MVe_alarm_maxVal = -1;
		else MVe_alarm_maxVal = MVe_alarm_maxVal + (float)(key1 - tmp);
		
		if (MVe_alarm_maxVal > 60)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVe_alarm_maxVal = -1;
		}
		else if (MVe_alarm_maxVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVe_alarm_maxVal = 60;
		}
		
		if (MVe_alarm_maxVal == -1)
		{
			Unicode::strncpy(MVe_alarm_big_maxBuffer, "Off", 3);
			MVe_alarm_big_max.setWildcard1(MVe_alarm_big_maxBuffer);
			MVe_alarm_big_max.resizeToCurrentText();
			MVe_alarm_big_max.invalidate();
		}
		else
		{
			Unicode::snprintf(MVe_alarm_big_maxBuffer, MVE_ALARM_BIG_MAX_SIZE, "%d", (int)MVe_alarm_maxVal);
			MVe_alarm_big_max.setWildcard1(MVe_alarm_big_maxBuffer);
			MVe_alarm_big_max.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go to min
		click_MVeAlarmbtn();
	}
}

void screenView::handleMVeMin()
{
	if (key1 != tmp)
	{
		if (MVe_alarm_minVal == -1 && (MVe_alarm_minVal + (float)(key1 - tmp)) > -1) MVe_alarm_minVal = 0.2;
		else if (MVe_alarm_minVal == 0.2 && (MVe_alarm_minVal + (float)(key1 - tmp)) < 0.2) MVe_alarm_minVal = -1;
		else MVe_alarm_minVal = MVe_alarm_minVal + (float)(key1 - tmp);
		
		if (MVe_alarm_minVal > 59.9)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVe_alarm_minVal = -1;
		}
		else if (MVe_alarm_minVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			MVe_alarm_minVal = 59.9;
		}
		if (MVe_alarm_minVal == -1)
		{
			Unicode::strncpy(MVe_alarm_big_minBuffer, "Off", 3);
			MVe_alarm_big_min.setWildcard1(MVe_alarm_big_minBuffer);
			MVe_alarm_big_min.resizeToCurrentText();
			MVe_alarm_big_min.invalidate();
		}
		else
		{
			Unicode::snprintf(MVe_alarm_big_minBuffer, MVE_ALARM_BIG_MIN_SIZE, "%d", (int)MVe_alarm_minVal);
			MVe_alarm_big_min.setWildcard1(MVe_alarm_big_minBuffer);
			MVe_alarm_big_min.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		// go back
		click_MVeAlarmbtn();
	}
}

void screenView::handleFiO2Max()
{
	if (key1 != tmp)
	{
		if (FiO2_alarm_maxIntVal == -1 && (FiO2_alarm_maxIntVal + (float)(key1 - tmp)) > -1) FiO2_alarm_maxIntVal = 19;
		else if (FiO2_alarm_maxIntVal == 19 && (FiO2_alarm_maxIntVal + (float)(key1 - tmp)) < 19) FiO2_alarm_maxIntVal = -1;
		else FiO2_alarm_maxIntVal = FiO2_alarm_maxIntVal + (float)(key1 - tmp);
		
		if (FiO2_alarm_maxIntVal > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_alarm_maxIntVal = -1;
		}
		else if (FiO2_alarm_maxIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_alarm_maxIntVal = 100;
		}
		
		if (FiO2_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(FiO2_alarm_big_maxValBuffer, "Off", 3);
			FiO2_alarm_big_maxVal.setWildcard1(FiO2_alarm_big_maxValBuffer);
			FiO2_alarm_big_maxVal.resizeToCurrentText();
			FiO2_alarm_big_maxVal.invalidate();
		}
		else
		{
			Unicode::snprintf(FiO2_alarm_big_maxValBuffer, FIO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)FiO2_alarm_maxIntVal);
			FiO2_alarm_big_maxVal.setWildcard1(FiO2_alarm_big_maxValBuffer);
			FiO2_alarm_big_maxVal.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_FiO2Alarm();
	}
}

void screenView::handleFiO2Min()
{
	if (key1 != tmp)
	{
		if(FiO2_alarm_minIntVal == -1 && (FiO2_alarm_minIntVal + (float)(key1 - tmp)) > -1) FiO2_alarm_minIntVal = 18;
		else if(FiO2_alarm_minIntVal == 18 && (FiO2_alarm_minIntVal + (float)(key1 - tmp)) < 18) FiO2_alarm_minIntVal = -1;
		else FiO2_alarm_minIntVal = FiO2_alarm_minIntVal + (float)(key1 - tmp);
		
		if (FiO2_alarm_minIntVal > 99)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_alarm_minIntVal = -1;
		}
		else if (FiO2_alarm_minIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			FiO2_alarm_minIntVal = 99;
		}
		
		if(FiO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(FiO2_alarm_big_minValBuffer, "Off", 3);
			FiO2_alarm_big_minVal.setWildcard1(FiO2_alarm_big_minValBuffer);
			FiO2_alarm_big_minVal.resizeToCurrentText();
			FiO2_alarm_big_minVal.invalidate();	
		}
		else
		{
			Unicode::snprintf(FiO2_alarm_big_minValBuffer, FIO2_ALARM_BIG_MINVAL_SIZE, "%d", (int)FiO2_alarm_minIntVal);
			FiO2_alarm_big_minVal.setWildcard1(FiO2_alarm_big_minValBuffer);
			FiO2_alarm_big_minVal.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_FiO2Alarm();
	}
}

void screenView::handleSPO2Max()
{
	if (key1 != tmp)
	{
		if (SPO2_alarm_maxIntVal == -1 && (SPO2_alarm_maxIntVal + (float)(key1 - tmp)) > -1) SPO2_alarm_maxIntVal = 51;
		else if (SPO2_alarm_maxIntVal == 51 && (SPO2_alarm_maxIntVal + (float)(key1 - tmp)) < 51) SPO2_alarm_maxIntVal = -1;
		else SPO2_alarm_maxIntVal = SPO2_alarm_maxIntVal + (float)(key1 - tmp);
		
		if (SPO2_alarm_maxIntVal > 100)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SPO2_alarm_maxIntVal = -1;
		}
		else if (SPO2_alarm_maxIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SPO2_alarm_maxIntVal = 100;
		}
		
		if(SPO2_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_big_maxValBuffer, "Off", 3);
			SPO2_alarm_big_maxVal.setWildcard1(SPO2_alarm_big_maxValBuffer);
			SPO2_alarm_big_maxVal.resizeToCurrentText();
			SPO2_alarm_big_maxVal.invalidate();	
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_big_maxValBuffer, SPO2_ALARM_BIG_MAXVAL_SIZE, "%d", (int)SPO2_alarm_maxIntVal);
			SPO2_alarm_big_maxVal.setWildcard1(SPO2_alarm_big_maxValBuffer);
			SPO2_alarm_big_maxVal.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_SPO2Alarm();
	}
}

void screenView::handleSPO2Min()
{
	if (key1 != tmp)
	{
		if (SPO2_alarm_minIntVal == -1 && (SPO2_alarm_minIntVal + (float)(key1 - tmp)) > -1) SPO2_alarm_minIntVal = 50;
		else if (SPO2_alarm_minIntVal == 50 && (SPO2_alarm_minIntVal + (float)(key1 - tmp)) < 50) SPO2_alarm_minIntVal = -1;
		else SPO2_alarm_minIntVal = SPO2_alarm_minIntVal + (float)(key1 - tmp);
		
		if (SPO2_alarm_minIntVal > 99)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SPO2_alarm_minIntVal = -1;
		}
		else if (SPO2_alarm_minIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			SPO2_alarm_minIntVal = 99;
		}
		
		if (SPO2_alarm_minIntVal == -1)
		{
			Unicode::strncpy(SPO2_alarm_big_minValBuffer, "Off", 3);
			SPO2_alarm_big_minVal.setWildcard1(SPO2_alarm_big_minValBuffer);
			SPO2_alarm_big_minVal.resizeToCurrentText();
			SPO2_alarm_big_minVal.invalidate();	
		}
		else
		{
			Unicode::snprintf(SPO2_alarm_big_minValBuffer, SPO2_ALARM_BIG_MINVAL_SIZE, "%d", (int)SPO2_alarm_minIntVal);
			SPO2_alarm_big_minVal.setWildcard1(SPO2_alarm_big_minValBuffer);
			SPO2_alarm_big_minVal.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_SPO2Alarm();
	}
}


void screenView::handleLeakMax()
{
	if (key1 != tmp)
	{
		if (Leak_alarm_maxIntVal == -1 && (Leak_alarm_maxIntVal + (int)(key1 - tmp)) > -1) Leak_alarm_maxIntVal = 20;
		else if (Leak_alarm_maxIntVal == 20 && (Leak_alarm_maxIntVal + (int)(key1 - tmp)) < 20) Leak_alarm_maxIntVal = -1;
		else Leak_alarm_maxIntVal = Leak_alarm_maxIntVal + (int)(key1 - tmp);
		
		if (Leak_alarm_maxIntVal > 80)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Leak_alarm_maxIntVal = -1;
		}
		else if (Leak_alarm_maxIntVal < -1)
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			key1 = 0;
			encoderCounter = 0;
			tmp = 0;
			Leak_alarm_maxIntVal = 80;
		}
		
		if(Leak_alarm_maxIntVal == -1)
		{
			Unicode::strncpy(Leak_alarm_big_maxBuffer, "Off", 3);
			Leak_alarm_big_max.setWildcard1(Leak_alarm_big_maxBuffer);
			Leak_alarm_big_max.resizeToCurrentText();
			Leak_alarm_big_max.invalidate();	
		}
		else
		{
			Unicode::snprintf(Leak_alarm_big_maxBuffer, LEAK_ALARM_BIG_MAX_SIZE, "%d", (int)Leak_alarm_maxIntVal);
			Leak_alarm_big_max.setWildcard1(Leak_alarm_big_maxBuffer);
			Leak_alarm_big_max.invalidate();
		}
		
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
	}
	if (pressKey == 1)
	{
		click_leakAlarm();
	}
}


void screenView::handleLowPEEP()
{
	if (key1 != tmp)
	{
		isLowPEEP_alarm = !isLowPEEP_alarm;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		
		if(isLowPEEP_alarm)
		{
			LowPEEP_alarm_big_Off.setVisible(false);
			LowPEEP_alarm_big_Off.invalidate();
			LowPEEP_alarm_big_ON.setVisible(true);
			LowPEEP_alarm_big_ON.invalidate();
		}
		else
		{
			LowPEEP_alarm_big_Off.setVisible(true);
			LowPEEP_alarm_big_Off.invalidate();
			LowPEEP_alarm_big_ON.setVisible(false);
			LowPEEP_alarm_big_ON.invalidate();
		}
	}
	if (pressKey == 1)
	{
		click_lowPEEP();
	}
}



void screenView::handleApneaAlaram()
{
	if (key1 == 0)
	{
		if (!selector_backApneaAlarmSetting.isVisible())
		{
			selector_backApneaAlarmSetting.setVisible(true);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (selector_toggleApneaAlarmSetting.isVisible())
		{
			selector_toggleApneaAlarmSetting.setVisible(false);
			selector_toggleApneaAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			click_backApneaAlarm();
		}
	}
	else if (key1 == 1)
	{
		if (selector_backApneaAlarmSetting.isVisible())
		{
			selector_backApneaAlarmSetting.setVisible(false);
			selector_backApneaAlarmSetting.invalidate();
		}
		if (!selector_toggleApneaAlarmSetting.isVisible())
		{
			selector_toggleApneaAlarmSetting.setVisible(true);
			selector_toggleApneaAlarmSetting.invalidate();
		}
		if (pressKey == 1)
		{
			isLoading = true;
			click_toggleApnea();
		}
	}
	else if(key1>1)
	{
		key1=0;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
	else if(key1<0)
	{
		key1=1;
		encoderCounter = key1*4 + 1;
		__HAL_TIM_SET_COUNTER(&htim3, encoderCounter);
	}
}

void screenView::handleDay()
{
	if (key1 != tmp)
	{
		RTC_Date.Date = RTC_Date.Date + (key1 - tmp);
		if(RTC_Date.Date>31)
		{
			RTC_Date.Date = 1;
		}
		else if(RTC_Date.Date<1)
		{
			RTC_Date.Date = 31;
		}

		date[0] = (char)(RTC_Date.Date / 10) + 48;
		date[1] = (RTC_Date.Date % 10) + 48;
		date[2] = ' ';
		char a[2];
		a[0] = date[0];
		a[1] = date[1];

		Unicode::strncpy(day_settingBuffer, a, 2);
		//		day_setting.resizeToCurrentText();
		day_setting.invalidate();
		tmp = key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	if (pressKey == 1)
	{
		click_date();
	}
}

void screenView::handleMonth()
{
	if (key1 != tmp)
	{
		if (RTC_Date.Month + (key1 - tmp) > 12)
			RTC_Date.Month = 1;
		else if (RTC_Date.Month + (key1 - tmp) < 1)
			RTC_Date.Month = 12;
		else
			RTC_Date.Month = RTC_Date.Month + (key1 - tmp);

		uint8_t month = (RTC_Date.Month / 10 * 10) + (RTC_Date.Month % 10);

		switch (month)
		{
		case 1:
		{
			date[3] = 'J';
			date[4] = 'a';
			date[5] = 'n';
			break;
		}
		case 2:
		{
			date[3] = 'F';
			date[4] = 'e';
			date[5] = 'b';
			break;
		}
		case 3:
		{
			date[3] = 'M';
			date[4] = 'a';
			date[5] = 'r';
			break;
		}
		case 4:
		{
			date[3] = 'A';
			date[4] = 'p';
			date[5] = 'r';
			break;
		}
		case 5:
		{
			date[3] = 'M';
			date[4] = 'a';
			date[5] = 'y';
			break;
		}
		case 6:
		{
			date[3] = 'J';
			date[4] = 'u';
			date[5] = 'n';
			break;
		}
		case 7:
		{
			date[3] = 'J';
			date[4] = 'u';
			date[5] = 'l';
			break;
		}
		case 8:
		{
			date[3] = 'A';
			date[4] = 'u';
			date[5] = 'g';
			break;
		}
		case 9:
		{
			date[3] = 'S';
			date[4] = 'e';
			date[5] = 'p';
			break;
		}
		case 10:
		{
			date[3] = 'O';
			date[4] = 'c';
			date[5] = 't';
			break;
		}
		case 11:
		{
			date[3] = 'N';
			date[4] = 'o';
			date[5] = 'v';
			break;
		}
		case 12:
		{
			date[3] = 'D';
			date[4] = 'e';
			date[5] = 'c';
			break;
		}
		}
		char a[3];
		a[0] = date[3];
		a[1] = date[4];
		a[2] = date[5];
		Unicode::strncpy(month_settingBuffer, a, 3);
		//		month_setting.resizeToCurrentText();
		month_setting.invalidate();
		tmp = key1;
	}
	if (pressKey == 1)
	{
		click_date();
	}
}

void screenView::handleYear()
{
	if (key1 != tmp)
	{
		RTC_Date.Year = RTC_Date.Year + (key1 - tmp);
		date[7] = '2';
		date[8] = '0';
		date[9] = (char)(RTC_Date.Year / 10) + 48;
		date[10] = (char)(RTC_Date.Year % 10) + 48;
		char a[4];
		a[0] = date[7];
		a[1] = date[8];
		a[2] = date[9];
		a[3] = date[10];

		Unicode::strncpy(year_settingBuffer, a, 4);
		//		year_setting.resizeToCurrentText();
		year_setting.invalidate();
		tmp = key1;
	}
	if (pressKey == 1)
	{
		click_date();
	}
}
void screenView::handleWeek()
{
	if (key1 != tmp)
	{
		RTC_Date.WeekDay = RTC_Date.WeekDay + (key1 - tmp);

		char w[3];
		switch (RTC_Date.WeekDay)
		{
		case RTC_WEEKDAY_MONDAY:
		{
			w[0] = 'M';
			w[1] = 'o';
			w[2] = 'n';
			break;
		}
		case RTC_WEEKDAY_TUESDAY: // tuesday
		{
			w[0] = 'T';
			w[1] = 'u';
			w[2] = 'e';
			break;
		}
		case RTC_WEEKDAY_WEDNESDAY:
		{
			w[0] = 'W';
			w[1] = 'e';
			w[2] = 'd';
			break;
		}
		case RTC_WEEKDAY_THURSDAY:
		{
			w[0] = 'T';
			w[1] = 'h';
			w[2] = 'u';
			break;
		}
		case RTC_WEEKDAY_FRIDAY:
		{
			w[0] = 'F';
			w[1] = 'r';
			w[2] = 'i';
			break;
		}
		case RTC_WEEKDAY_SATURDAY:
		{
			w[0] = 'S';
			w[1] = 'a';
			w[2] = 't';
			break;
		}
		case RTC_WEEKDAY_SUNDAY:
		{
			w[0] = 'S';
			w[1] = 'u';
			w[2] = 'n';
			break;
		}
		}
		Unicode::strncpy(week_settingBuffer, w, 3);
		//		week_setting.resizeToCurrentText();
		week_setting.invalidate();
		tmp = key1;
	}
	if (pressKey == 1)
	{
		click_date();
	}
}

void screenView::handleHours()
{
	if (key1 != tmp)
	{
		int h = digitalClock_setting.getCurrentHour24() + (key1 - tmp);
		if(h<0)
			h=23;
		digitalClock_setting.setTime24Hour(h, digitalClock_setting.getCurrentMinute(), 30); //	setValue(audio_slider.getValue() + (key1-tmp)*10);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		//		if (digitalClock_setting.getCurrentHour24() < 0)
		//		{
		//			digitalClock_setting.setTime24Hour(23, digitalClock_setting.getCurrentMinute(), 30);
		//			h = 23;
		//			__HAL_TIM_SET_COUNTER(&htim3, 0);
		//			key1 = 0;
		//			encoderCounter = 0;
		//			tmp = 0;
		//		}
	}
	if (pressKey == 1)
	{
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		h = digitalClock_setting.getCurrentHour();
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(true);
		selector_minutes.invalidate();
		state = MINUTES;
	}
}

void screenView::handleMinutes()
{
	if (key1 != tmp)
	{
		int m = digitalClock_setting.getCurrentMinute() + (key1 - tmp);
		if(m<0)
			m=59;
		digitalClock_setting.setTime24Hour(digitalClock_setting.getCurrentHour24(), m, 30); //	setValue(audio_slider.getValue() + (key1-tmp)*10);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		//		if (digitalClock_setting.getCurrentMinute() < 0)
		//		{
		//			digitalClock_setting.setTime24Hour(digitalClock_setting.getCurrentHour24(), 59, 30);
		//			m = 59;
		//			__HAL_TIM_SET_COUNTER(&htim3, 0);
		//			key1 = 0;
		//			encoderCounter = 0;
		//			tmp = 0;
		//		}
	}
	if (pressKey == 1)
	{
		isLoading = true;
		pressKey = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		encoderCounter = 0;
		key1 = 0;
		tmp = 0;
		m = digitalClock_setting.getCurrentMinute();
		// saving time to RTC clock
		RTC_Time.Hours = h;
		RTC_Time.Minutes = m;
		RTC_Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
		RTC_Time.StoreOperation = RTC_STOREOPERATION_RESET;
		if (HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN) != HAL_OK)
		{
			Error_Handler();
		}
		selector_hours.setVisible(false);
		selector_hours.invalidate();
		selector_minutes.setVisible(false);
		selector_minutes.invalidate();
		digitalClock_setting.setColor(Color::getColorFromRGB(71, 71, 71)); // default was (71, 71, 71)
		digitalClock_setting.invalidate();
		state = DEVICE;
	}
}

void screenView::handleLanguage()
{
	if (key1 == 0)
	{
		if (!selector_languageEnglish.isVisible())
		{
			selector_languageEnglish.setVisible(true);
			selector_languageEnglish.invalidate();
		}
		if (selector_languageArabic.isVisible())
		{
			selector_languageArabic.setVisible(false);
			selector_languageArabic.invalidate();
		}
		if (pressKey == 1)
		{
			isLoading = true;
			selector_languageEnglish.setVisible(false);
			selector_languageEnglish.invalidate();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			radioButtonGroup1.setSelected(radioButton_english);
			text_arabic.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			text_arabic.invalidate();
			arb_text_arabic.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			arb_text_arabic.invalidate();
			text_english.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			text_english.invalidate();
			arb_text_english.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			arb_text_english.invalidate();
			state = DEVICE;
			// code for English
			//			click_english(); dont need
		}
	}
	else if (key1 == 1)
	{
		if (selector_languageEnglish.isVisible())
		{
			selector_languageEnglish.setVisible(false);
			selector_languageEnglish.invalidate();
		}
		if (!selector_languageArabic.isVisible())
		{
			selector_languageArabic.setVisible(true);
			selector_languageArabic.invalidate();
		}
		if (pressKey == 1)
		{
			isLoading = true;
			selector_languageArabic.setVisible(false);
			selector_languageArabic.invalidate();
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			radioButtonGroup1.setSelected(radioButton_arabic);
			text_english.setColor(Color::getColorFromRGB(84, 82, 82)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			text_english.invalidate();
			text_arabic.setColor(Color::getColorFromRGB(181, 181, 181)); // rgb(181,181,181) ->white | rgb(84,82,82) ->grey
			text_arabic.invalidate();
			state = DEVICE;
			// code for Arabic
			//			click_arabic(); dont need
		}
	}
	else if (key1 > 1)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 1;
		encoderCounter = 4;
		__HAL_TIM_SET_COUNTER(&htim3, 4);
	}
}

void screenView::save_ventHours()
{
	// un used
	W25Q256FV_QSPI_Write(&hqspi, (uint8_t *)vent_hours, pointerVentHours++, sizeof(vent_hours));
}
void screenView::save_ventMinutes()
{
	W25Q256FV_QSPI_Write(&hqspi, vent_minutes, pointerVentHours++, sizeof(vent_minutes));
}

uint32_t screenView::findNextEmptyQSPI(uint32_t startPoint, uint32_t point, uint32_t endPoint)
{
    const uint32_t bufferSize = 100;
    uint8_t test[bufferSize];
    
    for (uint32_t i = 0; i < 1000000; i += bufferSize)
    {
        memset(test, 0, sizeof(test)); // clear the buffer
        
        // Calculate the current address based on the circular range
        uint32_t currentAddress = (point-startPoint + i) % (endPoint - startPoint) + startPoint;
        
        // Adjust the buffer size if it goes beyond the end of the circular range
        uint32_t remainingBytes = endPoint - currentAddress;
        uint32_t bytesToRead = (remainingBytes < bufferSize) ? remainingBytes : bufferSize;
        
        W25Q256FV_QSPI_Read(&hqspi, test, currentAddress, bytesToRead);
        for(int j = 0; j < bytesToRead; j++)
        {
            if (test[j] == 255 && j+1<bytesToRead && test[j+1] == 255)
            {
                return currentAddress + j;
            }
        }
    }
    return 0;
}


void screenView::disableMainChoose()
{
	if (selector_startPause.isVisible())
	{
		selector_startPause.setVisible(false);
		selector_startPause.invalidate();
	}
	else if (selector_setting.isVisible())
	{
		selector_setting.setVisible(false);
		selector_setting.invalidate();
	}
	else if (selector_monitor.isVisible())
	{
		selector_monitor.setVisible(false);
		selector_monitor.invalidate();
	}
	else if (selector_FiO2.isVisible())
	{
		selector_FiO2.setVisible(false);
		selector_FiO2.invalidate();
	}
	else if (selector_IE.isVisible())
	{
		selector_IE.setVisible(false);
		selector_IE.invalidate();
	}
	else if (selector_PEEP.isVisible())
	{
		selector_PEEP.setVisible(false);
		selector_PEEP.invalidate();
	}
	else if (selector_PIP.isVisible())
	{
		selector_PIP.setVisible(false);
		selector_PIP.invalidate();
	}
	else if (selector_VT.isVisible())
	{
		selector_VT.setVisible(false);
		selector_VT.invalidate();
	}
	else if (selector_RR.isVisible())
	{
		selector_RR.setVisible(false);
		selector_RR.invalidate();
	}
	else if (selector_flow.isVisible())
	{
		selector_flow.setVisible(false);
		selector_flow.invalidate();
	}
	else if (selector_Ti.isVisible())
	{
		selector_Ti.setVisible(false);
		selector_Ti.invalidate();
	}
	else if (selector_trigger.isVisible())
	{
		selector_trigger.setVisible(false);
		selector_trigger.invalidate();
	}
	else if (selector_riseTime.isVisible())
	{
		selector_riseTime.setVisible(false);
		selector_riseTime.invalidate();
	}
	else if (selector_cyclingOff.isVisible())
	{
		selector_cyclingOff.setVisible(false);
		selector_cyclingOff.invalidate();
	}
	else if (selector_sensitivity.isVisible())
	{
		selector_sensitivity.setVisible(false);
		selector_sensitivity.invalidate();
	}
	else if (selector_PS.isVisible())
	{
		selector_PS.setVisible(false);
		selector_PS.invalidate();
	}
}
void screenView::disableVentSettingChoose()
{
	if (selector_VT_ventSetting.isVisible())
	{
		selector_VT_ventSetting.setVisible(false);
		selector_VT_ventSetting.invalidate();
		VT_val_big_ventSetting.setVisible(false);
		VT_val_big_ventSetting.invalidate();
		VT_val_ventSetting.setVisible(true);
		VT_val_ventSetting.invalidate();
	}
	if (selector_RR_ventSetting.isVisible())
	{
		selector_RR_ventSetting.setVisible(false);
		selector_RR_ventSetting.invalidate();
		RR_val_big_ventSetting.setVisible(false);
		RR_val_big_ventSetting.invalidate();
		RR_val_ventSetting.setVisible(true);
		RR_val_ventSetting.invalidate();
	}
	if (selector_PControl_ventSetting.isVisible())
	{
		selector_PControl_ventSetting.setVisible(false);
		selector_PControl_ventSetting.invalidate();
		PControl_val_big_ventSetting.setVisible(false);
		PControl_val_big_ventSetting.invalidate();
		PControl_val_ventSetting.setVisible(true);
		PControl_val_ventSetting.invalidate();
	}
	if (selector_PControlMax_ventSetting.isVisible())
	{
		selector_PControlMax_ventSetting.setVisible(false);
		selector_PControlMax_ventSetting.invalidate();
		PControlMax_val_big_ventSetting.setVisible(false);
		PControlMax_val_big_ventSetting.invalidate();
		PControlMax_val_ventSetting.setVisible(true);
		PControlMax_val_ventSetting.invalidate();
	}
	if (selector_PEEP_ventSetting.isVisible())
	{
		selector_PEEP_ventSetting.setVisible(false);
		selector_PEEP_ventSetting.invalidate();
		PEEP_val_big_ventSetting.setVisible(false);
		PEEP_val_big_ventSetting.invalidate();
		PEEP_val_ventSetting.setVisible(true);
		PEEP_val_ventSetting.invalidate();
	}
	if (selector_Ti_ventSetting.isVisible())
	{
		selector_Ti_ventSetting.setVisible(false);
		selector_Ti_ventSetting.invalidate();
		Ti_val_big_ventSetting.setVisible(false);
		Ti_val_big_ventSetting.invalidate();
		Ti_val_ventSetting.setVisible(true);
		Ti_val_ventSetting.invalidate();
	}
	if (selector_TiMax_ventSetting.isVisible())
	{
		selector_TiMax_ventSetting.setVisible(false);
		selector_TiMax_ventSetting.invalidate();
		TiMax_val_big_ventSetting.setVisible(false);
		TiMax_val_big_ventSetting.invalidate();
		TiMax_val_ventSetting.setVisible(true);
		TiMax_val_ventSetting.invalidate();
	}
	if (selector_TiMin_ventSetting.isVisible())
	{
		selector_TiMin_ventSetting.setVisible(false);
		selector_TiMin_ventSetting.invalidate();
		TiMin_val_big_ventSetting.setVisible(false);
		TiMin_val_big_ventSetting.invalidate();
		TiMin_val_ventSetting.setVisible(true);
		TiMin_val_ventSetting.invalidate();
	}
	if (selector_safetyVT_ventSetting.isVisible())
	{
		selector_safetyVT_ventSetting.setVisible(false);
		selector_safetyVT_ventSetting.invalidate();
		SafetyVT_val_big_ventSetting.setVisible(false);
		SafetyVT_val_big_ventSetting.invalidate();
		SafetyVT_val_ventSetting.setVisible(true);
		SafetyVT_val_ventSetting.invalidate();
	}
	if (selector_TiInspPause_ventSetting.isVisible())
	{
		selector_TiInspPause_ventSetting.setVisible(false);
		selector_TiInspPause_ventSetting.invalidate();
		TiInspPause_val_big_ventSetting.setVisible(false);
		TiInspPause_val_big_ventSetting.invalidate();
		TiInspPause_val_ventSetting.setVisible(true);
		TiInspPause_val_ventSetting.invalidate();
	}
	if (selector_FiO2_ventSetting.isVisible())
	{
		selector_FiO2_ventSetting.setVisible(false);
		selector_FiO2_ventSetting.invalidate();
		FiO2_val_big_ventSetting.setVisible(false);
		FiO2_val_big_ventSetting.invalidate();
		FiO2_val_ventSetting.setVisible(true);
		FiO2_val_ventSetting.invalidate();
	}
	if (selector_PS_ventSetting.isVisible())
	{
		selector_PS_ventSetting.setVisible(false);
		selector_PS_ventSetting.invalidate();
		PS_val_big_ventSetting.setVisible(false);
		PS_val_big_ventSetting.invalidate();
		PS_val_ventSetting.setVisible(true);
		PS_val_ventSetting.invalidate();
	}
	if (selector_PSMax_ventSetting.isVisible())
	{
		selector_PSMax_ventSetting.setVisible(false);
		selector_PSMax_ventSetting.invalidate();
		PSMax_val_big_ventSetting.setVisible(false);
		PSMax_val_big_ventSetting.invalidate();
		PSMax_val_ventSetting.setVisible(true);
		PSMax_val_ventSetting.invalidate();
	}
	if (selector_riseTime_ventSetting.isVisible())
	{
		selector_riseTime_ventSetting.setVisible(false);
		selector_riseTime_ventSetting.invalidate();
		riseTime_val_big_ventSetting.setVisible(false);
		riseTime_val_big_ventSetting.invalidate();
		riseTime_val_ventSetting.setVisible(true);
		riseTime_val_ventSetting.invalidate();
	}
	if (selector_cyclingOff_ventSetting.isVisible())
	{
		selector_cyclingOff_ventSetting.setVisible(false);
		selector_cyclingOff_ventSetting.invalidate();
		cyclingOff_val_big_ventSetting.setVisible(false);
		cyclingOff_val_big_ventSetting.invalidate();
		cyclingOff_val_ventSetting.setVisible(true);
		cyclingOff_val_ventSetting.invalidate();
	}
	if (selector_trigger_ventSetting.isVisible())
	{
		selector_trigger_ventSetting.setVisible(false);
		selector_trigger_ventSetting.invalidate();
		if (trigger_val_flow_big_ventSetting.isVisible())
		{
			trigger_val_flow_big_ventSetting.setVisible(false);
			trigger_val_flow_big_ventSetting.invalidate();
			trigger_val_flow_ventSetting.setVisible(true);
			trigger_val_flow_ventSetting.invalidate();
		}
		else
		{
			trigger_val_pressure_big_ventSetting.setVisible(false);
			trigger_val_pressure_big_ventSetting.invalidate();
			trigger_val_pressure_ventSetting.setVisible(true);
			trigger_val_pressure_ventSetting.invalidate();
		}
	}
	if (selector_sens_ventSetting.isVisible())
	{
		selector_sens_ventSetting.setVisible(false);
		selector_sens_ventSetting.invalidate();
		sensivity_val_big_ventSetting.setVisible(false);
		sensivity_val_big_ventSetting.invalidate();
		sensivity_val_ventSetting.setVisible(true);
		sensivity_val_ventSetting.invalidate();
	}
	if (selector_IPAP_ventSetting.isVisible())
	{
		selector_IPAP_ventSetting.setVisible(false);
		selector_IPAP_ventSetting.invalidate();
		IPAP_val_big_ventSetting.setVisible(false);
		IPAP_val_big_ventSetting.invalidate();
		IPAP_val_ventSetting.setVisible(true);
		IPAP_val_ventSetting.invalidate();
	}
	if (selector_IPAPMax_ventSetting.isVisible())
	{
		selector_IPAPMax_ventSetting.setVisible(false);
		selector_IPAPMax_ventSetting.invalidate();
		IPAPMax_val_big_ventSetting.setVisible(false);
		IPAPMax_val_big_ventSetting.invalidate();
		IPAPMax_val_ventSetting.setVisible(true);
		IPAPMax_val_ventSetting.invalidate();
	}
	if (selector_EPAP_ventSetting.isVisible())
	{
		selector_EPAP_ventSetting.setVisible(false);
		selector_EPAP_ventSetting.invalidate();
		EPAP_val_big_ventSetting.setVisible(false);
		EPAP_val_big_ventSetting.invalidate();
		EPAP_val_ventSetting.setVisible(true);
		EPAP_val_ventSetting.invalidate();
	}
	if (selector_CPAP_ventSetting_1.isVisible())
	{
		selector_CPAP_ventSetting_1.setVisible(false);
		selector_CPAP_ventSetting_1.invalidate();
		CPAP_val_big_ventSetting_1.setVisible(false);
		CPAP_val_big_ventSetting_1.invalidate();
		CPAP_val_ventSetting.setVisible(true);
		CPAP_val_ventSetting.invalidate();
	}
}

void screenView::disableVentSettingChoose2()
{
	if(CMVPCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(CMVVCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(ACVCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(ACPCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(SIMVVCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(SIMVPCV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(PSV_big_txt.isVisible())
	{
		click_mode();
	}
	else if(CPAP_big_txt.isVisible())
	{
		click_mode();
	}
	else if(BiPAP_big_txt.isVisible())
	{
		click_mode();
	}
	else if(CPR_big_txt.isVisible())
	{
		click_mode();
	}
	
	if (selector_VT_ventSetting.isVisible())
	{
		selector_VT_ventSetting.setVisible(false);
		selector_VT_ventSetting.invalidate();
	}
	if (selector_RR_ventSetting.isVisible())
	{
		selector_RR_ventSetting.setVisible(false);
		selector_RR_ventSetting.invalidate();
	}
	if (selector_PControl_ventSetting.isVisible())
	{
		selector_PControl_ventSetting.setVisible(false);
		selector_PControl_ventSetting.invalidate();
	}
	if (selector_PControlMax_ventSetting.isVisible())
	{
		selector_PControlMax_ventSetting.setVisible(false);
		selector_PControlMax_ventSetting.invalidate();
	}
	if (selector_PEEP_ventSetting.isVisible())
	{
		selector_PEEP_ventSetting.setVisible(false);
		selector_PEEP_ventSetting.invalidate();
	}
	if (selector_Ti_ventSetting.isVisible())
	{
		selector_Ti_ventSetting.setVisible(false);
		selector_Ti_ventSetting.invalidate();
	}
	if (selector_TiMax_ventSetting.isVisible())
	{
		selector_TiMax_ventSetting.setVisible(false);
		selector_TiMax_ventSetting.invalidate();
	}
	if (selector_TiMin_ventSetting.isVisible())
	{
		selector_TiMin_ventSetting.setVisible(false);
		selector_TiMin_ventSetting.invalidate();
	}
	if (selector_safetyVT_ventSetting.isVisible())
	{
		selector_safetyVT_ventSetting.setVisible(false);
		selector_safetyVT_ventSetting.invalidate();
	}
	if (selector_TiInspPause_ventSetting.isVisible())
	{
		selector_TiInspPause_ventSetting.setVisible(false);
		selector_TiInspPause_ventSetting.invalidate();
	}
	if (selector_FiO2_ventSetting.isVisible())
	{
		selector_FiO2_ventSetting.setVisible(false);
		selector_FiO2_ventSetting.invalidate();
	}
	if (selector_PS_ventSetting.isVisible())
	{
		selector_PS_ventSetting.setVisible(false);
		selector_PS_ventSetting.invalidate();
	}
	if (selector_PSMax_ventSetting.isVisible())
	{
		selector_PSMax_ventSetting.setVisible(false);
		selector_PSMax_ventSetting.invalidate();
	}
	if (selector_riseTime_ventSetting.isVisible())
	{
		selector_riseTime_ventSetting.setVisible(false);
		selector_riseTime_ventSetting.invalidate();
	}
	if (selector_cyclingOff_ventSetting.isVisible())
	{
		selector_cyclingOff_ventSetting.setVisible(false);
		selector_cyclingOff_ventSetting.invalidate();
	}
	if (selector_trigger_ventSetting.isVisible())
	{
		selector_trigger_ventSetting.setVisible(false);
		selector_trigger_ventSetting.invalidate();
	}
	if (selector_sens_ventSetting.isVisible())
	{
		selector_sens_ventSetting.setVisible(false);
		selector_sens_ventSetting.invalidate();
	}
	if (selector_flowShape_ventSetting.isVisible())
	{
		selector_flowShape_ventSetting.setVisible(false);
		selector_flowShape_ventSetting.invalidate();
	}
	if (selector_IPAP_ventSetting.isVisible())
	{
		selector_IPAP_ventSetting.setVisible(false);
		selector_IPAP_ventSetting.invalidate();
	}
	if (selector_IPAPMax_ventSetting.isVisible())
	{
		selector_IPAPMax_ventSetting.setVisible(false);
		selector_IPAPMax_ventSetting.invalidate();
	}
	if (selector_EPAP_ventSetting.isVisible())
	{
		selector_EPAP_ventSetting.setVisible(false);
		selector_EPAP_ventSetting.invalidate();
	}
	if (selector_CPAP_ventSetting_1.isVisible())
	{
		selector_CPAP_ventSetting_1.setVisible(false);
		selector_CPAP_ventSetting_1.invalidate();
	}
}

void screenView::handleSilent()
{
	if(silent_intval==1)
	{
		if(!mute_val.isVisible())
		{
			alarmMute_counter = 60;
			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
			
			image_mute_bar.setVisible(true);
			image_mute_bar.invalidate();
			mute_val.setVisible(true);
			mute_val.invalidate();
		}		
	}
	else
	{
		if(mute_val.isVisible())
		{
			image_mute_bar.setVisible(false);
			image_mute_bar.invalidate();
			mute_val.setVisible(false);
			mute_val.invalidate();
		}		
	}
		
}
void screenView::updateIdealWeightParameter()
{
	int idealWeight = weight_intval;
	
	PEEP_intval = 5;
	FiO2_intval = 21;
	
	if(idealWeight <= 5)
	{
		RR_intval = 35;
		VT_intval = 50;
		PControl_intval = 15;
	}
	else if(idealWeight <= 10)
	{
		RR_intval = 30;
		VT_intval = 70;
		PControl_intval = 15;
	}
	else if(idealWeight <= 15)
	{
		RR_intval = 23;
		VT_intval = 100;
		PControl_intval = 15;
	}
	else if(idealWeight <= 20)
	{
		RR_intval = 20;
		VT_intval = 120;
		PControl_intval = 20;
	}
	else if(idealWeight <= 30)
	{
		RR_intval = 18;
		VT_intval = 180;
		PControl_intval = 20;
	}
	else if(idealWeight <= 40)
	{
		RR_intval = 16;
		VT_intval = 240;
		PControl_intval = 20;
	}
	else if(idealWeight <= 50)
	{
		RR_intval = 14;
		VT_intval = 300;
		PControl_intval = 20;
	}
	else if(idealWeight <= 60)
	{
		RR_intval = 12;
		VT_intval = 360;
		PControl_intval = 20;
	}
	else
	{
		RR_intval = 12;
		VT_intval = 450;
		PControl_intval = 20;
	}
	
	Ti_intval = 60/RR_intval/3; // 1/3 of time for Ti and the rest and 2/3 is for Te (I/E:1/2)
	updateConfigsWildCards();
}
void screenView::handleAlert()
{
	if (key1 == 0)
	{
		pressKey = 0;
		if (selector_cancelAlertScreen.isVisible())
		{
			selector_cancelAlertScreen.setVisible(false);
			selector_cancelAlertScreen.invalidate();
		}
		if (selector_yesAlertScreen.isVisible())
		{
			selector_yesAlertScreen.setVisible(false);
			selector_yesAlertScreen.invalidate();
		}
	}
	else if (key1 == 1)
	{
		if (!selector_cancelAlertScreen.isVisible())
		{
			selector_cancelAlertScreen.setVisible(true);
			selector_cancelAlertScreen.invalidate();
		}
		if (selector_yesAlertScreen.isVisible())
		{
			selector_yesAlertScreen.setVisible(false);
			selector_yesAlertScreen.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			click_cancelAlert();
		}
	}
	else if (key1 == 2)
	{
		if (selector_cancelAlertScreen.isVisible())
		{
			selector_cancelAlertScreen.setVisible(false);
			selector_cancelAlertScreen.invalidate();
		}
		if (!selector_yesAlertScreen.isVisible())
		{
			selector_yesAlertScreen.setVisible(true);
			selector_yesAlertScreen.invalidate();
		}
		if (pressKey == 1)
		{
			pressKey = 0;
			key1 = 0;
			encoderCounter = 0;
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			click_yesAlert();
		}
	}
	else if (key1 > 2)
	{
		key1 = 0;
		encoderCounter = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	else if (key1 < 0)
	{
		key1 = 2;
		encoderCounter = 8+1;
		__HAL_TIM_SET_COUNTER(&htim3, 8+1);
	}
}
void screenView::showAlert()
{
	isAlerting = 1;
	container_alert.setVisible(true);
	container_alert.invalidate();
	
	if(lastButton == WEIGHT_BUTTON)
	{
		if(isArabic)
		{
			alertMessage_arbConfigs.setVisible(true);
			alertMessage_arbConfigs.invalidate();
			
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
		}
		else
		{
			alertMessage_configs.setVisible(true);
			alertMessage_configs.invalidate();
			
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
		}
	}
	else if(lastButton == UNLOCK_BUTTON)
	{
		// it is going to be changed to locked
		if(isArabic)
		{
			alertMessage_arbLock.setVisible(true);
			alertMessage_arbLock.invalidate();
			
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
		}
		else
		{
			alertMessage_lock.setVisible(true);
			alertMessage_lock.invalidate();
			
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
		}
	}
	else if(lastButton == LOCK_BUTTON)
	{
		// it is going to be changed to Unlocked
		lockScreen_intval = 0;
		if(isArabic)
		{
			alertMessage_arbUnlock.setVisible(true);
			alertMessage_arbUnlock.invalidate();
			
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
		}
		else
		{
			alertMessage_unlock.setVisible(true);
			alertMessage_unlock.invalidate();
			
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
		}
	}	
	else if(lastButton == STOPVENT_BUTTON)
	{
		if(isArabic)
		{
			alertMessage_arbStopVent.setVisible(true);
			alertMessage_arbStopVent.invalidate();
			
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
		}
		else
		{
			alertMessage_stopVent.setVisible(true);
			alertMessage_stopVent.invalidate();
			
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
		}
	}
	else if(lastButton == CIRCUITSETTING_BUTTON)
	{
		if(isArabic)
		{
			alertMessage_arbStopVent.setVisible(true);
			alertMessage_arbStopVent.invalidate();
			
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
		}
		else
		{
			alertMessage_stopVent.setVisible(true);
			alertMessage_stopVent.invalidate();
			
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
		}
	}
	else if(lastButton == CPR_BUTTON)
	{
		if(isArabic)
		{
			alertMessage_arbCPR.setVisible(true);
			alertMessage_arbCPR.invalidate();
			
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
		}
		else
		{
			alertMessage_CPR.setVisible(true);
			alertMessage_CPR.invalidate();
			
			alertMessage_stopVent.setVisible(false);
			alertMessage_stopVent.invalidate();
			alertMessage_unlock.setVisible(false);
			alertMessage_unlock.invalidate();
			alertMessage_configs.setVisible(false);
			alertMessage_configs.invalidate();
			alertMessage_arbConfigs.setVisible(false);
			alertMessage_arbConfigs.invalidate();
			alertMessage_arbLock.setVisible(false);
			alertMessage_arbLock.invalidate();
			alertMessage_arbUnlock.setVisible(false);
			alertMessage_arbUnlock.invalidate();
			alertMessage_arbStopVent.setVisible(false);
			alertMessage_arbStopVent.invalidate();
			alertMessage_lock.setVisible(false);
			alertMessage_lock.invalidate();
		}
	}
	state = ALERT;
}
void screenView::click_yesAlert()
{
	isAlerting = 0;
	container_alert.setVisible(false);
	container_alert.invalidate();
	
	if(lastButton == WEIGHT_BUTTON)
	{
		weight_intval = weight_tmp_intval;
		
		Unicode::snprintf(weight_valBuffer, WEIGHT_VAL_SIZE, "%d", (int)weight_tmp_intval);
		weight_val.setWildcard1(weight_valBuffer);
		weight_val.invalidate();
		
		updateIdealWeightParameter();
		isLoading = true;
		click_patientInfo();
	}
	else if(lastButton == LOCK_BUTTON)
	{
		lockScreen_intval = 0;
		if(image_lock_bar.isVisible())
		{
			image_lock_bar.setVisible(false);
			image_lock_bar.invalidate();	
			image_unlock_bar.setVisible(true);
			image_unlock_bar.invalidate();	
		}
	}
	else if(lastButton == UNLOCK_BUTTON)
	{
		lockScreen_intval = 1;
		if(!image_lock_bar.isVisible())
		{
			image_lock_bar.setVisible(true);
			image_lock_bar.invalidate();	
			image_unlock_bar.setVisible(false);
			image_unlock_bar.invalidate();	
		}
	}
	else if(lastButton == STOPVENT_BUTTON)
	{
		flag_startVent = 0;
		arb_pauseButton.setVisible(false);
		arb_pauseButton.invalidate();
		pauseButton.setVisible(false);
		pauseButton.invalidate();
		if(isArabic)
		{
			arb_startButton.setVisible(true);
			arb_startButton.invalidate();
		}
		else
		{			
			startButton.setVisible(true);
			startButton.invalidate();
		}
		sendConfig();
	}
	
	else if(lastButton == CIRCUITSETTING_BUTTON)
	{
		// stop ventilating 
		flag_startVent = 0;
		arb_pauseButton.setVisible(false);
		arb_pauseButton.invalidate();
		pauseButton.setVisible(false);
		pauseButton.invalidate();
		if(isArabic)
		{
			arb_startButton.setVisible(true);
			arb_startButton.invalidate();
		}
		else
		{
			startButton.setVisible(true);
			startButton.invalidate();
		}
		sendConfig();
		
		// go to circuit setting		
		pressKey = 0;
		key1 = 0;
		encoderCounter = 0;
		tmp = 0;
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		//isCircuitSetting = true;
		container_initializeScreen.setVisible(true);
		container_initializeScreen.invalidate();
		container_initializeAge.setVisible(true);
		container_initializeAge.invalidate();
		container_settingScreen.setVisible(false);
		container_settingScreen.invalidate();
		container_mainScreen.setVisible(false);
		container_mainScreen.invalidate();
		state = INIT_AGE;
	}
	else if(lastButton == CPR_BUTTON)
	{
		//CPR_intval = 1;
		mode_int = 10; //CPR mode
		CPR_big_txt.setVisible(true);
		CPR_big_txt.invalidate();
		click_mode();
		click_backVentSetting();
		click_backSetting();
		startVent();
	}
	state = lastState;
}
void screenView::click_cancelAlert()
{
	isAlerting = 0;
	container_alert.setVisible(false);
	container_alert.invalidate();
	if(lastButton == WEIGHT_BUTTON)
	{ 
		click_patientInfo();
		weight_tmp_intval = weight_intval;
		Unicode::snprintf(weight_valBuffer, WEIGHT_VAL_SIZE, "%d", (int)weight_tmp_intval);
		weight_val.setWildcard1(weight_valBuffer);
		weight_val.invalidate();
		
		RR_tmp_intval = RR_intval;
		VT_tmp_intval = VT_intval;
		PEEP_tmp_intval = PEEP_intval;
		PControl_tmp_intval = PControl_intval;
		Ti_tmp_intval = Ti_intval;
		FiO2_tmp_intval = FiO2_intval;
	}
	else if(lastButton == LOCK_BUTTON)
	{
		lockScreen_intval = 1;
	}
	else if(lastButton == STOPVENT_BUTTON)
	{
		lockScreen_intval = 0;
	}
	state = lastState;
}
void screenView::sendConfig()
{
	isConfigTransferd = true;
	float val;
	
	// fill tx_data
	strcpy((char*)tx_config, "conf");
	strcpy((char*)tx_config+4, "run");
	
	memcpy(tx_config+7, &flag_startVent, sizeof(float)); // 0-1
	
	strcpy((char*)tx_config+11, "mod");
	memcpy(tx_config+14, &mode_int, sizeof(float));
	
	strcpy((char*)tx_config+18, "rrh:");
	memcpy(tx_config+21, &RR_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+25, "rr:");
	memcpy(tx_config+28, &RR_intval, sizeof(float));
	
	strcpy((char*)tx_config+32, "rrl:");
	memcpy(tx_config+35, &RR_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+39, "peh");
	memcpy(tx_config+42, &pressure_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+46, "pep");
	memcpy(tx_config+49, &PEEP_intval, sizeof(float));
	
	strcpy((char*)tx_config+53, "pel");
	memcpy(tx_config+56, &pressure_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+60, "pih");
	memcpy(tx_config+63, &pressure_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+67, "fis");
	memcpy(tx_config+70, &FiO2_intval, sizeof(float));
	
	strcpy((char*)tx_config+74, "pil");
	memcpy(tx_config+77, &pressure_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+81, "prh");
	memcpy(tx_config+84, &pressure_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+88, "prl");
	memcpy(tx_config+91, &pressure_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+95, "vih");
	memcpy(tx_config+98, &vti_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+102, "vi:");
	memcpy(tx_config+105, &VT_intval, sizeof(float));
	
	strcpy((char*)tx_config+109, "vil");
	memcpy(tx_config+112, &vti_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+116, "veh");
	memcpy(tx_config+119, &vte_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+123, "vel");
	memcpy(tx_config+126, &vte_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+130, "meh");
	memcpy(tx_config+133, &MVe_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+137, "mel");
	memcpy(tx_config+140, &MVe_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+144, "mih");
	memcpy(tx_config+147, &MVi_alarm_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+151, "mil");
	memcpy(tx_config+154, &MVi_alarm_minVal, sizeof(float));
	
	strcpy((char*)tx_config+158, "apn");
	memcpy(tx_config+161, &apnea_backupIntval, sizeof(float));
	
	strcpy((char*)tx_config+165, "sph");
	memcpy(tx_config+168, &spo2_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+172, "spl");
	memcpy(tx_config+175, &spo2_minVal, sizeof(float));
	
	strcpy((char*)tx_config+179, "hrh");
	memcpy(tx_config+182, &pulseRate_maxIntVal, sizeof(float));
	
	strcpy((char*)tx_config+186, "hrl");
	memcpy(tx_config+189, &pulseRate_minIntVal, sizeof(float));
	
	strcpy((char*)tx_config+193, "fih");
	memcpy(tx_config+196, &FiO2_alarm_maxIntVal, sizeof(float));
	
	strcpy((char*)tx_config+200, "fil");
	memcpy(tx_config+203, &FiO2_alarm_minIntVal, sizeof(float));
	
	strcpy((char*)tx_config+207, "ti:");
	memcpy(tx_config+210, &Ti_intval, sizeof(float));
	
	strcpy((char*)tx_config+214, "fsh");
	memcpy(tx_config+217, &flowShape_intval, sizeof(float));
	
	strcpy((char*)tx_config+221, "tgp");
	memcpy(tx_config+224, &sens_intval, sizeof(float));
	
	strcpy((char*)tx_config+228, "pct");
	memcpy(tx_config+231, &PControl_intval, sizeof(float));
	
	strcpy((char*)tx_config+235, "rti");
	memcpy(tx_config+238, &riseTime_intval, sizeof(float));
	
	strcpy((char*)tx_config+242, "wkg");
	memcpy(tx_config+245, &weight_intval, sizeof(float));
	
//	strcpy((char*)tx_config+249, "svl");
//	memcpy(tx_config+252, &safetyVT_intval, sizeof(float));
	
	strcpy((char*)tx_config+256, "ps:");
	memcpy(tx_config+259, &Psupp_intval, sizeof(float));
	
	strcpy((char*)tx_config+263, "cyc");
	memcpy(tx_config+266, &cyclingOff_intval, sizeof(float));
	
	strcpy((char*)tx_config+270, "pfh");
	memcpy(tx_config+273, &PIF_maxVal, sizeof(float));
	
	strcpy((char*)tx_config+277, "pfl");
	memcpy(tx_config+280, &PIF_minVal, sizeof(float));
	
	strcpy((char*)tx_config+284, "tpf");
	memcpy(tx_config+287, &trigger_intval, sizeof(float));
	
	strcpy((char*)tx_config+291, "tin");
	memcpy(tx_config+294, &Ti_min_intval, sizeof(float));
	
	strcpy((char*)tx_config+298, "tix");
	memcpy(tx_config+301, &Ti_max_intval, sizeof(float));
	
	strcpy((char*)tx_config+305, "eps");
	memcpy(tx_config+308, &EPAP_intval, sizeof(float));
	
	strcpy((char*)tx_config+312, "ips");
	memcpy(tx_config+315, &IPAP_intval, sizeof(float));
	
	strcpy((char*)tx_config+319, "cps");
	memcpy(tx_config+322, &CPAP_intval, sizeof(float));
	
	strcpy((char*)tx_config+326, "crd");
	memcpy(tx_config+329, &circuitDis_intval, sizeof(float));
	
	strcpy((char*)tx_config+333, "hil");
	memcpy(tx_config+336, &Leak_alarm_maxIntVal, sizeof(float));
	
	val = (float)circuitType_intval;
	strcpy((char*)tx_config+340, "crt");
	memcpy(tx_config+343, &val, sizeof(float));
	
	strcpy((char*)tx_config+347, "ift");
	memcpy(tx_config+350, &interfaceType_intval, sizeof(float)); 
	
	strcpy((char*)tx_config+354, "obs");
	memcpy(tx_config+357, &obstruction_intval, sizeof(float)); 
	
	strcpy((char*)tx_config+361, "apr");
	memcpy(tx_config+364, &backupMode_intval, sizeof(float));
	
	strcpy((char*)tx_config+368, "apd");
	memcpy(tx_config+371, &apneaDetection_intval, sizeof(float));
	
	strcpy((char*)tx_config+375, "bvt");
	memcpy(tx_config+378, &backup_VT_intval, sizeof(float));
	
	strcpy((char*)tx_config+382, "bti");
	memcpy(tx_config+385, &backup_Ti_intval, sizeof(float));
	
	strcpy((char*)tx_config+389, "brr");
	memcpy(tx_config+392, &backup_RR_intval, sizeof(float));
	
	strcpy((char*)tx_config+396, "bpe");
	memcpy(tx_config+399, &backup_PEEP_intval, sizeof(float));
	
	strcpy((char*)tx_config+403, "bsh");
	memcpy(tx_config+406, &backup_flowShape_intval, sizeof(float));
	
	strcpy((char*)tx_config+410, "bpc");
	memcpy(tx_config+413, &backup_PControl_intval, sizeof(float));
	
	strcpy((char*)tx_config+417, "brt");
	memcpy(tx_config+420, &backup_riseTime_intval, sizeof(float));
	
	strcpy((char*)tx_config+424, "svt");
	memcpy(tx_config+427, &safetyVT_intval, sizeof(float));
	
	strcpy((char*)tx_config+431, "psm");
	memcpy(tx_config+434, &PSMax_intval, sizeof(float));
	
	strcpy((char*)tx_config+438, "pcm");
	memcpy(tx_config+441, &PControlMax_intval, sizeof(float));
	
	strcpy((char*)tx_config+445, "ipm");
	memcpy(tx_config+448, &IPAPMax_intval, sizeof(float));
	
	val = (float)maskType_intval;
	strcpy((char*)tx_config+452, "mst");
	memcpy(tx_config+455, &val, sizeof(float));
	
	val = (float)patientType_intval;
	strcpy((char*)tx_config+459, "ptt");
	memcpy(tx_config+462, &val, sizeof(float));
	
	strcpy((char*)tx_config+466, "Tpu");
	memcpy(tx_config+469, &TiInspPause_intval, sizeof(float));
	
	
	strcpy((char*)tx_config+473, "Mnb");
	memcpy(tx_config+476, &manualBreath_intval, sizeof(float));
	manualBreath_intval = 0;
	
	strcpy((char*)tx_config+480, "csd");
	memcpy(tx_config+483, &calibration_sdp_state, sizeof(float));
	
	strcpy((char*)tx_config+487, "fcs");
	memcpy(tx_config+490, &forward_start, sizeof(float));
	
	strcpy((char*)tx_config+494, "bcs");
	memcpy(tx_config+497, &backward_start, sizeof(float));
	
	strcpy((char*)tx_config+501, "bts");
	memcpy(tx_config+504, &blockingStart, sizeof(float));
	
	// send tx_data
	HAL_SPI_Transmit(&hspi2,tx_config,700,10);
	isConfigTransferd = false;
}

void screenView::setLanguage()
{
	if(isArabic)
	{
		// buttons
		arb_cancelButton.setVisible(true);
		arb_cancelButton.invalidate();
		arb_yesButton.setVisible(true);
		arb_yesButton.invalidate();
		cancelButton.setVisible(false);
		cancelButton.invalidate();
		yesButton.setVisible(false);
		yesButton.invalidate();
		if(flag_startVent==1)
		{
			arb_pauseButton.setVisible(true);
			arb_pauseButton.invalidate();
			arb_startButton.setVisible(false);
			arb_startButton.invalidate();
		}
		else
		{
			arb_pauseButton.setVisible(false);
			arb_pauseButton.invalidate();
			arb_startButton.setVisible(true);
			arb_startButton.invalidate();
		}
		pauseButton.setVisible(false);
		pauseButton.invalidate();
		startButton.setVisible(false);
		startButton.invalidate();
		// setting screen
		text_deviceInfo.setVisible(false);
		text_deviceInfo.invalidate();
		arb_text_deviceInfo.setVisible(true);
		arb_text_deviceInfo.invalidate();
		text_patientInfo.setVisible(false);
		text_patientInfo.invalidate();
		arb_text_patientInfo.setVisible(true);
		arb_text_patientInfo.invalidate();
		text_ventSetting.setVisible(false);
		text_ventSetting.invalidate();
		arb_text_ventSetting.setVisible(true);
		arb_text_ventSetting.invalidate();
		text_alarms.setVisible(false);
		text_alarms.invalidate();
		arb_text_alarms.setVisible(true);
		arb_text_alarms.invalidate();
		text_age.setVisible(false);
		text_age.invalidate();
		arb_text_age.setVisible(true);
		arb_text_age.invalidate();
		text_deviceS.setVisible(false);
		text_deviceS.invalidate();
		arb_text_deviceS.setVisible(true);
		arb_text_deviceS.invalidate();
		text_trends.setVisible(false);
		text_trends.invalidate();
		arb_text_trends.setVisible(true);
		arb_text_trends.invalidate();
		text_circuitSetting.setVisible(false);
		text_circuitSetting.invalidate();
		arb_text_circuitSetting.setVisible(true);
		arb_text_circuitSetting.invalidate();
		// trends
		arb_text_alarmRecords.setVisible(true);
		arb_text_alarmRecords.invalidate();
		text_alarmRecords.setVisible(false);
		text_alarmRecords.invalidate();
		arb_text_dataRecords.setVisible(true);
		arb_text_dataRecords.invalidate();
		text_dataRecords.setVisible(false);
		text_dataRecords.invalidate();
		arb_text_noData.setVisible(true);
		arb_text_noData.invalidate();
		text_noData.setVisible(false);
		text_noData.invalidate();
		// device setting
		arb_text_arabic.setVisible(true);
		arb_text_arabic.invalidate();
		text_arabic.setVisible(false);
		text_arabic.invalidate();
		arb_text_english.setVisible(true);
		arb_text_english.invalidate();
		text_english.setVisible(false);
		text_english.invalidate();
		arb_text_audio.setVisible(true);
		arb_text_audio.invalidate();
		text_audio.setVisible(false);
		text_audio.invalidate();
		arb_text_deviceInfo.setVisible(true);
		arb_text_deviceInfo.invalidate();
		text_deviceInfo.setVisible(false);
		text_deviceInfo.invalidate();
		arb_text_time.setVisible(true);
		arb_text_time.invalidate();
		text_time.setVisible(false);
		text_time.invalidate();
		arb_text_language.setVisible(true);
		arb_text_language.invalidate();
		text_language.setVisible(false);
		text_language.invalidate();
		arb_text_brightness.setVisible(true);
		arb_text_brightness.invalidate();
		text_brightness.setVisible(false);
		text_brightness.invalidate();
		arb_text_date.setVisible(true);
		arb_text_date.invalidate();
		text_date.setVisible(false);
		text_date.invalidate();
		// initialize
		arb_txt_pediatric_1.setVisible(true);
		arb_txt_pediatric_1.invalidate();
		txt_pediatric_1.setVisible(false);
		txt_pediatric_1.invalidate();
		arb_txt_adult_1.setVisible(true);
		arb_txt_adult_1.invalidate();
		txt_adult_1.setVisible(false);
		txt_adult_1.invalidate();
		arb_txt_titleMask_1.setVisible(true);
		arb_txt_titleMask_1.invalidate();
		txt_titleMask_1.setVisible(false);
		txt_titleMask_1.invalidate();
		arb_txt_vented.setVisible(true);
		arb_txt_vented.invalidate();
		txt_vented.setVisible(false);
		txt_vented.invalidate();
		arb_txt_nonVented.setVisible(true);
		arb_txt_nonVented.invalidate();
		txt_nonVented.setVisible(false);
		txt_nonVented.invalidate();
		arb_txt_title_interface.setVisible(true);
		arb_txt_title_interface.invalidate();
		txt_title_interface.setVisible(false);
		txt_title_interface.invalidate();
		arb_txt_mask.setVisible(true);
		arb_txt_mask.invalidate();
		txt_mask.setVisible(false);
		txt_mask.invalidate();
		arb_txt_invasive.setVisible(true);
		arb_txt_invasive.invalidate();
		txt_invasive.setVisible(false);
		txt_invasive.invalidate();
		arb_txt_mask_explanation.setVisible(true);
		arb_txt_mask_explanation.invalidate();
		txt_mask_explanation.setVisible(false);
		txt_mask_explanation.invalidate();
		arb_txt_invasive_explanation.setVisible(true);
		arb_txt_invasive_explanation.invalidate();
		txt_invasive_explanation.setVisible(false);
		txt_invasive_explanation.invalidate();
		arb_txt_title_result.setVisible(true);
		arb_txt_title_result.invalidate();
		txt_title_result.setVisible(false);
		txt_title_result.invalidate();
		arb_txt_oxygenSensor.setVisible(true);
		arb_txt_oxygenSensor.invalidate();
		txt_oxygenSensor.setVisible(false);
		txt_oxygenSensor.invalidate();
		arb_txt_deviceTest.setVisible(true);
		arb_txt_deviceTest.invalidate();
		txt_deviceTest.setVisible(false);
		txt_deviceTest.invalidate();
		arb_txt_learnCiruit.setVisible(true);
		arb_txt_learnCiruit.invalidate();
		txt_learnCircuit.setVisible(false);
		txt_learnCircuit.invalidate();
		arb_txt_continue_end.setVisible(true);
		arb_txt_continue_end.invalidate();
		txt_continue_end.setVisible(false);
		txt_continue_end.invalidate();
		arb_txt_title_1.setVisible(true);
		arb_txt_title_1.invalidate();
		txt_title_1.setVisible(false);
		txt_title_1.invalidate();
		arb_txt_singleCircuit.setVisible(true);
		arb_txt_singleCircuit.invalidate();
		txt_singleCircuit.setVisible(false);
		txt_singleCircuit.invalidate();
		arb_txt_singleCircuit_explanation.setVisible(true);
		arb_txt_singleCircuit_explanation.invalidate();
		txt_singleCircuit_explanation.setVisible(false);
		txt_singleCircuit_explanation.invalidate();
		arb_txt_singleCircuitLeak.setVisible(true);
		arb_txt_singleCircuitLeak.invalidate();
		txt_singleCircuitLeak.setVisible(false);
		txt_singleCircuitLeak.invalidate();
		arb_txt_singleCircuitLeak_explanation.setVisible(true);
		arb_txt_singleCircuitLeak_explanation.invalidate();
		txt_singleCircuitLeak_explanation.setVisible(false);
		txt_singleCircuitLeak_explanation.invalidate();
		arb_txt_selectPatientType.setVisible(true);
		arb_txt_selectPatientType.invalidate();
		txt_selectPatientType.setVisible(false);
		txt_selectPatientType.invalidate();
		// others
		arb_txt_mode.setVisible(true);
		arb_txt_mode.invalidate();
		txt_mode.setVisible(false);
		txt_mode.invalidate();
		arb_text_Mode.setVisible(true);
		arb_text_Mode.invalidate();
		text_mode.setVisible(false);
		text_mode.invalidate();
		arb_txt_alarm_activeAlarms.setVisible(true);
		arb_txt_alarm_activeAlarms.invalidate();
		txt_alarm_activeAlarms.setVisible(false);
		txt_alarm_activeAlarms.invalidate();
		arb_txt_time_activeAlarms.setVisible(true);
		arb_txt_time_activeAlarms.invalidate();
		txt_time_activeAlarms.setVisible(false);
		txt_time_activeAlarms.invalidate();
		arb_txt_description_activeAlarms.setVisible(true);
		arb_txt_description_activeAlarms.invalidate();
		txt_description_activeAlarms.setVisible(false);
		txt_description_activeAlarms.invalidate();
		arb_txt_apneaAlarm.setVisible(true);
		arb_txt_apneaAlarm.invalidate();
		txt_apneaAlarm.setVisible(false);
		txt_apneaAlarm.invalidate();
		arb_txt_apneaTime_backup.setVisible(true);
		arb_txt_apneaTime_backup.invalidate();
		txt_apneaTime_backup.setVisible(false);
		txt_apneaTime_backup.invalidate();
		arb_txt_apneaDetection_backup.setVisible(true);
		arb_txt_apneaDetection_backup.invalidate();
		txt_apneaDetection_backup.setVisible(false);
		txt_apneaDetection_backup.invalidate();
		arb_txt_ventH.setVisible(true);
		arb_txt_ventH.invalidate();
		txt_ventH.setVisible(false);
		txt_ventH.invalidate();
		arb_txt_ventM.setVisible(true);
		arb_txt_ventM.invalidate();
		txt_ventM.setVisible(false);
		txt_ventM.invalidate();
		arb_txt_ventV.setVisible(true);
		arb_txt_ventV.invalidate();
		txt_ventV.setVisible(false);
		txt_ventV.invalidate();
		arb_txt_softV.setVisible(true);
		arb_txt_softV.invalidate();
		txt_softV.setVisible(false);
		txt_softV.invalidate();
		arb_txt_powerd.setVisible(true);
		arb_txt_powerd.invalidate();
		txt_powerd.setVisible(false);
		txt_powerd.invalidate();
		txt_hours.setVisible(false);
		txt_hours.invalidate();
		arb_txt_backupMode.setVisible(true);
		arb_txt_backupMode.invalidate();
		txt_backupMode.setVisible(false);
		txt_backupMode.invalidate();
		arb_txt_backupConfig.setVisible(true);
		arb_txt_backupConfig.invalidate();
		txt_backupConfig.setVisible(false);
		txt_backupConfig.invalidate();
		arb_text_weighttxt.setVisible(true);
		arb_text_weighttxt.invalidate();
		text_weighttxt.setVisible(false);
		text_weighttxt.invalidate();
		arb_txt_alarmTime.setVisible(true);
		arb_txt_alarmTime.invalidate();
		txt_alarmTime.setVisible(false);
		txt_alarmTime.invalidate();
		arb_txt_alarmDescription.setVisible(true);
		arb_txt_alarmDescription.invalidate();
		txt_alarmDescription.setVisible(false);
		txt_alarmDescription.invalidate();
		arb_txt_backupSetting.setVisible(true);
		arb_txt_backupSetting.invalidate();
		txt_backupSetting.setVisible(false);
		txt_backupSetting.invalidate();
	}
	else // english
	{
		// buttons
		arb_cancelButton.setVisible(false);
		arb_cancelButton.invalidate();
		arb_yesButton.setVisible(false);
		arb_yesButton.invalidate();
		cancelButton.setVisible(true);
		cancelButton.invalidate();
		yesButton.setVisible(true);
		yesButton.invalidate();
		arb_pauseButton.setVisible(false);
		arb_pauseButton.invalidate();
		arb_startButton.setVisible(false);
		arb_startButton.invalidate();
		if(flag_startVent==1)
		{
			pauseButton.setVisible(true);
			pauseButton.invalidate();
			startButton.setVisible(false);
			startButton.invalidate();
		}
		else
		{
			pauseButton.setVisible(false);
			pauseButton.invalidate();
			startButton.setVisible(true);
			startButton.invalidate();
		}
		//settings
		text_deviceInfo.setVisible(true);
		text_deviceInfo.invalidate();
		arb_text_deviceInfo.setVisible(false);
		arb_text_deviceInfo.invalidate();
		text_patientInfo.setVisible(true);
		text_patientInfo.invalidate();
		arb_text_patientInfo.setVisible(false);
		arb_text_patientInfo.invalidate();
		text_ventSetting.setVisible(true);
		text_ventSetting.invalidate();
		arb_text_ventSetting.setVisible(false);
		arb_text_ventSetting.invalidate();
		text_alarms.setVisible(true);
		text_alarms.invalidate();
		arb_text_alarms.setVisible(false);
		arb_text_alarms.invalidate();
		text_age.setVisible(true);
		text_age.invalidate();
		arb_text_age.setVisible(false);
		arb_text_age.invalidate();
		text_deviceS.setVisible(true);
		text_deviceS.invalidate();
		arb_text_deviceS.setVisible(false);
		arb_text_deviceS.invalidate();
		text_trends.setVisible(true);
		text_trends.invalidate();
		arb_text_trends.setVisible(false);
		arb_text_trends.invalidate();
		text_circuitSetting.setVisible(true);
		text_circuitSetting.invalidate();
		arb_text_circuitSetting.setVisible(false);
		arb_text_circuitSetting.invalidate();
		// trends
		arb_text_alarmRecords.setVisible(false);
		arb_text_alarmRecords.invalidate();
		text_alarmRecords.setVisible(true);
		text_alarmRecords.invalidate();
		arb_text_dataRecords.setVisible(false);
		arb_text_dataRecords.invalidate();
		text_dataRecords.setVisible(true);
		text_dataRecords.invalidate();
		arb_text_noData.setVisible(false);
		arb_text_noData.invalidate();
		text_noData.setVisible(true);
		text_noData.invalidate();
		// device setting
		arb_text_arabic.setVisible(false);
		arb_text_arabic.invalidate();
		text_arabic.setVisible(true);
		text_arabic.invalidate();
		arb_text_english.setVisible(false);
		arb_text_english.invalidate();
		text_english.setVisible(true);
		text_english.invalidate();
		arb_text_audio.setVisible(false);
		arb_text_audio.invalidate();
		text_audio.setVisible(true);
		text_audio.invalidate();
		arb_text_time.setVisible(false);
		arb_text_time.invalidate();
		text_time.setVisible(true);
		text_time.invalidate();
		arb_text_language.setVisible(false);
		arb_text_language.invalidate();
		text_language.setVisible(true);
		text_language.invalidate();
		arb_text_brightness.setVisible(false);
		arb_text_brightness.invalidate();
		text_brightness.setVisible(true);
		text_brightness.invalidate();
		arb_text_date.setVisible(false);
		arb_text_date.invalidate();
		text_date.setVisible(true);
		text_date.invalidate();
		// initialize
		arb_txt_pediatric_1.setVisible(false);
		arb_txt_pediatric_1.invalidate();
		txt_pediatric_1.setVisible(true);
		txt_pediatric_1.invalidate();
		arb_txt_adult_1.setVisible(false);
		arb_txt_adult_1.invalidate();
		txt_adult_1.setVisible(true);
		txt_adult_1.invalidate();
		arb_txt_titleMask_1.setVisible(false);
		arb_txt_titleMask_1.invalidate();
		txt_titleMask_1.setVisible(true);
		txt_titleMask_1.invalidate();
		arb_txt_vented.setVisible(false);
		arb_txt_vented.invalidate();
		txt_vented.setVisible(true);
		txt_vented.invalidate();
		arb_txt_nonVented.setVisible(false);
		arb_txt_nonVented.invalidate();
		txt_nonVented.setVisible(true);
		txt_nonVented.invalidate();
		arb_txt_title_interface.setVisible(false);
		arb_txt_title_interface.invalidate();
		txt_title_interface.setVisible(true);
		txt_title_interface.invalidate();
		arb_txt_mask.setVisible(false);
		arb_txt_mask.invalidate();
		txt_mask.setVisible(true);
		txt_mask.invalidate();
		arb_txt_invasive.setVisible(false);
		arb_txt_invasive.invalidate();
		txt_invasive.setVisible(true);
		txt_invasive.invalidate();
		arb_txt_mask_explanation.setVisible(false);
		arb_txt_mask_explanation.invalidate();
		txt_mask_explanation.setVisible(true);
		txt_mask_explanation.invalidate();
		arb_txt_invasive_explanation.setVisible(false);
		arb_txt_invasive_explanation.invalidate();
		txt_invasive_explanation.setVisible(true);
		txt_invasive_explanation.invalidate();
		arb_txt_title_result.setVisible(false);
		arb_txt_title_result.invalidate();
		txt_title_result.setVisible(true);
		txt_title_result.invalidate();
		arb_txt_oxygenSensor.setVisible(false);
		arb_txt_oxygenSensor.invalidate();
		txt_oxygenSensor.setVisible(true);
		txt_oxygenSensor.invalidate();
		arb_txt_deviceTest.setVisible(false);
		arb_txt_deviceTest.invalidate();
		txt_deviceTest.setVisible(true);
		txt_deviceTest.invalidate();
		arb_txt_learnCiruit.setVisible(false);
		arb_txt_learnCiruit.invalidate();
		txt_learnCircuit.setVisible(true);
		txt_learnCircuit.invalidate();
		arb_txt_continue_end.setVisible(false);
		arb_txt_continue_end.invalidate();
		txt_continue_end.setVisible(true);
		txt_continue_end.invalidate();
		arb_txt_title_1.setVisible(false);
		arb_txt_title_1.invalidate();
		txt_title_1.setVisible(true);
		txt_title_1.invalidate();
		arb_txt_singleCircuit.setVisible(false);
		arb_txt_singleCircuit.invalidate();
		txt_singleCircuit.setVisible(true);
		txt_singleCircuit.invalidate();
		arb_txt_singleCircuit_explanation.setVisible(false);
		arb_txt_singleCircuit_explanation.invalidate();
		txt_singleCircuit_explanation.setVisible(true);
		txt_singleCircuit_explanation.invalidate();
		arb_txt_singleCircuitLeak.setVisible(false);
		arb_txt_singleCircuitLeak.invalidate();
		txt_singleCircuitLeak.setVisible(true);
		txt_singleCircuitLeak.invalidate();
		arb_txt_singleCircuitLeak_explanation.setVisible(false);
		arb_txt_singleCircuitLeak_explanation.invalidate();
		txt_singleCircuitLeak_explanation.setVisible(true);
		txt_singleCircuitLeak_explanation.invalidate();
		arb_txt_selectPatientType.setVisible(false);
		arb_txt_selectPatientType.invalidate();
		txt_selectPatientType.setVisible(true);
		txt_selectPatientType.invalidate();
		// others
		arb_txt_mode.setVisible(false);
		arb_txt_mode.invalidate();
		txt_mode.setVisible(true);
		txt_mode.invalidate();
		arb_text_Mode.setVisible(false);
		arb_text_Mode.invalidate();
		text_mode.setVisible(true);
		text_mode.invalidate();
		arb_txt_alarm_activeAlarms.setVisible(false);
		arb_txt_alarm_activeAlarms.invalidate();
		txt_alarm_activeAlarms.setVisible(true);
		txt_alarm_activeAlarms.invalidate();
		arb_txt_time_activeAlarms.setVisible(false);
		arb_txt_time_activeAlarms.invalidate();
		txt_time_activeAlarms.setVisible(true);
		txt_time_activeAlarms.invalidate();
		arb_txt_description_activeAlarms.setVisible(false);
		arb_txt_description_activeAlarms.invalidate();
		txt_description_activeAlarms.setVisible(true);
		txt_description_activeAlarms.invalidate();
		arb_txt_apneaAlarm.setVisible(false);
		arb_txt_apneaAlarm.invalidate();
		txt_apneaAlarm.setVisible(true);
		txt_apneaAlarm.invalidate();
		arb_txt_apneaTime_backup.setVisible(false);
		arb_txt_apneaTime_backup.invalidate();
		txt_apneaTime_backup.setVisible(true);
		txt_apneaTime_backup.invalidate();
		arb_txt_apneaDetection_backup.setVisible(false);
		arb_txt_apneaDetection_backup.invalidate();
		txt_apneaDetection_backup.setVisible(true);
		txt_apneaDetection_backup.invalidate();
		arb_txt_ventH.setVisible(false);
		arb_txt_ventH.invalidate();
		txt_ventH.setVisible(true);
		txt_ventH.invalidate();
		arb_txt_ventM.setVisible(false);
		arb_txt_ventM.invalidate();
		txt_ventM.setVisible(true);
		txt_ventM.invalidate();
		arb_txt_ventV.setVisible(false);
		arb_txt_ventV.invalidate();
		txt_ventV.setVisible(true);
		txt_ventV.invalidate();
		arb_txt_softV.setVisible(false);
		arb_txt_softV.invalidate();
		txt_softV.setVisible(true);
		txt_softV.invalidate();
		arb_txt_powerd.setVisible(false);
		arb_txt_powerd.invalidate();
		txt_powerd.setVisible(true);
		txt_powerd.invalidate();
		txt_hours.setVisible(true);
		txt_hours.invalidate();
		arb_txt_backupMode.setVisible(false);
		arb_txt_backupMode.invalidate();
		txt_backupMode.setVisible(true);
		txt_backupMode.invalidate();
		arb_txt_backupConfig.setVisible(false);
		arb_txt_backupConfig.invalidate();
		txt_backupConfig.setVisible(true);
		txt_backupConfig.invalidate();
		arb_text_weighttxt.setVisible(false);
		arb_text_weighttxt.invalidate();
		text_weighttxt.setVisible(true);
		text_weighttxt.invalidate();
		arb_txt_alarmTime.setVisible(false);
		arb_txt_alarmTime.invalidate();
		txt_alarmTime.setVisible(true);
		txt_alarmTime.invalidate();
		arb_txt_alarmDescription.setVisible(false);
		arb_txt_alarmDescription.invalidate();
		txt_alarmDescription.setVisible(true);
		txt_alarmDescription.invalidate();
		arb_txt_backupSetting.setVisible(false);
		arb_txt_backupSetting.invalidate();
		txt_backupSetting.setVisible(true);
		txt_backupSetting.invalidate();
	}
}
